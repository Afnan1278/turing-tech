[{"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\index.tsx":"1","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\reportWebVitals.ts":"2","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\App.tsx":"3","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\AppInitializer.tsx":"4","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\WithClearCache.tsx":"5","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\common\\Footer.tsx":"6","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\ConfirmationDialog.tsx":"7","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\common\\Header.tsx":"8","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\SnakAlert.tsx":"9","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\routes\\index.tsx":"10","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\store\\actions.js":"11","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\store\\index.ts":"12","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\const.ts":"13","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\auth.ts":"14","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\AppSideMenu.tsx":"15","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\AppSwitcher.tsx":"16","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\ProfileMenu.tsx":"17","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\routes\\routing.tsx":"18","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\store\\actionTypes.js":"19","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\client.ts":"20","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\core\\DropdownMenu.tsx":"21","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\Login.tsx":"22","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\MFA.tsx":"23","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\featuredDashboards\\RepDashboard.tsx":"24","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\TestPage.tsx":"25","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\ResetPassword.tsx":"26","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\ChangePassword.tsx":"27","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\featuredDashboards\\AccountDeepdiveDashboard.tsx":"28","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\adminUsers\\form.tsx":"29","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\index.tsx":"30","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\tags\\form.tsx":"31","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\AdminDashboard.tsx":"32","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\featuredDashboards\\AccountDashboradUsecase.tsx":"33","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\SupplierLogin.tsx":"34","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\dashboard1\\AccountExplorer.tsx":"35","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderTracking\\OrderDetail.tsx":"36","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\vendors\\form.tsx":"37","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\products\\form.tsx":"38","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderForm\\OrderForm.tsx":"39","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\reports\\BillingReport.tsx":"40","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\adminUsers\\index.tsx":"41","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\featuredDashboards\\index.tsx":"42","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\tags\\index.tsx":"43","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderTracking\\index.tsx":"44","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\vendors\\index.tsx":"45","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\products\\index.tsx":"46","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\AIML\\index.tsx":"47","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\index.tsx":"48","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\invoices\\index.tsx":"49","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\index.tsx":"50","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\reports\\index.tsx":"51","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planList\\index.tsx":"52","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\sfdc.ts":"53","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\index.tsx":"54","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\standardPlan\\index.tsx":"55","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\util.ts":"56","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\ABU.ts":"57","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\CDateRangePicker.tsx":"58","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\SearchableDropdown.tsx":"59","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\ModalDialog.tsx":"60","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\assets\\sampleModels.js":"61","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\assets\\groups.js":"62","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\tags.ts":"63","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\orders.ts":"64","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\index.ts":"65","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\billingConfigurator.ts":"66","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\helper.ts":"67","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\DialogSavePlan.tsx":"68","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\BillingSpliter.tsx":"69","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\GridView.tsx":"70","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\BillingModelComparison.tsx":"71","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\DialogBillingModelSelector.tsx":"72","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\common.ts":"73","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\ParameterSelector.tsx":"74","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planList\\DialogJsonFeed.tsx":"75","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planList\\PlanDetailDialog.tsx":"76","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planList\\ListFilter.tsx":"77","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\MatrixCSP.tsx":"78","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\Summary.tsx":"79","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\TImeSeries.tsx":"80","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\MatrixAccountStacked.tsx":"81","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\MatrixTags.tsx":"82","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\Spider.tsx":"83","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\admin\\index.ts":"84","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\order_optional.ts":"85","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\motronome.ts":"86","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\billingConfigurator\\index.tsx":"87","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\order_appliance.ts":"88","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\order_shipping.ts":"89","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\BillingModelSelector.tsx":"90","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\vendors.ts":"91","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\products.ts":"92","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\AccumulatedPieChart.tsx":"93","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planList\\DialogAccountSelector.tsx":"94","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\SummaryTreeMap.tsx":"95","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\TimeSeriesChart.tsx":"96","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\SummarySpiderChart.tsx":"97","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\AreaStackedAccount.tsx":"98","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\billing.ts":"99","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\admin\\users.ts":"100","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\AreaGraphSingleSeries.tsx":"101","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\SpiderChart.tsx":"102","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\billingConfigurator\\GraphGuage.tsx":"103","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\billingConfigurator\\StackBarGraph.tsx":"104","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\billingConfigurator\\GraphGroupParametersPie.tsx":"105","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\billingConfigurator\\InvoiceGraph.tsx":"106","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\billingConfigurator\\GraphParameters.tsx":"107","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\SummaryPie.tsx":"108","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\ColumnChart.tsx":"109","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\SummaryLineChart.tsx":"110","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\MatrixAccount2.tsx":"111","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\MatrixStandard.tsx":"112","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\invoices\\InvoiceListing.tsx":"113","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\ThirdPartyData.tsx":"114","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\AIML.tsx":"115","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\RelatedRecords.tsx":"116","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\Summary.tsx":"117","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\monthlyComparison\\ComparasionGraphs.tsx":"118","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\AIML\\graphs\\GraphUpSell.tsx":"119","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\AIML\\graphs\\GraphCrossSell.tsx":"120","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\products\\Listing.tsx":"121","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\products\\Filter.tsx":"122","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\vendors\\Listing.tsx":"123","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\vendors\\Filter.tsx":"124","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderTracking\\Filter.tsx":"125","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderTracking\\Listing.tsx":"126","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\tags\\Listing.tsx":"127","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\tags\\Filter.tsx":"128","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\adminUsers\\Listing.tsx":"129","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\adminUsers\\Filter.tsx":"130","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\aiml.ts":"131","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\core\\Tabs.tsx":"132","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\LabelFieldsListing.tsx":"133","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\opportunity\\OpportunityPreview.tsx":"134","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\account\\ViewAccount.tsx":"135","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\contact\\ContactPreview.tsx":"136","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\event\\EventPreview.tsx":"137","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\AlertMessage.tsx":"138","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\AreaStacked.tsx":"139","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderTracking\\DialogAccountSelector.tsx":"140","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\core\\LabelField.tsx":"141","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\opportunity\\ViewOpportunity.tsx":"142","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\contact\\ViewContact.tsx":"143","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\event\\ViewEvent.tsx":"144","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\looker.js":"145","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\Signup.tsx":"146","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\Registration.tsx":"147","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\index.tsx":"148","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\valueIQ\\LineChart.tsx":"149","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\DialogFormulaSelector.tsx":"150","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\Listing.tsx":"151","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\ValueChart.tsx":"152","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\Dialog\\ContactAddDialog.tsx":"153","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\CSPImage.tsx":"154","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\edp\\index.tsx":"155","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\splitbilling\\index.tsx":"156","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supportContact.ts":"157","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\edp\\ListFilter.tsx":"158","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\splitbilling\\ListFilter.tsx":"159","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\edp\\ModelEDP.tsx":"160","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\splitbilling\\ModelSplitBilling.tsx":"161","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\valueIQ.ts":"162","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\Filter.tsx":"163","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\Download.tsx":"164","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\reports\\BillingReportStandard.tsx":"165","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderTracking\\DialogStatusSelector.tsx":"166","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\METER.ts":"167","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\valueIQ\\StackedColumn.tsx":"168","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\valueIQ\\StackedArea.tsx":"169","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\logs\\index.tsx":"170","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\logs\\Filter.tsx":"171","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\logs\\Listing.tsx":"172","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\logs\\StackedBar.tsx":"173","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\logs\\PieChart.tsx":"174","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\logs\\BubbleChart.tsx":"175","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\logs\\ColumnChart.tsx":"176","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\valueIQ\\FutureChart.tsx":"177","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\DialogPredictionSettings.tsx":"178","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\logs\\index.ts":"179","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\logs\\logs.ts":"180","D:\\Workspace\\react\\test\\src\\index.tsx":"181","D:\\Workspace\\react\\test\\src\\reportWebVitals.ts":"182","D:\\Workspace\\react\\test\\src\\App.tsx":"183","D:\\Workspace\\react\\test\\src\\WithClearCache.tsx":"184","D:\\Workspace\\react\\test\\src\\AppInitializer.tsx":"185","D:\\Workspace\\react\\test\\src\\common\\Footer.tsx":"186","D:\\Workspace\\react\\test\\src\\common\\Header.tsx":"187","D:\\Workspace\\react\\test\\src\\routes\\index.tsx":"188","D:\\Workspace\\react\\test\\src\\store\\index.ts":"189","D:\\Workspace\\react\\test\\src\\store\\actions.js":"190","D:\\Workspace\\react\\test\\src\\services\\auth.ts":"191","D:\\Workspace\\react\\test\\src\\routes\\routing.tsx":"192","D:\\Workspace\\react\\test\\src\\store\\actionTypes.js":"193","D:\\Workspace\\react\\test\\src\\services\\client.ts":"194","D:\\Workspace\\react\\test\\src\\pages\\Login.tsx":"195","D:\\Workspace\\react\\test\\src\\components\\AlertMessage.tsx":"196","D:\\Workspace\\react\\test\\src\\pages\\index.tsx":"197","D:\\Workspace\\react\\test\\src\\components\\SnakAlert.tsx":"198"},{"size":458,"mtime":1651306008950,"results":"199","hashOfConfig":"200"},{"size":440,"mtime":1651306008985,"results":"201","hashOfConfig":"200"},{"size":1396,"mtime":1651306336999,"results":"202","hashOfConfig":"200"},{"size":1809,"mtime":1651306337000,"results":"203","hashOfConfig":"200"},{"size":1714,"mtime":1651306008784,"results":"204","hashOfConfig":"200"},{"size":458,"mtime":1651306008940,"results":"205","hashOfConfig":"200"},{"size":2605,"mtime":1651306337048,"results":"206","hashOfConfig":"200"},{"size":4764,"mtime":1651306337045,"results":"207","hashOfConfig":"200"},{"size":2020,"mtime":1651306008945,"results":"208","hashOfConfig":"200"},{"size":1329,"mtime":1651306008986,"results":"209","hashOfConfig":"200"},{"size":1002,"mtime":1651306337158,"results":"210","hashOfConfig":"200"},{"size":1262,"mtime":1651306337160,"results":"211","hashOfConfig":"200"},{"size":2042,"mtime":1656620791121,"results":"212","hashOfConfig":"200"},{"size":677,"mtime":1651751423662,"results":"213","hashOfConfig":"200"},{"size":2617,"mtime":1651306337047,"results":"214","hashOfConfig":"200"},{"size":3080,"mtime":1651306337048,"results":"215","hashOfConfig":"200"},{"size":2318,"mtime":1651306337048,"results":"216","hashOfConfig":"200"},{"size":7099,"mtime":1657175838759,"results":"217","hashOfConfig":"200"},{"size":200,"mtime":1651306008992,"results":"218","hashOfConfig":"200"},{"size":3473,"mtime":1654866100502,"results":"219","hashOfConfig":"200"},{"size":2753,"mtime":1651306008948,"results":"220","hashOfConfig":"200"},{"size":6142,"mtime":1651306337078,"results":"221","hashOfConfig":"200"},{"size":5054,"mtime":1651306337078,"results":"222","hashOfConfig":"200"},{"size":1055,"mtime":1651306337130,"results":"223","hashOfConfig":"200"},{"size":10620,"mtime":1651306337078,"results":"224","hashOfConfig":"200"},{"size":3170,"mtime":1651306008957,"results":"225","hashOfConfig":"200"},{"size":7756,"mtime":1651306008954,"results":"226","hashOfConfig":"200"},{"size":1146,"mtime":1651306337130,"results":"227","hashOfConfig":"200"},{"size":11339,"mtime":1651744878302,"results":"228","hashOfConfig":"200"},{"size":6834,"mtime":1653183043796,"results":"229","hashOfConfig":"200"},{"size":6388,"mtime":1651306337097,"results":"230","hashOfConfig":"200"},{"size":1578,"mtime":1657219364874,"results":"231","hashOfConfig":"200"},{"size":1088,"mtime":1651306337129,"results":"232","hashOfConfig":"200"},{"size":4256,"mtime":1651306337132,"results":"233","hashOfConfig":"200"},{"size":43620,"mtime":1651306337128,"results":"234","hashOfConfig":"200"},{"size":22868,"mtime":1654521964945,"results":"235","hashOfConfig":"200"},{"size":13517,"mtime":1651306337145,"results":"236","hashOfConfig":"200"},{"size":15440,"mtime":1651306337139,"results":"237","hashOfConfig":"200"},{"size":63941,"mtime":1654521964828,"results":"238","hashOfConfig":"200"},{"size":11045,"mtime":1652705871551,"results":"239","hashOfConfig":"200"},{"size":3213,"mtime":1655462457990,"results":"240","hashOfConfig":"200"},{"size":5368,"mtime":1651306337131,"results":"241","hashOfConfig":"200"},{"size":2672,"mtime":1655488818023,"results":"242","hashOfConfig":"200"},{"size":6299,"mtime":1654521964945,"results":"243","hashOfConfig":"200"},{"size":3444,"mtime":1654521964961,"results":"244","hashOfConfig":"200"},{"size":3333,"mtime":1651306337140,"results":"245","hashOfConfig":"200"},{"size":538,"mtime":1651306008953,"results":"246","hashOfConfig":"200"},{"size":1858,"mtime":1651306008964,"results":"247","hashOfConfig":"200"},{"size":2079,"mtime":1651306337113,"results":"248","hashOfConfig":"200"},{"size":19728,"mtime":1656325227368,"results":"249","hashOfConfig":"200"},{"size":785,"mtime":1651306337140,"results":"250","hashOfConfig":"200"},{"size":6524,"mtime":1656620791139,"results":"251","hashOfConfig":"200"},{"size":1285,"mtime":1651306337152,"results":"252","hashOfConfig":"200"},{"size":25347,"mtime":1656620791134,"results":"253","hashOfConfig":"200"},{"size":9359,"mtime":1656620791142,"results":"254","hashOfConfig":"200"},{"size":2735,"mtime":1656620791151,"results":"255","hashOfConfig":"200"},{"size":527,"mtime":1651306337147,"results":"256","hashOfConfig":"200"},{"size":4608,"mtime":1651306337048,"results":"257","hashOfConfig":"200"},{"size":3529,"mtime":1651306337048,"results":"258","hashOfConfig":"200"},{"size":2409,"mtime":1653183043777,"results":"259","hashOfConfig":"200"},{"size":7158,"mtime":1651306337106,"results":"260","hashOfConfig":"200"},{"size":380,"mtime":1651306337101,"results":"261","hashOfConfig":"200"},{"size":655,"mtime":1651306337157,"results":"262","hashOfConfig":"200"},{"size":2709,"mtime":1654521964992,"results":"263","hashOfConfig":"200"},{"size":409,"mtime":1651306337153,"results":"264","hashOfConfig":"200"},{"size":1596,"mtime":1651306337150,"results":"265","hashOfConfig":"200"},{"size":1430,"mtime":1654239977856,"results":"266","hashOfConfig":"200"},{"size":3050,"mtime":1656620791126,"results":"267","hashOfConfig":"200"},{"size":4530,"mtime":1653183043779,"results":"268","hashOfConfig":"200"},{"size":3567,"mtime":1651306337048,"results":"269","hashOfConfig":"200"},{"size":3342,"mtime":1651306337098,"results":"270","hashOfConfig":"200"},{"size":1613,"mtime":1651306337099,"results":"271","hashOfConfig":"200"},{"size":1397,"mtime":1651306337151,"results":"272","hashOfConfig":"200"},{"size":12076,"mtime":1656620791128,"results":"273","hashOfConfig":"200"},{"size":1007,"mtime":1651306337109,"results":"274","hashOfConfig":"200"},{"size":5315,"mtime":1656620791136,"results":"275","hashOfConfig":"200"},{"size":3897,"mtime":1653183043782,"results":"276","hashOfConfig":"200"},{"size":8052,"mtime":1657294662192,"results":"277","hashOfConfig":"200"},{"size":15310,"mtime":1659027177098,"results":"278","hashOfConfig":"200"},{"size":5347,"mtime":1652441388235,"results":"279","hashOfConfig":"200"},{"size":4375,"mtime":1651561321285,"results":"280","hashOfConfig":"200"},{"size":5939,"mtime":1657294606018,"results":"281","hashOfConfig":"200"},{"size":21164,"mtime":1657294524747,"results":"282","hashOfConfig":"200"},{"size":100,"mtime":1651306008988,"results":"283","hashOfConfig":"200"},{"size":783,"mtime":1651306337154,"results":"284","hashOfConfig":"200"},{"size":445,"mtime":1651306008990,"results":"285","hashOfConfig":"200"},{"size":368,"mtime":1651306337078,"results":"286","hashOfConfig":"200"},{"size":788,"mtime":1651306337154,"results":"287","hashOfConfig":"200"},{"size":783,"mtime":1651306337154,"results":"288","hashOfConfig":"200"},{"size":1002,"mtime":1651306337099,"results":"289","hashOfConfig":"200"},{"size":1394,"mtime":1651306337157,"results":"290","hashOfConfig":"200"},{"size":2328,"mtime":1651306337156,"results":"291","hashOfConfig":"200"},{"size":2339,"mtime":1651313916251,"results":"292","hashOfConfig":"200"},{"size":3592,"mtime":1651306337108,"results":"293","hashOfConfig":"200"},{"size":2691,"mtime":1651313847605,"results":"294","hashOfConfig":"200"},{"size":2693,"mtime":1653047947005,"results":"295","hashOfConfig":"200"},{"size":4135,"mtime":1651313833878,"results":"296","hashOfConfig":"200"},{"size":1430,"mtime":1656331906888,"results":"297","hashOfConfig":"200"},{"size":2462,"mtime":1652340217536,"results":"298","hashOfConfig":"200"},{"size":867,"mtime":1651306337148,"results":"299","hashOfConfig":"200"},{"size":1665,"mtime":1651313912909,"results":"300","hashOfConfig":"200"},{"size":4019,"mtime":1651313780822,"results":"301","hashOfConfig":"200"},{"size":3096,"mtime":1651306337070,"results":"302","hashOfConfig":"200"},{"size":1793,"mtime":1651306337077,"results":"303","hashOfConfig":"200"},{"size":4071,"mtime":1651306337070,"results":"304","hashOfConfig":"200"},{"size":1888,"mtime":1651306337070,"results":"305","hashOfConfig":"200"},{"size":1949,"mtime":1651306337070,"results":"306","hashOfConfig":"200"},{"size":2366,"mtime":1651313821856,"results":"307","hashOfConfig":"200"},{"size":2166,"mtime":1651313901992,"results":"308","hashOfConfig":"200"},{"size":2363,"mtime":1659026308085,"results":"309","hashOfConfig":"200"},{"size":5239,"mtime":1657294619070,"results":"310","hashOfConfig":"200"},{"size":3495,"mtime":1657294575225,"results":"311","hashOfConfig":"200"},{"size":8847,"mtime":1651306008973,"results":"312","hashOfConfig":"200"},{"size":1555,"mtime":1651306008960,"results":"313","hashOfConfig":"200"},{"size":4123,"mtime":1651306337086,"results":"314","hashOfConfig":"200"},{"size":1312,"mtime":1651306008959,"results":"315","hashOfConfig":"200"},{"size":7525,"mtime":1655804373492,"results":"316","hashOfConfig":"200"},{"size":3263,"mtime":1651313940436,"results":"317","hashOfConfig":"200"},{"size":2698,"mtime":1652962640345,"results":"318","hashOfConfig":"200"},{"size":4473,"mtime":1651306008952,"results":"319","hashOfConfig":"200"},{"size":6245,"mtime":1651306337137,"results":"320","hashOfConfig":"200"},{"size":3178,"mtime":1651306337137,"results":"321","hashOfConfig":"200"},{"size":7012,"mtime":1651306337144,"results":"322","hashOfConfig":"200"},{"size":3177,"mtime":1651306337143,"results":"323","hashOfConfig":"200"},{"size":3684,"mtime":1651306337134,"results":"324","hashOfConfig":"200"},{"size":8930,"mtime":1654521964929,"results":"325","hashOfConfig":"200"},{"size":2894,"mtime":1651306337097,"results":"326","hashOfConfig":"200"},{"size":1634,"mtime":1651306337096,"results":"327","hashOfConfig":"200"},{"size":5970,"mtime":1651306337094,"results":"328","hashOfConfig":"200"},{"size":2407,"mtime":1651306008968,"results":"329","hashOfConfig":"200"},{"size":529,"mtime":1651306008989,"results":"330","hashOfConfig":"200"},{"size":2557,"mtime":1651306008950,"results":"331","hashOfConfig":"200"},{"size":748,"mtime":1651306008943,"results":"332","hashOfConfig":"200"},{"size":1241,"mtime":1651306008966,"results":"333","hashOfConfig":"200"},{"size":918,"mtime":1651306008961,"results":"334","hashOfConfig":"200"},{"size":1182,"mtime":1651306008961,"results":"335","hashOfConfig":"200"},{"size":1191,"mtime":1651306008963,"results":"336","hashOfConfig":"200"},{"size":897,"mtime":1651306337046,"results":"337","hashOfConfig":"200"},{"size":2252,"mtime":1651313909526,"results":"338","hashOfConfig":"200"},{"size":7207,"mtime":1654521964859,"results":"339","hashOfConfig":"200"},{"size":405,"mtime":1651306008949,"results":"340","hashOfConfig":"200"},{"size":946,"mtime":1651306008966,"results":"341","hashOfConfig":"200"},{"size":918,"mtime":1651306008962,"results":"342","hashOfConfig":"200"},{"size":904,"mtime":1651306008964,"results":"343","hashOfConfig":"200"},{"size":703,"mtime":1651306337152,"results":"344","hashOfConfig":"200"},{"size":13653,"mtime":1651760448829,"results":"345","hashOfConfig":"200"},{"size":7861,"mtime":1651306008956,"results":"346","hashOfConfig":"200"},{"size":9901,"mtime":1658740499042,"results":"347","hashOfConfig":"200"},{"size":3239,"mtime":1657293962208,"results":"348","hashOfConfig":"200"},{"size":4825,"mtime":1658292110225,"results":"349","hashOfConfig":"200"},{"size":4299,"mtime":1657294169567,"results":"350","hashOfConfig":"200"},{"size":38660,"mtime":1658938565917,"results":"351","hashOfConfig":"200"},{"size":3663,"mtime":1653183043775,"results":"352","hashOfConfig":"200"},{"size":722,"mtime":1653183043773,"results":"353","hashOfConfig":"200"},{"size":5922,"mtime":1653183043787,"results":"354","hashOfConfig":"200"},{"size":5954,"mtime":1653183043794,"results":"355","hashOfConfig":"200"},{"size":454,"mtime":1653183043797,"results":"356","hashOfConfig":"200"},{"size":2692,"mtime":1656620791145,"results":"357","hashOfConfig":"200"},{"size":2763,"mtime":1653183043788,"results":"358","hashOfConfig":"200"},{"size":20263,"mtime":1656620791148,"results":"359","hashOfConfig":"200"},{"size":12125,"mtime":1653183043789,"results":"360","hashOfConfig":"200"},{"size":1331,"mtime":1654771531851,"results":"361","hashOfConfig":"200"},{"size":2166,"mtime":1653371981217,"results":"362","hashOfConfig":"200"},{"size":2197,"mtime":1654539388685,"results":"363","hashOfConfig":"200"},{"size":10904,"mtime":1654521964828,"results":"364","hashOfConfig":"200"},{"size":7994,"mtime":1654521964914,"results":"365","hashOfConfig":"200"},{"size":531,"mtime":1654521964976,"results":"366","hashOfConfig":"200"},{"size":4150,"mtime":1658243449117,"results":"367","hashOfConfig":"200"},{"size":1863,"mtime":1657293484649,"results":"368","hashOfConfig":"200"},{"size":5509,"mtime":1659010164635,"results":"369","hashOfConfig":"200"},{"size":1039,"mtime":1658957600168,"results":"370","hashOfConfig":"200"},{"size":4540,"mtime":1658419862644,"results":"371","hashOfConfig":"200"},{"size":1348,"mtime":1658953512254,"results":"372","hashOfConfig":"200"},{"size":1536,"mtime":1658957404222,"results":"373","hashOfConfig":"200"},{"size":2084,"mtime":1658954971254,"results":"374","hashOfConfig":"200"},{"size":2118,"mtime":1659010156168,"results":"375","hashOfConfig":"200"},{"size":4751,"mtime":1658243366717,"results":"376","hashOfConfig":"200"},{"size":12447,"mtime":1658737318105,"results":"377","hashOfConfig":"200"},{"size":62,"mtime":1658396426784,"results":"378","hashOfConfig":"200"},{"size":221,"mtime":1658396586043,"results":"379","hashOfConfig":"200"},{"size":458,"mtime":1651306008950,"results":"380","hashOfConfig":"381"},{"size":440,"mtime":1651306008985,"results":"382","hashOfConfig":"381"},{"size":990,"mtime":1659192967673,"results":"383","hashOfConfig":"381"},{"size":1370,"mtime":1659183914003,"results":"384","hashOfConfig":"381"},{"size":1592,"mtime":1659184257984,"results":"385","hashOfConfig":"381"},{"size":360,"mtime":1659192559953,"results":"386","hashOfConfig":"381"},{"size":137,"mtime":1659192922265,"results":"387","hashOfConfig":"381"},{"size":1274,"mtime":1659188800899,"results":"388","hashOfConfig":"381"},{"size":871,"mtime":1659180412647,"results":"389","hashOfConfig":"381"},{"size":543,"mtime":1659180308503,"results":"390","hashOfConfig":"381"},{"size":677,"mtime":1651751423662,"results":"391","hashOfConfig":"381"},{"size":386,"mtime":1659184020989,"results":"392","hashOfConfig":"381"},{"size":66,"mtime":1659042981156,"results":"393","hashOfConfig":"381"},{"size":3342,"mtime":1659184194339,"results":"394","hashOfConfig":"381"},{"size":194,"mtime":1659192603016,"results":"395","hashOfConfig":"381"},{"size":897,"mtime":1651306337046,"results":"396","hashOfConfig":"381"},{"size":220,"mtime":1659183993023,"results":"397","hashOfConfig":"381"},{"size":2020,"mtime":1651306008945,"results":"398","hashOfConfig":"381"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},"18wp59v",{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"401"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"401"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"401"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"401"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"401"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"401"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"428"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"401"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"401"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"401"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"401"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"401"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"401"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"428"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"401"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"401"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"401"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"401"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"401"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"401"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"401"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"401"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"401"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"401"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"401"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"401"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"401"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"401"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497","usedDeprecatedRules":"401"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500","usedDeprecatedRules":"401"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"401"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"401"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"401"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"401"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"401"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"401"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"401"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"401"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527","usedDeprecatedRules":"401"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"530","usedDeprecatedRules":"401"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"401"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"401"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539","usedDeprecatedRules":"401"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"401"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"401"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548","usedDeprecatedRules":"401"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"401"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"401"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"401"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"401"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"401"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"401"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"401"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"401"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"428"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"428"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"401"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"582","usedDeprecatedRules":"401"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"401"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"401"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"401"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"401"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597","usedDeprecatedRules":"598"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601","usedDeprecatedRules":"401"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604","usedDeprecatedRules":"401"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"401"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"401"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613","usedDeprecatedRules":"401"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"598"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"401"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"401"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"401"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"628","messages":"629","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"401"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"401"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"401"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"401"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"401"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"645","usedDeprecatedRules":"401"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"648","usedDeprecatedRules":"401"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"401"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656","usedDeprecatedRules":"401"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"659","usedDeprecatedRules":"401"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"401"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"401"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"668","usedDeprecatedRules":"401"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"401"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674","usedDeprecatedRules":"401"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"401"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"401"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"401"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"401"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"689","usedDeprecatedRules":"401"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"401"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"695","usedDeprecatedRules":"401"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"700","usedDeprecatedRules":"401"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703","usedDeprecatedRules":"401"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706","usedDeprecatedRules":"401"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709","usedDeprecatedRules":"401"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712","usedDeprecatedRules":"401"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"715","usedDeprecatedRules":"401"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"718","messages":"719","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"720","usedDeprecatedRules":"401"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"723","usedDeprecatedRules":"401"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726","usedDeprecatedRules":"401"},{"filePath":"727","messages":"728","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"729","usedDeprecatedRules":"401"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"732","usedDeprecatedRules":"401"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"735","usedDeprecatedRules":"401"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"738","usedDeprecatedRules":"401"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741","usedDeprecatedRules":"401"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"744","usedDeprecatedRules":"401"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"747","usedDeprecatedRules":"401"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"750","usedDeprecatedRules":"401"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753","usedDeprecatedRules":"401"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"756","usedDeprecatedRules":"401"},{"filePath":"757","messages":"758","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"759","usedDeprecatedRules":"401"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"762","usedDeprecatedRules":"401"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"765","usedDeprecatedRules":"401"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"768","usedDeprecatedRules":"401"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"771","usedDeprecatedRules":"401"},{"filePath":"772","messages":"773","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"774","usedDeprecatedRules":"401"},{"filePath":"775","messages":"776","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"777","usedDeprecatedRules":"401"},{"filePath":"778","messages":"779","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"780","usedDeprecatedRules":"401"},{"filePath":"781","messages":"782","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"783","usedDeprecatedRules":"401"},{"filePath":"784","messages":"785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"790","usedDeprecatedRules":"401"},{"filePath":"791","messages":"792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},{"filePath":"793","messages":"794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"797","usedDeprecatedRules":"401"},{"filePath":"798","messages":"799","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"800","usedDeprecatedRules":"401"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"803","usedDeprecatedRules":"401"},{"filePath":"804","messages":"805","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806","usedDeprecatedRules":"401"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"809","usedDeprecatedRules":"401"},{"filePath":"810","messages":"811","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"812","usedDeprecatedRules":"401"},{"filePath":"813","messages":"814","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"815","usedDeprecatedRules":"401"},{"filePath":"816","messages":"817","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"818","usedDeprecatedRules":"428"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"821","usedDeprecatedRules":"401"},{"filePath":"822","messages":"823","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"824","messages":"825","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"826","usedDeprecatedRules":"401"},{"filePath":"827","messages":"828","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"829","usedDeprecatedRules":"401"},{"filePath":"830","messages":"831","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"832","usedDeprecatedRules":"401"},{"filePath":"833","messages":"834","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"835","usedDeprecatedRules":"401"},{"filePath":"836","messages":"837","errorCount":0,"warningCount":53,"fixableErrorCount":0,"fixableWarningCount":0,"source":"838","usedDeprecatedRules":"401"},{"filePath":"839","messages":"840","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"841","usedDeprecatedRules":"401"},{"filePath":"842","messages":"843","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"844","usedDeprecatedRules":"401"},{"filePath":"845","messages":"846","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"847","usedDeprecatedRules":"401"},{"filePath":"848","messages":"849","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"850","usedDeprecatedRules":"401"},{"filePath":"851","messages":"852","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"853","usedDeprecatedRules":"401"},{"filePath":"854","messages":"855","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"856","usedDeprecatedRules":"401"},{"filePath":"857","messages":"858","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"859","usedDeprecatedRules":"401"},{"filePath":"860","messages":"861","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"862","usedDeprecatedRules":"401"},{"filePath":"863","messages":"864","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"865","usedDeprecatedRules":"401"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"868","usedDeprecatedRules":"401"},{"filePath":"869","messages":"870","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"871","usedDeprecatedRules":"401"},{"filePath":"872","messages":"873","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"874","usedDeprecatedRules":"875"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"878","usedDeprecatedRules":"401"},{"filePath":"879","messages":"880","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"881","usedDeprecatedRules":"401"},{"filePath":"882","messages":"883","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"884","usedDeprecatedRules":"401"},{"filePath":"885","messages":"886","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"887","usedDeprecatedRules":"401"},{"filePath":"888","messages":"889","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"890","usedDeprecatedRules":"401"},{"filePath":"891","messages":"892","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"893","messages":"894","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"895","messages":"896","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"897","usedDeprecatedRules":"401"},{"filePath":"898","messages":"899","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"900","messages":"901","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"902","messages":"903","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"904","messages":"905","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"906","messages":"907","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"908","usedDeprecatedRules":"401"},{"filePath":"909","messages":"910","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"911","usedDeprecatedRules":"401"},{"filePath":"912","messages":"913","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"914","usedDeprecatedRules":"401"},{"filePath":"915","messages":"916","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"917","usedDeprecatedRules":"401"},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"920"},"3iy6x2",{"filePath":"921","messages":"922","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"920"},{"filePath":"923","messages":"924","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"925","messages":"926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"927","messages":"928","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"929","messages":"930","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"931","messages":"932","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"933","messages":"934","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"935","messages":"936","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"920"},{"filePath":"937","messages":"938","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"939"},{"filePath":"940","messages":"941","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"920"},{"filePath":"942","messages":"943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"939"},{"filePath":"946","messages":"947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"948","messages":"949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"950","messages":"951","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"797","usedDeprecatedRules":"952"},{"filePath":"953","messages":"954","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"955","messages":"956","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"952"},"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\index.tsx",[],["957","958"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\reportWebVitals.ts",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\App.tsx",["959","960","961"],"import React,{useState,useEffect} from 'react';\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\nimport './assets/App.css';\r\nimport \"@mui/styles\";\r\nimport { ThemeProvider,createTheme,Theme  } from '@mui/material/styles';\r\n\r\n\r\nimport AdapterMoment from '@mui/lab/AdapterMoment';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\n\r\nimport Footer from './common/Footer';\r\nimport Header from './common/Header';\r\n\r\nimport SnakAlert from './components/SnakAlert';\r\nimport ConfirmationDialog from './components/ConfirmationDialog';\r\nimport AppInitializer from './AppInitializer';\r\n\r\nimport Routes from './routes/index';\r\nimport WithClearCache from './WithClearCache';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport store from './store';\r\n\r\n\r\nlet theme = createTheme({\r\n  spacing: 4,  \r\n  \r\n});\r\n\r\nfunction App() {  \r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <LocalizationProvider dateAdapter={AdapterMoment}>\r\n        <ThemeProvider theme={theme}>\r\n        <WithClearCache/>\r\n        <Provider store={store}>\r\n          <AppInitializer>\r\n            <Router>\r\n              <Header/>\r\n              <Routes/>\r\n              <Footer/>\r\n            </Router>\r\n          </AppInitializer>   \r\n        </Provider> \r\n        <SnakAlert/>\r\n        <ConfirmationDialog/>\r\n        </ThemeProvider>\r\n      </LocalizationProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\AppInitializer.tsx",["962","963","964","965"],"import React,{useState,useEffect} from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {login,logout} from './store/actions';\r\nimport { Icon, LinearProgress } from '@mui/material';\r\n\r\nimport logo from './assets/images/logo.jpg';\r\nimport auth from './services/auth';\r\n\r\n\r\nconst AppInitializer = (props:any)=>{\r\n    const dispatch = useDispatch();\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const isInitialized = useSelector((state:any)=>state.init);\r\n    const theme = useSelector((state:any)=>state.theme);\r\n\r\n    const verifyToken = async()=>{\r\n        \r\n        let authSession:any = localStorage.getItem('auth');\r\n        let user = {};\r\n        if(authSession){\r\n            authSession = JSON.parse(authSession);\r\n            user = {token:authSession.token,UserID:authSession.UserID};\r\n        }\r\n        let res:any = await auth.verifyToken(user);\r\n        if(res.success && res.data){\r\n            // dispath login\r\n            dispatch(login(res.data));\r\n        }else{\r\n            dispatch(logout());\r\n        }\r\n    }\r\n\r\n    document.body.classList.add(`theme-${theme?theme:'bp'}`)\r\n\r\n    useEffect(()=>{\r\n        if(!isLogin){\r\n            verifyToken();   \r\n            document.body.classList.add(`bg-gradient`);\r\n        }else{\r\n            document.body.classList.remove('bg-gradient');\r\n        }\r\n    },[isLogin])\r\n\r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n            {isInitialized?props.children:<SiteLoader/>}\r\n        </>\r\n    )\r\n}\r\n\r\nconst SiteLoader = ()=>{\r\n    return (\r\n        <div className=\"site-loader\">\r\n            <div className=\"wrapper bg-gradient round-container\">\r\n                <img src={logo}/>\r\n                <LinearProgress/> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppInitializer;\r\n\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\WithClearCache.tsx",["966"],"import React, { useState, useEffect } from \"react\";\r\nimport packageJson from \"../package.json\";\r\nimport moment from \"moment\";\r\n\r\nconst buildDateGreaterThan = (latestDate:any, currentDate:any) => {\r\n  const momLatestDateTime = moment(latestDate);\r\n  const momCurrentDateTime = moment(currentDate);\r\n\r\n  if (momLatestDateTime.isAfter(momCurrentDateTime)) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst WithClearCache =()=> {\r\n  const [isLatestBuildDate, setIsLatestBuildDate] = useState(false);\r\n  const [buldVersion, setbuldVersion] = useState(false);\r\n\r\n  const refreshCacheAndReload = () => {\r\n    \r\n    if (caches) {\r\n      \r\n      // Service worker cache should be cleared with caches.delete()\r\n      caches.keys().then((names) => {\r\n        for (const name of names) {\r\n          caches.delete(name);\r\n          \r\n        }\r\n      });\r\n    }\r\n    // delete browser cache and hard reload\r\n    window.location.reload();\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"/meta.json\")\r\n      .then((response) => response.json())\r\n      .then((meta) => {\r\n        const latestVersionDate = meta.buildDate;\r\n        const currentVersionDate = packageJson.buildDate;\r\n\r\n        const shouldForceRefresh = buildDateGreaterThan(\r\n          latestVersionDate,\r\n          currentVersionDate\r\n        );\r\n        console.log(meta.buildVersion)\r\n        setbuldVersion(meta.buildVersion);\r\n        if (shouldForceRefresh) {\r\n          setIsLatestBuildDate(false);\r\n          refreshCacheAndReload();\r\n        } else {\r\n          setIsLatestBuildDate(true);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <><span className=\"build-version\">v{buldVersion}</span></>\r\n  );\r\n}\r\n\r\nexport default WithClearCache;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\common\\Footer.tsx",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\ConfirmationDialog.tsx",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\common\\Header.tsx",["967"],"import React from \"react\";\r\nimport { styled, useTheme, Theme, CSSObject } from '@mui/material/styles';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport {Box,Toolbar,List,Typography,Divider,IconButton,Drawer as MuiDrawer} from '@mui/material';\r\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';\r\n\r\nimport {ChevronLeft as ChevronLeftIcon,ChevronRight as ChevronRightIcon, Menu as MenuIcon} from \"@mui/icons-material\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport AppSwitcher from \"../components/AppSwitcher\";\r\nimport ProfileMenu from \"../components/ProfileMenu\";\r\nimport AppSideMenu from \"../components/AppSideMenu\";\r\nimport { USER_TYPE } from \"../const\";\r\n\r\n\r\nconst drawerWidth = 180;\r\n\r\nconst openedMixin = (theme: Theme): CSSObject => ({\r\n  width: drawerWidth,\r\n  transition: theme.transitions.create('width', {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.enteringScreen,\r\n  }),\r\n  overflowX: 'hidden',\r\n});\r\n\r\nconst closedMixin = (theme: Theme): CSSObject => ({\r\n  transition: theme.transitions.create('width', {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  overflowX: 'hidden',\r\n  width: `calc(${theme.spacing(7)} + 1px)`,\r\n  [theme.breakpoints.up('sm')]: {\r\n    width: `calc(${theme.spacing(9)} + 1px)`,\r\n  },\r\n});\r\n\r\nconst DrawerHeader = styled('div')(({ theme }) => ({\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'flex-end',\r\n  padding: theme.spacing(0, 1),\r\n  // necessary for content to be below app bar\r\n  ...theme.mixins.toolbar,\r\n\r\n}));\r\n\r\ninterface AppBarProps extends MuiAppBarProps {\r\n  open?: boolean;\r\n}\r\n\r\nconst AppBar = styled(MuiAppBar, {\r\n  shouldForwardProp: (prop) => prop !== 'open',\r\n})<AppBarProps>(({ theme, open }) => ({\r\n  \r\n  zIndex: theme.zIndex.drawer + 1,\r\n  transition: theme.transitions.create(['width', 'margin'], {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  ...(open && {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  }),\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n  ({ theme, open }) => ({\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    \r\n    whiteSpace: 'nowrap',\r\n    boxSizing: 'border-box',\r\n    ...(open && {\r\n      ...openedMixin(theme),\r\n      '& .MuiDrawer-paper': openedMixin(theme),\r\n    }),\r\n    ...(!open && {\r\n      ...closedMixin(theme),\r\n      '& .MuiDrawer-paper': closedMixin(theme),\r\n    }),  \r\n  }),\r\n);\r\n\r\nexport default function MiniDrawer() {\r\n  const theme = useTheme();\r\n  let dispatch = useDispatch();\r\n  \r\n  const isLogin = useSelector((state: any) => state.isLogin);\r\n  const UserType = useSelector((state:any)=> state.user?state.user.type:null);\r\n  const org = useSelector((state:any)=> state.user?state.user.org:null);\r\n  const currentApp = useSelector((state:any)=>state.currentApp.name);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLogin?\r\n      <>\r\n      <Box sx={{ display: 'flex' }}>\r\n        <CssBaseline />\r\n        <AppBar position=\"fixed\" open={open}>\r\n          <Toolbar>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={handleDrawerOpen}\r\n              edge=\"start\"\r\n              sx={{\r\n                ...(open && { display: 'none' }),\r\n              }}\r\n            >\r\n              <MenuIcon/>\r\n            </IconButton>\r\n\r\n            <Typography variant=\"h6\">\r\n              <div className=\"logo\">{currentApp}</div> \r\n              {UserType === USER_TYPE.CUSTOMER && <div className=\"org-name\"> | &nbsp; &nbsp; {org}</div> }\r\n            </Typography>\r\n\r\n            <AppSwitcher/>\r\n            <ProfileMenu/>\r\n            \r\n          </Toolbar> \r\n        </AppBar>\r\n\r\n        <Drawer variant=\"permanent\" open={open}>\r\n          <DrawerHeader sx={{minHeight:'20px!important'}}>\r\n            <IconButton onClick={handleDrawerClose} color=\"primary\">\r\n              {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n            </IconButton>\r\n          </DrawerHeader>\r\n          <Divider />\r\n          <List>\r\n              <AppSideMenu onClick={handleDrawerClose}/>\r\n          </List>\r\n          <Divider />\r\n      </Drawer>\r\n      </Box>\r\n      </>\r\n      :''} \r\n    </>\r\n  );\r\n}\r\n ","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\SnakAlert.tsx",["968"],"import React,{useState,useEffect,memo} from 'react';\r\nimport {Alert} from '@mui/material/';\r\nimport Snackbar from '@mui/material/Snackbar';\r\n\r\nenum snakAlertType{\r\n    success='success',\r\n    error='error',\r\n    warning='warning',\r\n    info='info'\r\n}\r\n \r\ndeclare global {\r\n    interface Window {\r\n        snakAlert:any\r\n    }\r\n}\r\n\r\nwindow.snakAlert = {\r\n    success:Function,\r\n    warning:Function,\r\n    error:Function,\r\n    info:Function,\r\n    show:Function\r\n}\r\n\r\nconst SnakAlert:React.FC = ()=>{\r\n    \r\n    const [state,setState]:any = useState({type:snakAlertType.success,open:false,message:''});\r\n    \r\n    const handleClose = (e:any,reason:any)=>{\r\n        if(reason !== 'clickaway')\r\n            setState({...state,open:false});\r\n    }\r\n\r\n    window.snakAlert.success = (message:string)=>{\r\n        setState({...state,open:true,message:message,type:snakAlertType.success})\r\n    }\r\n    window.snakAlert.warning = (message:string)=>{\r\n        setState({...state,open:true,message:message,type:snakAlertType.warning})\r\n    }\r\n    window.snakAlert.error = (message:string)=>{\r\n        setState({...state,open:true,message:message,type:snakAlertType.error})\r\n    }\r\n    window.snakAlert.info = (message:string)=>{\r\n        setState({...state,open:true,message:message,type:snakAlertType.info})\r\n    }\r\n    window.snakAlert.show = (res:any)=>{\r\n        if(res.success){\r\n            window.snakAlert.success(res.message);\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <Snackbar className=\"snak-alert\"\r\n            open={state.open} \r\n            autoHideDuration={5000} \r\n            onClose={handleClose} \r\n            anchorOrigin={{ vertical:'top', horizontal:'center' }}\r\n            style={{top:'80px'}}\r\n            >\r\n            <Alert onClose={()=>{handleClose(null,null)}} severity={state.type}>\r\n                {state.message}\r\n            </Alert>\r\n        </Snackbar>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default memo(SnakAlert);","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\routes\\index.tsx",["969","970"],"import React,{lazy,Suspense } from 'react';\r\nimport {Switch,Route, Redirect} from \"react-router-dom\";\r\nimport { LinearProgress } from '@mui/material';\r\n\r\nimport {useSelector} from 'react-redux';\r\n\r\n\r\nimport routing from './routing';\r\n\r\nconst CustomRoute = (props:any)=>{\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const user = useSelector((state:any)=>state.user);\r\n    \r\n    if( isLogin && props.controller)\r\n        return <Route {...props}></Route>;\r\n    else \r\n        return <Redirect to=\"/login\"/>;\r\n}\r\n\r\nconst Routers = ()=>{\r\n    \r\n    const routeComponents = routing.map((r:any, key:number) =>{\r\n        if(r.controller)\r\n            return <CustomRoute path={r.path} exact component={r.component} controller={r.controller} key={key} />\r\n        else\r\n            return <Route path={r.path} exact component={r.component} key={key} />\r\n    });\r\n    \r\n    return(\r\n        <Suspense fallback={<Fallback/>}>\r\n            \r\n            <div className=\"container\">\r\n                <Switch>\r\n                    {routeComponents}\r\n                </Switch>\r\n            </div>\r\n        </Suspense>\r\n    )\r\n}\r\n\r\nconst Fallback = ()=>{\r\n    return (\r\n        <>\r\n            <div style={{paddingTop:'38px'}}></div>\r\n            <LinearProgress/>  \r\n        </> \r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Routers;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\store\\actions.js",[],["971","972"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\store\\index.ts",["973"],"// Store\r\nimport { createStore } from \"redux\";\r\nimport { SWITCH_APP } from \"./actionTypes\";\r\n\r\n// initial store\r\ntype user = {\r\n    token:string|null,\r\n    id:string|null,\r\n    email:string|null,\r\n    role:string|null,\r\n    name:string|null,\r\n    settings:any|null,\r\n}\r\n\r\ntype currentApp ={\r\n    id:number,\r\n    name:string\r\n}\r\n\r\ntype initState = {\r\n    currentApp:currentApp,\r\n    init:boolean, // first time loading \r\n    isLogin:boolean,\r\n    user:user|null,\r\n    theme:any|null\r\n}\r\n\r\nconst initialState:initState = {\r\n    currentApp:{id:0,name:''},\r\n    init:false,\r\n    isLogin:false,\r\n    user:{token:null,id:null,email:null,role:null,name:null,settings:null},\r\n    theme:''\r\n}\r\n\r\nconst reducer = (state:initState = initialState, action:any) =>{\r\n    let payload = action.payload;\r\n    return {...state,...payload};\r\n\r\n    switch(action.type){\r\n        case SWITCH_APP:{\r\n            return {\r\n                ...state\r\n            }\r\n        }\r\n        default:\r\n            return {...state,...payload};\r\n    }\r\n}\r\n\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION__;\r\n    }\r\n}\r\n// create store from reducer\r\nexport default createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\const.ts",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\auth.ts",["974"],"import client from './client';\r\n\r\nconst login = async(params)=>{    \r\n    let res:any = await client.post('/auth/',params);\r\n    return res;\r\n}\r\nconst signup = async(params)=>{    \r\n    let res:any = await client.post('/signup/',params);\r\n    return res;\r\n}\r\n\r\nconst verifyToken = async(params)=>{\r\n    let res:any = await client.put('/auth/verifyToken',params);\r\n    return res;\r\n}\r\n\r\nconst logout = async()=>{\r\n    let res:any = await client.put('/auth/logout',{});\r\n    return res;\r\n}\r\nconst MFALogin = async(params)=>{\r\n    let res:any = await client.post('/auth/MFALogin',params);\r\n    return res;\r\n}\r\n\r\n\r\nexport default {\r\n    login,verifyToken,logout, MFALogin,signup\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\AppSideMenu.tsx",["975","976","977","978","979","980"],"import { Divider, Icon, List, ListItem, ListItemIcon, ListItemText, Tooltip } from \"@mui/material\";\r\nimport React,{useState,useEffect} from \"react\";\r\nimport { useHistory, withRouter, Link as RLink } from \"react-router-dom\";\r\n\r\nimport { useDispatch,useSelector } from \"react-redux\";\r\n\r\nconst AppSideMenu:React.FC<any> = (props:any)=>{\r\n    \r\n    const role = useSelector((state:any)=>state.user.role);\r\n\r\n    const menuList = useSelector((state:any)=>state.user?state.user.settings.menu:null);\r\n    const currentAppId = useSelector((state:any)=>state.currentApp.id);\r\n    \r\n    const [MenuList,setMenuList]:any = useState();\r\n    \r\n    useEffect(()=>{\r\n        let appMenu = menuList.filter((item:any)=> item.app_id == currentAppId);\r\n        setMenuList(appMenu);\r\n    },[currentAppId]);\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                <Tooltip title=\"home\" placement=\"right-start\" componentsProps={{tooltip: {sx: {bgcolor: '#11417f',},},}}>\r\n                    <ListItem button component={RLink} to={'/'} onClick={props.onClick} >\r\n                        <ListItemIcon>\r\n                            <Icon color=\"primary\">home</Icon>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={'Home'} />\r\n                    </ListItem>\r\n                </Tooltip>\r\n                {MenuList && MenuList.map((m:any,key:number)=>(\r\n                    <Tooltip title={m.name}  key={key} placement=\"right-start\" componentsProps={{tooltip: {sx: {bgcolor: '#11417f',},},}} >\r\n                        <ListItem button component={RLink} to={m.path} onClick={props.onClick} >\r\n                            <ListItemIcon>\r\n                                <Icon color=\"primary\">{m.icon}</Icon>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={m.name} />\r\n                        </ListItem>\r\n                    </Tooltip>\r\n                ))}\r\n                {role == 'Admin' && \r\n                    <Tooltip title=\"Admin\" placement=\"right-start\" componentsProps={{tooltip: {sx: {bgcolor: '#11417f',},},}}>\r\n                        <ListItem button component={RLink} to={'/admin'} onClick={props.onClick} >\r\n                            <ListItemIcon>\r\n                                <Icon color=\"primary\">admin_panel_settings</Icon>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={'Admin'} />\r\n                        </ListItem>\r\n                    </Tooltip>\r\n                }\r\n          </List>\r\n          <Divider />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AppSideMenu;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\AppSwitcher.tsx",["981","982","983"],"import React,{useState,useEffect} from \"react\";\r\nimport {Button} from '@mui/material';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport DropdownMenu,{TypeItem} from \"../core/DropdownMenu\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport { useDispatch,useSelector } from \"react-redux\";\r\nimport {switchApp} from '../store/actions';\r\n\r\nconst AppSwitcher:React.FC = (props:any)=>{\r\n    \r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const appList = useSelector((state:any)=>state.user?state.user.settings.apps:null);\r\n    const currentApp = useSelector((state:any)=>state.currentApp.name);\r\n    const appMenus = useSelector((state:any)=>state.user?state.user.settings.menu:null);\r\n\r\n    const [MenuList,setMenuList] = useState<TypeItem[]|[]>();\r\n    \r\n    const [menuEl, setMenuEl] = React.useState<null | HTMLElement>(null);\r\n    const menuOpen = Boolean(menuEl);\r\n    const menuClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        setMenuEl(event.currentTarget);\r\n    };\r\n    const menuClose = () => {\r\n        setMenuEl(null);\r\n    };\r\n\r\n    const onItemClick = (item:any)=>{\r\n        let cApp:any = MenuList?.filter((itm)=>{\r\n            return itm.id == item.id;\r\n        });\r\n        if(cApp){\r\n            \r\n            dispatch(switchApp({id:cApp[0].id,name:cApp[0].title}));\r\n\r\n            // redirect to first available link\r\n            let currentAppMenu = appMenus.filter((menu:any)=>{\r\n                return menu.app_id == cApp[0].id;\r\n            });\r\n            if(currentAppMenu.length > 0){\r\n                history.push(currentAppMenu[0].path);\r\n            }else{\r\n                history.push('/');\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(appList){\r\n            let menuList:TypeItem[] = [];\r\n            appList.forEach((ap,index)=>{\r\n                menuList.push({\r\n                    id:ap.id,\r\n                    title:ap.name,\r\n                    icon:ap.icon,\r\n                    sep: (index<appList.length-1)?true:false\r\n                })\r\n            });\r\n            setMenuList(menuList);\r\n        }\r\n    },[appList])\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n              id=\"demo-customized-button\"\r\n              aria-controls=\"demo-customized-menu\"\r\n              aria-haspopup=\"true\"\r\n              aria-expanded={menuOpen ? 'true' : undefined}\r\n              variant=\"contained\"\r\n              disableElevation\r\n              onClick={menuClick}\r\n              endIcon={<KeyboardArrowDownIcon />}\r\n              size=\"small\"\r\n              style={{fontSize:\"12px\"}}\r\n            >\r\n              Applications \r\n            </Button>\r\n            {MenuList && MenuList.length?\r\n            <DropdownMenu \r\n                menuEl={menuEl} \r\n                menuOpen={menuOpen} \r\n                onClose={menuClose} \r\n                onClick={menuClose} \r\n                menuList={MenuList}\r\n                onItemClick={onItemClick}/>\r\n            :''}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AppSwitcher;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\ProfileMenu.tsx",["984","985","986","987"],"import React,{useState,useEffect} from \"react\";\r\nimport {Avatar, Button, IconButton, Tooltip} from '@mui/material';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport DropdownMenu,{TypeItem} from \"../core/DropdownMenu\";\r\n\r\nimport { useDispatch,useSelector } from \"react-redux\";\r\nimport {logout, switchApp} from '../store/actions';\r\nimport client from \"../services/client\";\r\nimport auth from \"../services/auth\";\r\n\r\n\r\nconst menuList:TypeItem[] = [\r\n    {title:'Profile',to:'',icon:'',avatar:true,sep:false},\r\n    {title:'My Account',to:'',icon:'',avatar:true,sep:true},\r\n    {title:'Settings',to:'',icon:'settings',avatar:false,sep:false},\r\n    {title:'Logout',to:'',icon:'logout',avatar:false,sep:false}\r\n];\r\n\r\nconst ProfileMenu:React.FC = (props:any)=>{\r\n    \r\n    const dispatch = useDispatch();\r\n    \r\n    const userName = useSelector((state:any)=>state.user.name);\r\n\r\n    const [MenuList,setMenuList] = useState<TypeItem[]|[]>();\r\n\r\n    const [menuEl, setMenuEl] = React.useState<null | HTMLElement>(null);\r\n    const menuOpen = Boolean(menuEl);\r\n    const menuClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        setMenuEl(event.currentTarget);\r\n    };\r\n    const menuClose = () => {\r\n        setMenuEl(null);\r\n    };\r\n\r\n    const onItemClick = async (item:any)=>{\r\n        if(item.title === 'Logout'){\r\n            let res:any = await auth.logout();\r\n            if(res && res.success){\r\n                dispatch(logout());\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setMenuList(menuList);\r\n    },[])\r\n\r\n    const getNameFirstCharacter =()=> userName[0].toUpperCase();\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title=\"Account settings\">\r\n                <IconButton onClick={menuClick} size=\"small\" sx={{ ml: 2 }}>\r\n                    <Avatar sx={{ width: 25, height: 25,fontSize:'13px',background:'#11417f',color:'#fff' }} >{getNameFirstCharacter()}</Avatar>\r\n                </IconButton>\r\n            </Tooltip>\r\n            <DropdownMenu \r\n                menuEl={menuEl} \r\n                menuOpen={menuOpen} \r\n                onClose={menuClose} \r\n                onClick={menuClose} \r\n                menuList={MenuList}\r\n                onItemClick={onItemClick}/>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProfileMenu;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\routes\\routing.tsx",["988","989","990","991"],"import React,{lazy,Suspense } from 'react';\r\n\r\nconst TestPage = lazy(()=> import('../pages/TestPage'));\r\n\r\nconst Login = lazy(()=> import('../pages/Login'));\r\nconst Signup = lazy(() => import(\"../pages/Signup\"));\r\nconst ResetPassword = lazy(()=> import('../pages/ResetPassword')); \r\nconst ChangePassword = lazy(()=> import('../pages/ChangePassword')); \r\n\r\nconst AdminDashboard = lazy(()=> import('../pages/admin/AdminDashboard')); \r\nconst AdminUsers = lazy(()=> import('../pages/admin/adminUsers'));\r\nconst AdminUserForm = lazy(()=> import('../pages/admin/adminUsers/form')); \r\n\r\nconst MFA = lazy(()=> import('../pages/MFA')); \r\n\r\nconst HomePage = lazy(()=> import('../pages/index')); \r\nconst AccountExplorer = lazy(()=> import('../pages/accountExplorer')); \r\nconst AIML = lazy(()=> import('../pages/AIML')); \r\n\r\nconst FeaturedDashboards = lazy(()=> import('../pages/featuredDashboards')); \r\nconst RepDashboard = lazy(()=> import('../pages/featuredDashboards/RepDashboard')); \r\nconst AccountUsecaseDashboard = lazy(()=> import('../pages/featuredDashboards/AccountDashboradUsecase')); \r\nconst AccountDeepdiveDashboard = lazy(()=> import('../pages/featuredDashboards/AccountDeepdiveDashboard')); \r\n\r\nconst AccountExplorer2 = lazy(()=> import('../pages/dashboard1/AccountExplorer')); \r\n\r\n//const BillingSimulator = lazy(()=> import('../pages/billing/samulator')); \r\nconst UsageMatrix = lazy(()=> import('../pages/billing/usage')); \r\n//const BillingUsageMonthlyComparison = lazy(()=> import('../pages/billing/usage/monthlyComparison')); \r\nconst BillingInvoices = lazy(()=> import('../pages/billing/invoices')); \r\n\r\nconst BillingPlanListing = lazy(()=> import('../pages/billing/configurator/planList'));\r\nconst BillingPlanCreator = lazy(()=> import('../pages/billing/configurator/planCreator')); \r\nconst StandardBillingPlan = lazy(()=> import('../pages/billing/configurator/standardPlan')); \r\nconst BillingReport = lazy(()=> import('../pages/billing/reports/BillingReport')); \r\nconst BillingReportStandard = lazy(()=> import('../pages/billing/reports/BillingReportStandard')); \r\nconst SplitBillingAccounts = lazy(()=> import('../pages/billing/splitbilling')); \r\nconst EDP = lazy(()=> import('../pages/billing/edp')); \r\n\r\n\r\nconst AccountTagForm = lazy(()=> import('../pages/admin/tags/form'));\r\nconst AccountTag = lazy(()=> import('../pages/admin/tags'));\r\nconst Logs = lazy(()=> import('../pages/admin/logs'));\r\n\r\n\r\nconst SupplierLogin = lazy(()=> import('../pages/supplierPortal/SupplierLogin'));\r\nconst OrderForm = lazy(()=> import('../pages/supplierPortal/orderForm/OrderForm')); \r\nconst GridListing = lazy(()=> import('../pages/supplierPortal/orderTracking'));\r\nconst OrderDetail = lazy(()=> import('../pages/supplierPortal/orderTracking/OrderDetail'));\r\nconst VendorGridListing = lazy(()=> import('../pages/supplierPortal/vendors'));\r\nconst VendorForm = lazy(()=> import('../pages/supplierPortal/vendors/form')); \r\nconst ProductGridListing = lazy(()=> import('../pages/supplierPortal/products'));\r\nconst ProductForm = lazy(()=> import('../pages/supplierPortal/products/form')); \r\nconst SupplierReports = lazy(()=> import('../pages/supplierPortal/reports')); \r\n\r\nconst ValueIQ = lazy(() => import(\"../pages/valueIQ\"));\r\n\r\nconst routing:any = [\r\n    {path:'/test', component:TestPage, exact:true, controller:'1'},\r\n    \r\n    {path:'/', component:HomePage, exact:true, controller:'1'},\r\n\r\n    {path:'/login/:p?', component:Login, exact:true},\r\n    {path:'/changePassword/:uuid?', component:ChangePassword, exact:true},\r\n    {path:'/resetPassword', component:ResetPassword, exact:true},\r\n    {path:'/MFA', component:MFA, exact:true, controller:'1'},\r\n    { path: \"/signup\", component: Signup, exact: true },\r\n\r\n    {path:'/admin', component:AdminDashboard, exact:true, controller:'1'},\r\n    {path:'/admin/users', component:AdminUsers, exact:true, controller:'1'},\r\n    {path:'/admin/user/id/:id?', component:AdminUserForm, exact:true, controller:'1'},\r\n    {path:'/tags', component:AccountTag, exact:true, controller:'1'},\r\n    {path:'/logs', component:Logs, exact:true, controller:'1'},\r\n\r\n    {path:'/tags/id/:id?', component:AccountTagForm, exact:true, controller:'1'},\r\n    \r\n    {path:'/account-explorer/', component:AccountExplorer, exact:true, controller:'1'},\r\n\r\n    {path:'/ai-ml/', component:AIML, exact:true, controller:'1'},\r\n\r\n    {path:'/account-explorer2', component:AccountExplorer2, exact:true, controller:'1'},\r\n\r\n    {path:'/featured-dashboards', component:FeaturedDashboards, exact:true, controller:'1'},\r\n    {path:'/featured-dashboards/rep', component:RepDashboard, exact:true, controller:'1'},\r\n    {path:'/featured-dashboards/useCase', component:AccountUsecaseDashboard, exact:true, controller:'1'},\r\n    {path:'/featured-dashboards/accountDeepdive', component:AccountDeepdiveDashboard, exact:true, controller:'1'},\r\n\r\n\r\n    //{path:'/billing/simulator', component:BillingSimulator, exact:true, controller:'1'},\r\n\r\n    {path:'/billing/usage', component:UsageMatrix, exact:true, controller:'1'},\r\n    //{path:'/billing/usage/monthly-comparison', component:BillingUsageMonthlyComparison, exact:true, controller:'1'},\r\n\r\n    {path:'/billing/invoices', component:BillingInvoices, exact:true, controller:'1'},    \r\n    {path:'/billing/configurator/plans', component:BillingPlanListing, exact:true, controller:'1'},\r\n    {path:'/billing/configurator/plan/:id', component:BillingPlanCreator, exact:true, controller:'1'},//edit\r\n    {path:'/billing/configurator/plan/create/:acid/:byModel/:bModel?', component:BillingPlanCreator, exact:true, controller:'1'},//create\r\n    {path:'/billing/configurator/standardPlan', component:StandardBillingPlan, exact:true, controller:'1'},//create\r\n    {path:'/billing/report/abu', component:BillingReport, exact:true, controller:'1'},// report\r\n    {path:'/billing/report/standard', component:BillingReportStandard, exact:true, controller:'1'},// report\r\n    {path:'/billing/split-billing', component:SplitBillingAccounts, exact:true, controller:'1'},\r\n    {path:'/billing/edp', component:EDP, exact:true, controller:'1'},\r\n    \r\n\r\n\r\n    {path:'/supplierportal/login', component:SupplierLogin, exact:true},\r\n    {path:'/supplierportal/orderform/id/:accountId/:contactId/:opportunityId', component:OrderForm, exact:true, controller:'1'},\r\n    {path:'/supplierportal/ordertracking', component:GridListing, exact:true, controller:'1'},\r\n    {path:'/supplierportal/ordertracking/orderdetails/:id?', component:OrderDetail, exact:true, controller:'1'},\r\n    {path:'/supplierportal/vendors', component:VendorGridListing, exact:true, controller:'1'},\r\n    {path:'/supplierportal/vendors/id/:id?', component:VendorForm, exact:true, controller:'1'},\r\n    // {path:'/supplierportal/products', component:ProductGridListing, exact:true, controller:'1'},\r\n    // {path:'/supplierportal/products/id/:id?', component:ProductForm, exact:true, controller:'1'},\r\n    {path:'/supplierportal/reports', component:SupplierReports, exact:true, controller:'1'},\r\n\r\n    { path: \"/valueIQ\", component:ValueIQ, exact: true, controller: \"1\" },\r\n]\r\n\r\n\r\n\r\nexport default routing;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\store\\actionTypes.js",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\client.ts",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\core\\DropdownMenu.tsx",["992"],"import React,{useState} from \"react\";\r\nimport {Link as RLink} from \"react-router-dom\";\r\nimport {Menu,MenuItem, ListItemIcon, Divider,Avatar,Icon} from '@mui/material';\r\n\r\nexport interface TypeItem{\r\n    id?:string,\r\n    title:string,\r\n    to?:string,\r\n    icon:string,\r\n    avatar?:boolean,\r\n    sep:boolean\r\n}\r\n\r\nconst DropdownMenu:React.FC<any> = (props:any)=>{\r\n    \r\n    return (\r\n        <>\r\n            <Menu\r\n                anchorEl={props.menuEl}\r\n                open={props.menuOpen}\r\n                onClose={props.onClose}\r\n                onClick={props.onClose}\r\n                PaperProps={{\r\n                  elevation: 0,\r\n                  sx: {\r\n                    overflow: 'visible',\r\n                    filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\r\n                    mt: 1.5,\r\n                    '& .MuiAvatar-root': {\r\n                      width: 32,\r\n                      height: 32,\r\n                      ml: -0.5,\r\n                      mr: 1,\r\n                    },\r\n                    '&:before': {\r\n                      content: '\"\"',\r\n                      display: 'block',\r\n                      position: 'absolute',\r\n                      top: 0,\r\n                      right: 14,\r\n                      width: 10,\r\n                      height: 10,\r\n                      bgcolor: 'background.paper',\r\n                      transform: 'translateY(-50%) rotate(45deg)',\r\n                      zIndex: 0,\r\n                    },\r\n                  },\r\n                }} \r\n                transformOrigin={{ horizontal: 'right', vertical: 'top' }}\r\n                anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n            >\r\n                {props.menuList && props.menuList.map((item:any,index:number)=>(\r\n                    <CItem key={index} item={item} onItemClick={()=>{props.onItemClick(item)}}/>\r\n                ))}\r\n        </Menu>\r\n        </>\r\n    );\r\n}\r\n\r\nconst CItem = (props:any)=>{\r\n    if(props.item.to){\r\n        return (\r\n            <>\r\n            <MenuItem component={RLink} to={props.item.to}>\r\n                <MenuContent item={props.item}/>\r\n            </MenuItem>\r\n            {props.item.sep?<Divider/>:''}\r\n            </>\r\n        )\r\n    }else{\r\n        return(\r\n            <>\r\n            <MenuItem onClick={props.onItemClick}>\r\n                <MenuContent item={props.item}/>\r\n            </MenuItem>\r\n            {props.item.sep?<Divider/>:''}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst MenuContent = ({item})=>{\r\n    return (\r\n        <>\r\n            {item.icon?<ListItemIcon><Icon>{item.icon}</Icon></ListItemIcon>:''}\r\n            {item.avatar?<Avatar />:''}\r\n            {item.title}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DropdownMenu;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\Login.tsx",["993","994","995","996","997","998","999"],"import { Button, Container, Grid, Icon, LinearProgress, TextField,Paper } from '@mui/material';\r\nimport React,{useState,useMemo,useEffect} from 'react';\r\nimport {Link as Rlink,useHistory,useParams} from 'react-router-dom';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport AlertMessage,{ALERT_TYPE} from '../components/AlertMessage';\r\nimport auth from '../services/auth';\r\n\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {login,appTheme} from '../store/actions';\r\n\r\nconst Login:React.FC = ()=>{\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const qParams = useParams();\r\n\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const Role = useSelector((state:any)=>state.user?state.user.role:'');\r\n    const [Message,setMessage] = useState('');\r\n    const [processing,setProcessing] = useState(false);\r\n    const [Email,setEmail] = useState('');\r\n    const [Password,setPassword] = useState('');\r\n    const [MFADialog,showMFADialog] = useState(false);\r\n    const [token, setToken] = useState('')\r\n\r\n    if(isLogin){\r\n        history.push('/');\r\n        /*if(Role == 'Admin'){\r\n            history.push('/admin/dashboard');\r\n        }else{\r\n            history.push('/mySubscription');\r\n        }*/\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    const handleTokenSubmit = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await auth.MFALogin({email:Email,pwd:Password, token:token});\r\n        if(res && res.success){\r\n            \r\n            dispatch(login(res.data));\r\n           \r\n        }else{\r\n            setMessage('Invalid Credentials/Token');\r\n        }\r\n        setProcessing(false);\r\n    }\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await auth.login({email:Email,pwd:Password});\r\n        if(res && res.success){\r\n            if (res.data.MFAEnabled){\r\n                showMFADialog(true)\r\n            }\r\n            else{dispatch(login(res.data));}\r\n           \r\n        }else{\r\n            setMessage(res.message);\r\n        }\r\n        setProcessing(false);\r\n    }\r\n    const handleSAML = ()=>{\r\n        window.location.href = \"http://localhost:3000/login\"\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(qParams.p){\r\n            dispatch(appTheme(qParams.p));\r\n        }\r\n    },[])\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            {!MFADialog ? \r\n\r\n            <Paper className=\"paper\">\r\n            <div className=\"logo-mini\"></div>\r\n                <AlertMessage type={ALERT_TYPE.ERROR} message={Message}/>\r\n\r\n                <ValidatorForm\r\n                    \r\n                    onSubmit={handleSubmit}\r\n                    onError={errors => console.log(errors)}\r\n                >\r\n                    <Grid container spacing={2}>\r\n                        <Grid item md={12}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Email Address\"\r\n                                name=\"Email\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ setEmail(e.target.value) }}\r\n                                validators={['required','isEmail']}\r\n                                errorMessages={['Ehis is required','Email is not valie']}\r\n                                value={Email}\r\n                                disabled={processing}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                name=\"Password\"\r\n                                onChange={(e:any)=>{ setPassword(e.target.value) }}\r\n                                validators={['required']}\r\n                                errorMessages={['Password is required']}\r\n                                value={Password}\r\n                                disabled={processing}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br/>\r\n                    <Button disabled={processing}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <LinearProgress style={{display: processing?'':'none' }} />\r\n                    <br/><br/>\r\n                </ValidatorForm>\r\n            \r\n            </Paper>\r\n            : \r\n            <Paper className=\"paper\">\r\n                <div className=\"logo-mini\"></div>\r\n                <AlertMessage type={ALERT_TYPE.ERROR} message={Message} />\r\n                <>\r\n                <h3 style={{marginTop:0}}>Enter MFA Code</h3>\r\n                <Grid container spacing={1}  mb={3}>\r\n                    <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Code\"\r\n                        value={token}\r\n                        onChange={(e: any) => { setToken(e.target.value); } } />\r\n                </Grid>\r\n                <Grid container direction=\"row\" justifyContent=\"flex-end\" mt={3}>\r\n                        <Button\r\n                            // sx={{ alignSelf: 'flex-end' }}\r\n                            onClick={handleTokenSubmit}\r\n                            variant=\"contained\"\r\n                            color=\"primary\">Submit</Button>\r\n                             <LinearProgress style={{display: processing?'':'none' }} />\r\n                    </Grid></>\r\n            </Paper>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Login;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\MFA.tsx",["1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Stack, Divider  } from '@mui/material';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Switch from '@mui/material/Switch';\r\nimport client from '../services/client';\r\nimport { useSelector } from 'react-redux';\r\nconst MFA = () => {\r\n    const MFAenabled = useSelector((state:any)=>state.user.mfa);\r\n    const [processing,setProcessing] = useState(false);\r\n    const [qrCode, setQrCode] = useState(false);\r\n    const [qrSrc, setQrSrc] = useState('');\r\n    const [token, setToken] = useState('')\r\n    const [secret, setSecret] = useState('')\r\n    const [checked, setChecked] = React.useState(MFAenabled == 1 ? true: false);\r\n\r\n    const handleChange = async(event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setChecked(event.target.checked);\r\n        if(event.target.checked){\r\n            setProcessing(true);\r\n            let res = await client.post('/MFA/googleAuthenticator/',{MFAenabled: event.target.checked});\r\n            if(res.success && res.data){\r\n                setQrSrc(res.data.uri)\r\n                setSecret(res.data.secret)\r\n                setQrCode(true)\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n            setProcessing(false);\r\n        }\r\n        else{\r\n            let res = await client.post('/MFA/googleAuthenticator/',{MFAenabled: event.target.checked});  \r\n            if(res.success && res.data){\r\n                window.snakAlert.success(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n            setQrCode(false)\r\n        }  \r\n    };\r\n\r\n    const handleSubmit = async() => {\r\n        let res = await client.post('/MFA/googleAuthenticatorVerify/',{token: token, secret:secret}); \r\n        setProcessing(true);\r\n        if(res.success && res.data){\r\n            window.snakAlert.success(res.data);\r\n            setQrCode(false)\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        setProcessing(false);\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"page-content\">\r\n            <h2>Multifactor Authentication </h2>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n            >\r\n                <Grid item md={4}>\r\n                    <Paper elevation={1} className=\"section mt-10\">\r\n                        <Grid spacing={1} container\r\n                        >\r\n                            <Grid item md={12}>\r\n                                <FormGroup>\r\n                                    <FormControlLabel control={<Switch\r\n                                    checked={checked}\r\n                                    onChange={handleChange}\r\n                                    inputProps={{ 'aria-label': 'controlled' }}\r\n                                    />} label={checked ? 'Disable MFA': 'Enable MFA'} />\r\n                                </FormGroup>\r\n                            </Grid>\r\n                            {\r\n                                qrCode &&\r\n                            <>\r\n                            <Grid item md={12} className='mb-10'>\r\n                                <Divider/>\r\n                            </Grid>\r\n                            <Grid item md={12} sm={12} xs={12}>\r\n                                <Stack direction=\"row\" justifyContent=\"center\">\r\n                                    <img style={{width:'340px'}} src={qrSrc} />\r\n                                </Stack>\r\n                            </Grid>\r\n                            <Grid item md={12} className='mb-10'>\r\n                                <Divider/>\r\n                            </Grid>\r\n                            <Grid item md={6} sm={12} xs={12}>\r\n                                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Token\"\r\n                                        value={token}\r\n                                        onChange={(e: any) => { setToken(e.target.value); } } />\r\n                            </Grid>\r\n                            <Grid item md={6} sm={12} xs={12}>\r\n                                <Button\r\n                                    onClick={handleSubmit}\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    fullWidth\r\n                                    color=\"primary\">Submit</Button>\r\n                            </Grid>\r\n                            </>\r\n                            }\r\n                        </Grid>\r\n                    </Paper>\r\n\r\n                </Grid>\r\n            </Grid>\r\n            \r\n            \r\n        </div>\r\n        </>\r\n    )\r\n} \r\n\r\nexport default MFA;  \r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\featuredDashboards\\RepDashboard.tsx",["1015","1016","1017","1018","1019","1020","1021","1022","1023","1024"],"import { FormControl, Grid, InputLabel, MenuItem, Paper, Select,Card ,CardContent,Button, Divider  } from \"@mui/material\";\r\nimport React,{useState,useMemo,useEffect} from \"react\";\r\nimport looker from \"../../services/looker\";\r\n\r\n//import 'react-block-ui/style.css';\r\n \r\nconst RepDashboard:React.FC = ()=>{\r\n\r\n  const [DashboardSrc,setDashboardSrc] = useState<string|null>(null);\r\n\r\n  const load = async()=>{\r\n    let url = await looker.repDashboard({});\r\n    if(url){\r\n      setDashboardSrc(url);\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    load();\r\n  },[])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"page-content\">\r\n          \r\n          \r\n          <h2>Rep Dashboard - v3.0<span>Sales Rep Dashboard integrated from looker</span></h2>\r\n          <Divider/><br/> \r\n          <Paper elevation={1} className=\"section mt-10\">\r\n            {DashboardSrc &&\r\n              <iframe src={DashboardSrc} width='100%' height='1000px' frameBorder='0'></iframe>\r\n            }\r\n          </Paper>\r\n         \r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RepDashboard;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\TestPage.tsx",["1025","1026"],"import { Grid,Table,TableRow, TableHead,TableBody, TableCell, Icon, Button, Paper, IconButton, TextField } from '@mui/material';\r\nimport React,{useState,useEffect} from 'react'\r\n\r\n\r\nconst TestPage = ()=>{\r\n    \r\n    const [ShowAddNewShippingInfo,setShowAddNewShippingInfo] = useState<boolean>(false);\r\n    const [ShippingInfoID,setShippingInfoID] = useState<number|null>(null); // for modifying record\r\n\r\n    const [Data,setData] = useState([\r\n        {\r\n            id: 0,\r\n            ApplianceInterfaces: 'ILO',\r\n            InterfaceIpAddress: '192.168.10.50',\r\n            SubnetMask: '/30',\r\n            DefaultGateway: '192.168.10.49',\r\n            MTUSize: '1500',\r\n            PrimaryDNSServer: 'Not Required',\r\n            SecondaryDNSServer: 'Not Required',\r\n            Note: 'Layer-2',\r\n            ShippingTitle: \"My new title\"\r\n        },\r\n        {\r\n            id: 0,\r\n            ApplianceInterfaces: 'ILO',\r\n            InterfaceIpAddress: '192.168.10.50',\r\n            SubnetMask: '/30',\r\n            DefaultGateway: '192.168.10.49',\r\n            MTUSize: '1500',\r\n            PrimaryDNSServer: 'Not Required',\r\n            SecondaryDNSServer: 'Not Required',\r\n            Note: 'Layer-2',\r\n            ShippingTitle: \"My new title\"\r\n        }\r\n    ])\r\n\r\n    const handlerAddNewShippingInfo = ()=> setShowAddNewShippingInfo(true);\r\n    const handlerCloseShippingInfo = ()=> setShowAddNewShippingInfo(false);\r\n\r\n    const handlerAddNewShippngInfo = async()=>{\r\n        // code for save new record\r\n\r\n        // hide add row\r\n        setShowAddNewShippingInfo(false)\r\n    }\r\n\r\n    const handlerMoodifyShipppingInfo = (id)=>{\r\n        setShippingInfoID(id);\r\n        \r\n    }\r\n\r\n    const handlerCloseEditableShippingInfo = ()=> setShippingInfoID(null);\r\n    const handlerUpdateShippngInfo = async()=>{\r\n\r\n        // update shipping code here\r\n\r\n        // disble editable mode\r\n        setShippingInfoID(null);\r\n    }\r\n\r\n    const handlerDeleteShippingInfo = async()=>{\r\n        if(await window.ConfirmationDialog(\"Shipping Info\",\"Delete?\")){\r\n            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"page-content\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={5} lg={6} xs={12}>\r\n                        <h2>Test Page<span>testing</span></h2>\r\n                    </Grid>\r\n                </Grid>\r\n                <h4>Shipping Information</h4>\r\n                <Paper elevation={1} className=\"section mt-22\">\r\n                    <Button variant=\"contained\" color=\"secondary\" size=\"small\" \r\n                        startIcon={<Icon>add</Icon>}\r\n                        onClick={handlerAddNewShippingInfo}\r\n                        >Add Record\r\n                    </Button>\r\n                    <Table size=\"small\" sx={{ minWidth: 650 }} className='mt-10 grid-table' >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell width=\"100px\" align=\"center\">Appliance Interfaces</TableCell>\r\n                                <TableCell width=\"120px\" align=\"center\">Interface Ip Address\t</TableCell>\r\n                                <TableCell width=\"80px\" align=\"center\">Subnet Mask\t</TableCell>\r\n                                <TableCell width=\"120px\" align=\"center\">Default Gateway\t</TableCell>\r\n                                <TableCell width=\"90px\" align=\"center\">MTU Size</TableCell>\r\n                                <TableCell width=\"120px\" align=\"center\">Primary DNS Server</TableCell>\r\n                                <TableCell width=\"120px\"  align=\"center\">Secondary DNS Server\t</TableCell>\r\n                                <TableCell align=\"center\">Note</TableCell>\r\n                                <TableCell align=\"center\">Shipping Title</TableCell>\r\n                                <TableCell width=\"100px\" ></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {Data && Data.map((row:any,index:number)=>(\r\n                                <>\r\n                                {ShippingInfoID!=null && ShippingInfoID==index?\r\n                                    <InlineTableRow \r\n                                        onClose={handlerCloseEditableShippingInfo} \r\n                                        onSave={handlerUpdateShippngInfo}\r\n                                        data={row}\r\n                                    />\r\n                                :\r\n                                    <TableRow key={row.id}>\r\n                                        <TableCell>\r\n                                            {row.ApplianceInterfaces}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"right\">{row.InterfaceIpAddress}</TableCell>\r\n                                        <TableCell align=\"right\">{row.SubnetMask}</TableCell>\r\n                                        <TableCell align=\"right\">{row.DefaultGateway}</TableCell>\r\n                                        <TableCell align=\"right\">{row.MTUSize}</TableCell>\r\n                                        <TableCell align=\"right\">{row.PrimaryDNSServer}</TableCell>\r\n                                        <TableCell align=\"right\">{row.SecondaryDNSServer}</TableCell>\r\n                                        <TableCell align=\"right\">{row.Note}</TableCell>\r\n                                            <TableCell align=\"right\">{row.ShippingTitle}</TableCell>\r\n                                        <TableCell align=\"right\">\r\n                                            <IconButton size=\"small\" className=\"action\" onClick={handlerDeleteShippingInfo}>\r\n                                                <Icon className=\"\">delete_outline</Icon>\r\n                                            </IconButton> &nbsp;\r\n                                            <IconButton size=\"small\" className=\"action\">\r\n                                                <Icon className=\"\" onClick={()=>{handlerMoodifyShipppingInfo(index)}}>edit</Icon>\r\n                                            </IconButton>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                }\r\n                                </>\r\n                            ))}\r\n                            {ShowAddNewShippingInfo && <InlineTableRow onClose={handlerCloseShippingInfo} onSave={handlerAddNewShippngInfo}/>}\r\n                        </TableBody>\r\n                    </Table>\r\n                </Paper>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst InlineTableRow = (props:any)=>{\r\n    const {data} = props;\r\n    const [ApplianceInterfaces,setApplianceInterfaces] = useState('');\r\n    const [InterfaceIpAddress,setInterfaceIpAddress] = useState('');\r\n    const [SubnetMask,setSubnetMask] = useState('');\r\n    const [DefaultGateway,setDefaultGateway] = useState('');\r\n    const [MTUSize,setMTUSize] = useState('');\r\n    const [PrimaryDNSServer,setPrimaryDNSServer] = useState('');\r\n    const [SecondaryDNSServer,setSecondaryDNSServer] = useState('');\r\n    const [Note,setNote] = useState('');\r\n    const [ShippingTitle,setShippingTitle] = useState('');\r\n\r\n    // for update row\r\n    useEffect(()=>{\r\n        if(data && Object.keys(data).length > 0){\r\n            setApplianceInterfaces(data.ApplianceInterfaces);\r\n            setInterfaceIpAddress(data.InterfaceIpAddress);\r\n            setSubnetMask(data.SubnetMask);\r\n            setDefaultGateway(data.DefaultGateway);\r\n            setMTUSize(data.MTUSize);\r\n            setPrimaryDNSServer(data.PrimaryDNSServer);\r\n            setSecondaryDNSServer(data.SecondaryDNSServer);\r\n            setNote(data.Note);\r\n            setShippingTitle(data.ShippingTitle);\r\n        }\r\n    },[data])\r\n\r\n    return (\r\n        <>\r\n            <TableRow>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"outlined\" margin=\"dense\" value={ApplianceInterfaces} onChange={(e)=>{setApplianceInterfaces(e.target.value)}} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\"  variant=\"outlined\" margin=\"dense\" value={InterfaceIpAddress} onChange={(e)=>{setInterfaceIpAddress(e.target.value)}} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\"  variant=\"outlined\" margin=\"dense\" value={SubnetMask} onChange={(e)=>{setSubnetMask(e.target.value)}} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\"  variant=\"outlined\" margin=\"dense\" value={DefaultGateway} onChange={(e)=>{setDefaultGateway(e.target.value)}} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\"  variant=\"outlined\" margin=\"dense\" value={MTUSize} onChange={(e)=>{setMTUSize(e.target.value)}} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\"  variant=\"outlined\" margin=\"dense\" value={PrimaryDNSServer} onChange={(e)=>{setPrimaryDNSServer(e.target.value)}} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\"  variant=\"outlined\" margin=\"dense\" value={SecondaryDNSServer} onChange={(e)=>{setSecondaryDNSServer(e.target.value)}} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\"  variant=\"outlined\" margin=\"dense\" value={Note} onChange={(e)=>{setNote(e.target.value)}} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\"  variant=\"outlined\" margin=\"dense\" value={ShippingTitle} onChange={(e)=>{setShippingTitle(e.target.value)}} />\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                    <IconButton size=\"small\" className=\"action\" onClick={props.onSave}>\r\n                        <Icon className=\"\">done</Icon>\r\n                    </IconButton> &nbsp;\r\n                    <IconButton size=\"small\" className=\"action\" onClick={props.onClose}>\r\n                        <Icon className=\"\">close</Icon>\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TestPage;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\ResetPassword.tsx",["1027","1028","1029","1030","1031"],"import { Button, Container, Grid, Icon, LinearProgress, TextField,Paper } from '@mui/material';\r\nimport React,{useState,useMemo,useEffect} from 'react';\r\nimport {Link as Rlink,useHistory} from 'react-router-dom';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport client from '../services/client';\r\nimport AlertMessage from '../components/AlertMessage';\r\n\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst ResetPassword:React.FC = ()=>{\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const history = useHistory();\r\n    const [Message,setMessage] = useState({type:'',message:''});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n\r\n    const [Email,setEmail] = useState('');\r\n    \r\n    const handleSubmit = async()=>{\r\n        \r\n        setProcessing(true);\r\n\r\n        let res:any = await client.post('user/resetPassword',{Email:Email});\r\n        if(res && res.success){\r\n            setMessage({type:'success',message:res.data});\r\n        }else{\r\n            setMessage({type:'error',message:res.message});\r\n        }\r\n\r\n        setProcessing(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isLogin){\r\n            history.push('/');\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"logo-mini\"></div>\r\n            <h1>Reset your password</h1>\r\n            <Paper className=\"paper paper-login\">\r\n                <AlertMessage message={Message}/>\r\n\r\n                <p>To reset your password, please enter your email address below</p>\r\n                <ValidatorForm\r\n                    \r\n                    onSubmit={handleSubmit}\r\n                    onError={errors => console.log(errors)}\r\n                >\r\n                    <TextValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        label=\"Email Address\"\r\n                        name=\"Email\"\r\n                        autoFocus\r\n                        onChange={(e:any)=>{ setEmail(e.target.value) }}\r\n                        validators={['required','isEmail']}\r\n                        errorMessages={['this field is required','Email is not valie']}\r\n                        value={Email}\r\n                        disabled={processing}\r\n                    />\r\n                    <br/>\r\n                    <Button disabled={processing}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                    >\r\n                        Reset my password\r\n                    </Button> \r\n                    <LinearProgress style={{display: processing?'':'none' }} />\r\n                    \r\n                    <Grid container className=\"links\">\r\n                        <Grid item style={{ flex: 1 }}>\r\n                            <Rlink to=\"/login\"> Login</Rlink>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </ValidatorForm>\r\n            \r\n            </Paper>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ResetPassword;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\ChangePassword.tsx",["1032","1033","1034","1035","1036","1037","1038"],"import { Button, Container, Grid, Icon, LinearProgress, TextField,Paper } from '@mui/material';\r\nimport React,{useState,useMemo,useEffect} from 'react';\r\nimport {Link as Rlink,useHistory,useParams} from 'react-router-dom';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport client from '../services/client';\r\n\r\nimport {useSelector} from 'react-redux';\r\nimport { Alert, AlertTitle } from '@mui/material';\r\nimport AlertMessage from '../components/AlertMessage';\r\n\r\nlet _password:string = ''; // for referencing\r\n\r\nconst ChangePassword:React.FC = ()=>{\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const history = useHistory();\r\n    const params = useParams();\r\n    const [Message,setMessage] = useState({type:'',message:''});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    const [ShowForm,setShowForm] = useState(false);\r\n\r\n\r\n    const [OldPassword,setOldPassword] = useState('');\r\n    const [NewPassword,setNewPassword] = useState('');\r\n    const [ConfirmPassword,setConfirmPassword] = useState('');\r\n    \r\n    _password = NewPassword;\r\n    \r\n    useEffect(() => {\r\n        if(isLogin){\r\n            setShowForm(true);\r\n        }else{\r\n            validateUUID();\r\n        }\r\n        \r\n        // add custom validation for confirm password\r\n        ValidatorForm.addValidationRule('isPasswordMatch', (value:string) => {\r\n            if (value !== _password) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        ValidatorForm.addValidationRule('validatePassword', (value:string) => {\r\n            let regex = /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/;\r\n            return regex.test(value);  \r\n        });\r\n        return ()=>{\r\n            ValidatorForm.removeValidationRule('isPasswordMatch');\r\n            ValidatorForm.removeValidationRule('validatePassword');\r\n        }\r\n    }, [])\r\n\r\n    const validateUUID = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get('user/validateUUIDLink',{uuid:params.uuid});\r\n        \r\n        if(res && res.success){\r\n            setShowForm(true);\r\n        }else{\r\n            setMessage({type:'error',message:res.message});\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        \r\n        let param:any = {};\r\n        let res:any = null;\r\n        param = {\r\n            NewPassword,ConfirmPassword,uuid:params.uuid\r\n        };\r\n        if(isLogin){\r\n            param = {...param,OldPassword};\r\n        }\r\n        res = await client.post('user/changePassword',param);    \r\n        if(res && res.success){\r\n            if(isLogin){\r\n                history.push(\"/myAccount\");\r\n                window.snakAlert.success(res.data);\r\n            }else{\r\n                setMessage({type:'success',message:res.data});\r\n            }\r\n            \r\n        }else{\r\n            setMessage({type:'error',message:res.message});\r\n        }\r\n\r\n        setProcessing(false);\r\n    }\r\n\r\n    return (\r\n        <div className={!isLogin?'login':''}>\r\n            {isLogin?'':<div className=\"logo-mini\"></div>}\r\n            \r\n            <h1>Update Password</h1>\r\n            <Paper className={!isLogin?'paper':'section mt-10'}>\r\n                <AlertMessage message={Message}/>\r\n\r\n                {ShowForm?\r\n                    <ValidatorForm\r\n                        onSubmit={handleSubmit}\r\n                        onError={errors => {\r\n                            console.log(errors)\r\n                        }}\r\n                    >\r\n                        <Grid container>\r\n                            <Grid item md={isLogin?6:12} sm={12} xs={12}>\r\n                                {isLogin?\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    type=\"password\"\r\n                                    label=\"Old Password\"\r\n                                    name=\"OldPassword\"\r\n                                    onChange={(e:any)=>{ setOldPassword(e.target.value) }}\r\n                                    validators={['required']}\r\n                                    errorMessages={['Password is required']}\r\n                                    value={OldPassword}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 50 }}\r\n                                />\r\n                                :''}\r\n                                \r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    type=\"password\"\r\n                                    label=\"New Password\"\r\n                                    name=\"NewPassword\"\r\n                                    onChange={(e:any)=>{ setNewPassword(e.target.value) }}\r\n                                    validators={['required','validatePassword']}\r\n                                    errorMessages={['Password is required','Password must be 8-16 char. long and must contain atleast one number']}\r\n                                    value={NewPassword}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 50 }}\r\n                                />\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    type=\"password\"\r\n                                    label=\"Confirm Password\"\r\n                                    name=\"ConfirmPassword\"\r\n                                    onChange={(e:any)=>{ setConfirmPassword(e.target.value) }}\r\n                                    value={ConfirmPassword}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 50 }}\r\n                                    validators={['isPasswordMatch', 'required']}\r\n                                    errorMessages={['Password mismatched','Confirm password is required']}\r\n                                />\r\n                                <br/>\r\n                                <Button disabled={processing}\r\n                                    type=\"submit\"\r\n                                    fullWidth={isLogin?false:true}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                >\r\n                                    Update Password\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        \r\n                    </ValidatorForm>\r\n                :\r\n               ''\r\n                }\r\n                {!isLogin?\r\n                    <Grid container className=\"links\">\r\n                        <Grid item style={{ flex: 1 }}>\r\n                            <Rlink to=\"/resetPassword\"> Forgot your password?</Rlink>\r\n                        </Grid>\r\n                        <Grid item >\r\n                            <Rlink to=\"/login\"> Login</Rlink>\r\n                        </Grid>\r\n                    </Grid>    \r\n                :''}\r\n                \r\n                <LinearProgress style={{display: processing?'':'none' }} />\r\n                <br/>\r\n            </Paper>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ChangePassword;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\featuredDashboards\\AccountDeepdiveDashboard.tsx",["1039","1040","1041","1042","1043","1044","1045","1046","1047","1048"],"import { FormControl, Grid, InputLabel, MenuItem, Paper, Select,Card ,CardContent,Button, Divider  } from \"@mui/material\";\r\nimport React,{useState,useMemo,useEffect} from \"react\";\r\nimport looker from \"../../services/looker\";\r\n\r\n//import 'react-block-ui/style.css';\r\n \r\nconst AccountDeepdiveDashboard:React.FC = ()=>{\r\n\r\n  const [DashboardSrc,setDashboardSrc] = useState<string|null>(null);\r\n\r\n  const load = async()=>{\r\n    let url = await looker.accountDeepdiveDashboard({});\r\n    if(url){\r\n      setDashboardSrc(url);\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    load();\r\n  },[])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"page-content\">\r\n          \r\n          \r\n          <h2>Account Deepdive for MRR/Live Controller/Daily Usage/License<span>Support Account Deepdive Dashboard integrated from looker</span></h2>\r\n          <Divider/><br/> \r\n          <Paper elevation={1} className=\"section mt-10\">\r\n            {DashboardSrc &&\r\n              <iframe src={DashboardSrc} width='100%' height='1000px' frameBorder='0'></iframe>\r\n            }\r\n          </Paper>\r\n         \r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AccountDeepdiveDashboard;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\adminUsers\\form.tsx",["1049","1050","1051","1052","1053","1054","1055","1056"],"import {\r\n  Button,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  Grid,\r\n  LinearProgress,\r\n  Paper,\r\n  Select,\r\n  FormControl,\r\n  MenuItem,\r\n  InputLabel,\r\n} from \"@mui/material\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport { Link as RLink, useHistory } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport SearchableDropdown from \"../../../components/SearchableDropdown\";\r\nimport adminService from \"../../../services/admin\";\r\n\r\nimport { USER_TYPE } from \"../../../const\";\r\n\r\nlet _password: string = \"\"; // for referencing\r\n\r\nconst AdminUserForm: React.FC = () => {\r\n  const param = useParams();\r\n  const history = useHistory();\r\n\r\n  const mode = param.id ? \"update\" : \"create\";\r\n\r\n  const [processing, setProcessing] = useState(false);\r\n\r\n  const [Email, setEmail] = useState(\"\");\r\n  const [FullName, setFullName] = useState(\"\");\r\n  const [ChangePassword, setChangePassword] = useState(false);\r\n  const [Role, setRole] = useState(\"Sales\");\r\n  const [Password, setPassword] = useState(\"\");\r\n  const [ConfirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [IsCustomer, setIsCustomer] = useState<boolean>(false);\r\n  const [AccountID, setAccountID] = useState<string>(\"\");\r\n  const [OrganisationName, setOrganisationName] = useState<string>(\"\");\r\n\r\n  _password = Password;\r\n\r\n  const setData = (data: any) => {\r\n    if (data) {\r\n      setEmail(data.Email);\r\n      setFullName(data.FullName);\r\n      setRole(data.Role);\r\n      setIsCustomer(data.UserType === USER_TYPE.CUSTOMER);\r\n      if (data.UserType === USER_TYPE.CUSTOMER) {\r\n        setOrganisationName(data.OrganisationName);\r\n      }\r\n      setAccountID(data.AccountID);\r\n    } else {\r\n      setEmail(\"\");\r\n      setFullName(\"\");\r\n      setRole(\"Sales\");\r\n    }\r\n  };\r\n\r\n  const handlerOnSelectAccount = (account: any) => {\r\n    if (account) setAccountID(account.id);\r\n  };\r\n\r\n  const getRecord = async () => {\r\n    setProcessing(true);\r\n    let res: any = await adminService.users.get({ id: param.id });\r\n    if (!res.success) {\r\n      window.snakAlert.error(res.message);\r\n      setData(null);\r\n    } else {\r\n      if (res.success && res.data) {\r\n        setData(res.data);\r\n      } else {\r\n        window.snakAlert.error(res.message);\r\n      }\r\n    }\r\n    setProcessing(false);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setProcessing(true);\r\n    let params = {\r\n      Email,\r\n      FullName,\r\n      ChangePassword,\r\n      Password,\r\n      Role,\r\n      AccountID,\r\n      IsCustomer,\r\n      id: param.id,\r\n    };\r\n    let res: any = null;\r\n\r\n    if (mode == \"update\") res = await adminService.users.update(params);\r\n    else res = await adminService.users.create(params);\r\n\r\n    if (!res.success) {\r\n      window.snakAlert.error(res.message);\r\n    } else {\r\n      if (res.success && res.data) {\r\n        history.push(\"/admin/users\");\r\n        window.snakAlert.success(res.data);\r\n      } else {\r\n        window.snakAlert.error(res.message);\r\n      }\r\n    }\r\n    setProcessing(false);\r\n  };\r\n  const handleChangeRole = (e: any) => {\r\n    setRole(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (mode == \"update\") getRecord();\r\n\r\n    // add custom validation for confirm password\r\n    ValidatorForm.addValidationRule(\"isPasswordMatch\", (value: string) => {\r\n      if (value !== _password) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    ValidatorForm.addValidationRule(\"validatePassword\", (value: string) => {\r\n      let regex = /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/;\r\n      return regex.test(value);\r\n    });\r\n    return () => {\r\n      ValidatorForm.removeValidationRule(\"isPasswordMatch\");\r\n      ValidatorForm.removeValidationRule(\"validatePassword\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"page-content\">\r\n        <h2>\r\n          Admin Users{\" \"}\r\n          <span> {mode == \"update\" ? \"Update User\" : \"Create User\"} </span>\r\n        </h2>\r\n\r\n        {mode == \"update\" ? (\r\n          <Paper elevation={1} className=\"section mt-10\">\r\n            User Email: <strong>{Email}</strong>\r\n          </Paper>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <LinearProgress\r\n          className=\"progress-bar\"\r\n          style={{ display: processing ? \"\" : \"none\" }}\r\n        />\r\n        <Paper elevation={1} className=\"section mt-10\">\r\n          <ValidatorForm\r\n            onSubmit={handleSubmit}\r\n            onError={(errors) => {\r\n              console.log(errors);\r\n            }}\r\n          >\r\n            <Grid container spacing={4}>\r\n              <Grid item md={6} xs={12}>\r\n                <Grid item md={12} xs={12}>\r\n                  <TextValidator\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                    fullWidth\r\n                    label=\"Full Name\"\r\n                    name=\"FullName\"\r\n                    autoFocus\r\n                    size=\"small\"\r\n                    onChange={(e: any) => {\r\n                      setFullName(e.target.value);\r\n                    }}\r\n                    validators={[\"required\"]}\r\n                    errorMessages={[\"Name is required\"]}\r\n                    value={FullName}\r\n                    disabled={processing}\r\n                    inputProps={{ maxLength: 100 }}\r\n                  />\r\n                </Grid>\r\n                <Grid item md={12} xs={12}>\r\n                  <TextValidator\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                    fullWidth\r\n                    label=\"Email\"\r\n                    name=\"Email\"\r\n                    size=\"small\"\r\n                    autoFocus\r\n                    onChange={(e: any) => {\r\n                      setEmail(e.target.value);\r\n                    }}\r\n                    validators={[\"required\", \"isEmail\"]}\r\n                    errorMessages={[\"Email is required\", \"Email is not valid\"]}\r\n                    value={Email}\r\n                    disabled={processing}\r\n                    inputProps={{ maxLength: 100 }}\r\n                  />\r\n                </Grid>\r\n                <Grid item md={12} xs={12}>\r\n                  <FormGroup>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={IsCustomer}\r\n                          onChange={(e) => {\r\n                            setIsCustomer(e.target.checked);\r\n                          }}\r\n                        />\r\n                      }\r\n                      label=\"Is Customer\"\r\n                    />\r\n                  </FormGroup>\r\n                </Grid>\r\n                {IsCustomer && (\r\n                  <Grid item md={12} xs={12} style={{ paddingBottom: \"10px\" }}>\r\n                    <SearchableDropdown\r\n                      value={{ id: AccountID, text: OrganisationName }}\r\n                      action=\"searchAccount\"\r\n                      onSelect={(value: any) => handlerOnSelectAccount(value)}\r\n                    />\r\n                  </Grid>\r\n                )}\r\n                <Grid item md={12} xs={12}>\r\n                  <div className=\"mt-16 mb-10 dropdown\">\r\n                    <FormControl fullWidth>\r\n                      <InputLabel>Role</InputLabel>\r\n                      <Select\r\n                        value={Role}\r\n                        label=\"Age\"\r\n                        size=\"small\"\r\n                        onChange={handleChangeRole}\r\n                      >\r\n                        <MenuItem value={\"Admin\"}>Admin</MenuItem>\r\n                        <MenuItem value={\"Customer\"}>Customer</MenuItem>\r\n                        <MenuItem value={\"Sales\"}>Sales</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </div>\r\n                </Grid>\r\n\r\n                {mode == \"update\" ? (\r\n                  <Grid item md={12} xs={12}>\r\n                    <FormGroup row>\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox\r\n                            color=\"primary\"\r\n                            checked={ChangePassword}\r\n                            onChange={(e: any) => {\r\n                              setChangePassword(e.target.checked);\r\n                            }}\r\n                            name=\"checkedA\"\r\n                          />\r\n                        }\r\n                        label=\"Change Password\"\r\n                      />\r\n                    </FormGroup>\r\n                  </Grid>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n\r\n                {(mode == \"update\" && ChangePassword) || mode == \"create\" ? (\r\n                  <>\r\n                    <TextValidator\r\n                      variant=\"outlined\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      type=\"password\"\r\n                      label=\"New Password\"\r\n                      name=\"Password\"\r\n                      size=\"small\"\r\n                      onChange={(e: any) => {\r\n                        setPassword(e.target.value);\r\n                      }}\r\n                      validators={[\"required\", \"validatePassword\"]}\r\n                      errorMessages={[\r\n                        \"Password is required\",\r\n                        \"Password must be 8-16 char. long and must contain atleast one number\",\r\n                      ]}\r\n                      value={Password}\r\n                      disabled={processing}\r\n                      inputProps={{ maxLength: 50 }}\r\n                    />\r\n                    <TextValidator\r\n                      variant=\"outlined\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      type=\"password\"\r\n                      label=\"Confirm Password\"\r\n                      name=\"ConfirmPassword\"\r\n                      size=\"small\"\r\n                      onChange={(e: any) => {\r\n                        setConfirmPassword(e.target.value);\r\n                      }}\r\n                      value={ConfirmPassword}\r\n                      disabled={processing}\r\n                      inputProps={{ maxLength: 50 }}\r\n                      validators={[\"isPasswordMatch\", \"required\"]}\r\n                      errorMessages={[\r\n                        \"Password mismatched\",\r\n                        \"Confirm password is required\",\r\n                      ]}\r\n                    />\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n\r\n                <Grid item md={12}>\r\n                  <br />\r\n                  <Button\r\n                    disabled={processing}\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                  &nbsp; &nbsp;\r\n                  <Button\r\n                    component={RLink}\r\n                    to=\"/admin/users\"\r\n                    variant=\"contained\"\r\n                  >\r\n                    Calcel\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </ValidatorForm>\r\n        </Paper>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminUserForm;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\index.tsx",["1057","1058","1059","1060","1061","1062","1063"],"import { Divider, Grid, Paper,Icon, Button,Card,CardActionArea,CardMedia, Typography, Stack, TextField } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\nimport sfdc from '../services/sfdc'\r\nimport { useHistory, withRouter, Link as RLink } from \"react-router-dom\";\r\n\r\nimport {switchApp} from '../store/actions';\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport ModalDialog from '../components/ModalDialog';\r\nimport ContactAddDialog from '../components/Dialog/ContactAddDialog';\r\nimport {USER_TYPE} from '../const'\r\n\r\nconst HomePage = ()=>{\r\n    const [showAddContactDialog, setShowAddContactDialog] = useState<Boolean>(false)\r\n    const [opportunities, setOpportunities] = useState<any>();\r\n    const [summary, setSummary] = useState<any>();\r\n    const dispatch = useDispatch();\r\n    const appList = useSelector((state:any)=>state.user?state.user.settings.apps:null);\r\n    const menuList = useSelector((state:any)=>state.user?state.user.settings.menu:null);\r\n    const UserRole = useSelector((state: any) =>\r\n    state.user ? state.user.role : null\r\n    );\r\n    const history = useHistory();\r\n    const accid = useSelector((state: any) =>\r\n        state.user ? state.user.accid : null\r\n    );\r\n\r\n    const getSummary = async () => {\r\n        let res:any = await sfdc.accountSummary(accid);\r\n        console.log(\"Summary\", res)\r\n        if (res.success) {\r\n            setSummary(res.data)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getSummary()\r\n    }, [])\r\n\r\n    \r\n    \r\n    const handlerClick = (app,path)=>{\r\n        dispatch(switchApp({id:app.id,name:app.name}));\r\n        history.push(path);\r\n    }\r\n\r\n    const getMenu = (app_id)=>{\r\n        return  menuList.filter((item:any)=> item.app_id === app_id);\r\n    }\r\n\r\n    // Close Contact Modal\r\n    const handleAccountDialogClose = () => setShowAddContactDialog(false)\r\n\r\n    return(\r\n        \r\n        <>\r\n            <div className=\"page-content cockpit\">\r\n                <Grid container spacing={1} justifyContent=\"space-between\">\r\n                    <h2>Landing Switchboard <span>List of all features</span></h2>\r\n                </Grid>\r\n                <Divider/><br/>\r\n                {UserRole === USER_TYPE.CUSTOMER ? (<>\r\n                    <Paper elevation={1} className=\"section mt-10\">\r\n                    <h4 style={{padding: 0}}>Account Details</h4><Divider/><br/>\r\n                    <Grid container spacing={4}>\r\n                    \r\n                    \r\n                            <Grid item md={3}>\r\n                                <TextField defaultValue=\"AccountName\" value={summary?.basicInfo?.Name || ''} inputProps={{ readOnly: true, }} size=\"small\" label=\"Account Name\" fullWidth variant=\"standard\" />\r\n                            </Grid>\r\n                            <Grid item md={3}>\r\n                                <TextField defaultValue=\"Domain\" value={summary?.basicInfo?.Website || ''}  inputProps={{ readOnly: true, }} size=\"small\" label=\"Domain\" fullWidth variant=\"standard\" />\r\n                            </Grid>\r\n                            <Grid item md={3}>\r\n                                <TextField defaultValue=\"ID\" value={summary?.basicInfo?.Id || ''} inputProps={{ readOnly: true, }} size=\"small\" label=\"ID\" fullWidth variant=\"standard\" />\r\n                            </Grid>\r\n                            <Grid item md={3}>\r\n                                <TextField defaultValue=\"Account Owner\" value={summary?.summary?.AccountOwner || ''} inputProps={{ readOnly: true, }} size=\"small\" label=\"Account Owner\" fullWidth variant=\"standard\" />\r\n                            </Grid>\r\n                            <Grid item md={3}>\r\n                                <TextField defaultValue=\"PrimarySalesEngineer\" value={summary?.summary?.PrimarySalesEngineer || ''} inputProps={{ readOnly: true, }} size=\"small\" label=\"Primary Sales Engineer\" fullWidth variant=\"standard\" />\r\n                            </Grid>\r\n                            <Grid item md={3}>\r\n                                <TextField defaultValue=\"SolutionsArchitect\" value={summary?.summary?.SolutionsArchitect || ''} inputProps={{ readOnly: true, }} size=\"small\" label=\"Solution Architect\" fullWidth variant=\"standard\" />\r\n                            </Grid>\r\n                            <Grid item md={3}>\r\n                                <TextField defaultValue=\"Phone\" value={summary?.basicInfo?.Phone || ''} inputProps={{ readOnly: true, }} size=\"small\" label=\"Phone\" fullWidth variant=\"standard\" />\r\n                            </Grid>        \r\n                       \r\n                    </Grid>\r\n                    {UserRole === USER_TYPE.CUSTOMER && <>\r\n                        <Divider className='mt-16 mb-16'/>\r\n                        <Button variant=\"contained\" size=\"small\" color=\"secondary\" onClick={() => setShowAddContactDialog(true)}>\r\n                            <Icon>post_add</Icon> &nbsp; Add Support Contact\r\n                        </Button>\r\n                    \r\n                    </>}\r\n                \r\n                </Paper>\r\n                </>) : null}\r\n                <Grid item xs={12} md={12}>\r\n                    {appList && appList.map((app,index)=>(\r\n                    <Paper elevation={1} className=\"section mt-10\" key={index}>\r\n                        <h4> <Icon>{app.icon}</Icon> {app.name}</h4><Divider/><br/>\r\n                        <Grid container spacing={2}>\r\n                            {getMenu(app.id).map((menu,mindex)=>(\r\n                                <Grid item md={3} lg={2} xs={12} key={mindex}>\r\n                                    <Card onClick={()=>{handlerClick(app,menu.path)}}>\r\n                                        <CardActionArea sx={{textAlign:'center',padding:'10px 6px'}}>\r\n                                            <Icon sx={{zoom:'3'}}>{menu.icon}</Icon>            \r\n                                            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                                <strong>{menu.name}</strong>\r\n                                            </Typography>\r\n                                        </CardActionArea>\r\n                                    </Card>\r\n                                </Grid>\r\n                            ))}\r\n                        </Grid>\r\n                    </Paper>\r\n                ))}\r\n                </Grid>\r\n                \r\n            </div>\r\n            <ModalDialog\r\n                fullScreen={false}   \r\n                maxWidth=\"sm\"\r\n                title={`Add Support Contact`}\r\n                open={showAddContactDialog}\r\n                component={<ContactAddDialog onClose={handleAccountDialogClose}/>}\r\n                onClose={handleAccountDialogClose}\r\n            />\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default HomePage;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\tags\\form.tsx",["1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076"],"import { Button, FormControl,Box, Grid, Icon, IconButton, InputLabel, LinearProgress, MenuItem, Select, TextField, Tooltip, Stack } from '@mui/material';\r\nimport React,{useState,useEffect} from 'react';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport LabelFieldsListing from '../../../components/LabelFieldsListing';\r\nimport DataTable, { ExpanderComponentProps,TableRow }  from 'react-data-table-component';\r\nimport tagService from '../../../services/tags';\r\nimport { USER_TYPE } from '../../../const';\r\n\r\nconst AccountTagForm = (props:any)=>{\r\n\r\n    const {accountType,domainID} = props;\r\n    const [formData,setFormData] = useState<any[]>([]);\r\n    const [loading,setLoading] = useState(false);\r\n\r\n    const handleSubmit = async() => {\r\n        \r\n        let res = await tagService.update( {tagsData:formData, id:domainID});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                window.snakAlert.success(res.data);\r\n                if(accountType != USER_TYPE.CUSTOMER)\r\n                    props.closeModal()\r\n\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        \r\n        console.log(formData)\r\n    }\r\n    const handleChangeTag = (e,row,index, name) => {\r\n        \r\n        let data = [...formData]\r\n        data[index][name] = e.target.value\r\n        setFormData(data)\r\n    }\r\n    const handleChangeCategory = (e, row, index, name) => {\r\n       \r\n        let data = [...formData]\r\n        data[index][name] = e.target.value\r\n        setFormData(data)\r\n    }\r\n    const load = async()=>{\r\n        setLoading(true);\r\n        let res:any = await tagService.getAccounts({id:domainID});\r\n        \r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setFormData([]);;\r\n        }else{\r\n            if(res.success && res.data){\r\n                setFormData(res.data);   \r\n            }else{\r\n                setFormData([]);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n  \r\n\r\n\r\n    const columns:any = [\r\n        {\r\n          name: 'Account ID',\r\n          selector: 'AccountID',\r\n          compact:true,\r\n        },  \r\n        {\r\n            name: 'TagName',\r\n            compact:true,\r\n            cell:(row:any, index) => \r\n                <>\r\n              <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Name\"\r\n                    value={row.TagName}\r\n                    onChange={(e) => handleChangeTag(e,row,index, \"TagName\")}\r\n                />\r\n                    {/* <input type=\"text\" placeholder='Tag Name' name=\"TagName\" onChange={(e) => handleChangeTag(e,row,index, \"TagName\")}/> */}\r\n                </>\r\n          },\r\n        {\r\n            name: 'Category',\r\n            right:true,\r\n            cell:(row:any, index) => \r\n                <>\r\n                    <div className=\"mt-10 mb-10 dropdown\">\r\n                    <Box sx={{ minWidth: 140 }}>\r\n                                            <FormControl fullWidth>\r\n                                                {/* <InputLabel  id=\"demo-simple-select-label\">Category</InputLabel> */}\r\n                                                 <Select\r\n                                                value={row.Category}\r\n                                                // label=\"Category\"\r\n                                                labelId=\"demo-simple-select-label\"\r\n                                                 id=\"demo-simple-select\"\r\n                                                size=\"small\"\r\n                                                onChange={(e) => handleChangeCategory(e,row,index, \"Category\")}\r\n                                                >\r\n                                                    <MenuItem value={'Domain'}>Domain</MenuItem>\r\n                                                    <MenuItem value={'Application'}>Application</MenuItem>\r\n                                                    <MenuItem value={'Product'}>Product</MenuItem>\r\n                                                    <MenuItem value={'Project'}>Project</MenuItem>\r\n                                                    <MenuItem value={'Business Unit'}>Business Unit</MenuItem>\r\n                                                    <MenuItem value={'Cost Center'}>Cost Center</MenuItem>\r\n                                                    <MenuItem value={'Default'}>Default</MenuItem>\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                            </Box>\r\n                                        </div>\r\n                    {/* <input type=\"text\" placeholder='Category' name=\"Category\" onChange={(e) => handleChangeCategory(e,row,index, \"Category\")}/> */}\r\n                </>\r\n        }\r\n      ];\r\n    \r\n    useEffect(() => {\r\n        console.log(domainID)\r\n        \r\n        if(domainID){\r\n            load();\r\n        }\r\n    },[domainID])\r\n\r\n    return (\r\n        <>\r\n      \r\n         {loading && <LinearProgress/>}\r\n         {formData.length !=0 &&    \r\n                       <>\r\n                       <Grid container spacing={3} >\r\n                           <Grid item md={12} sm={12} xs={12}>\r\n                           <DataTable\r\n                                title=\"\"\r\n                                noHeader={true}\r\n                                columns={columns}\r\n                                dense={true}\r\n                                data={formData}\r\n                                highlightOnHover={true} />\r\n                           </Grid>\r\n                       </Grid>\r\n                       <Grid container direction=\"row\" justifyContent=\"flex-end\" mt={3} pr={4}>\r\n                                <Button\r\n                                // sx={{ alignSelf: 'flex-end' }}\r\n                                    onClick={handleSubmit}\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\">Submit</Button>\r\n                           </Grid>\r\n                    \r\n\r\n                  \r\n                    </>\r\n         \r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AccountTagForm; ","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\AdminDashboard.tsx",["1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel  } from '@mui/material';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nconst AdminDashboard = () => {\r\n\r\n    return (\r\n        <>\r\n        <div className=\"page-content\">\r\n            <h2>Dashboard <span>Admin navigation dashboard</span></h2>\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Grid spacing={1} container>\r\n                    <Grid item md={2} sm={4} xs={12}>\r\n                        <Button variant=\"contained\" component={RLink} to=\"/admin/users\" fullWidth={true} color=\"primary\">\r\n                            <Icon>person_add_alt</Icon> &nbsp; Users\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item md={2} sm={4} xs={12}>\r\n                        <Button variant=\"contained\" component={RLink} to=\"/tags\" fullWidth={true} color=\"primary\">\r\n                        <Icon>person_add_alt</Icon> &nbsp; Tags\r\n                        </Button>\r\n                    </Grid >\r\n                    <Grid item md={2} sm={4} xs={12}>\r\n                        <Button variant=\"contained\" component={RLink} to=\"/logs\" fullWidth={true} color=\"primary\">\r\n                        <Icon>person_add_alt</Icon> &nbsp; Audit Log\r\n                        </Button>\r\n                    </Grid >\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n        </>\r\n    )\r\n} \r\n\r\nexport default AdminDashboard; ","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\featuredDashboards\\AccountDashboradUsecase.tsx",["1089","1090","1091","1092","1093","1094","1095","1096","1097","1098"],"import { FormControl, Grid, InputLabel, MenuItem, Paper, Select,Card ,CardContent,Button, Divider  } from \"@mui/material\";\r\nimport React,{useState,useMemo,useEffect} from \"react\";\r\nimport looker from \"../../services/looker\";\r\n\r\n//import 'react-block-ui/style.css';\r\n \r\nconst AccountUsecaseDashboard:React.FC = ()=>{\r\n\r\n  const [DashboardSrc,setDashboardSrc] = useState<string|null>(null);\r\n\r\n  const load = async()=>{\r\n    let url = await looker.useCaseDashboard({});\r\n    if(url){\r\n      setDashboardSrc(url);\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    load();\r\n  },[])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"page-content\">\r\n          \r\n          \r\n      <h2>Account Use Cases<span>Sales Account Use Cases Dashboard integrated from looker</span></h2>\r\n          <Divider/><br/> \r\n          <Paper elevation={1} className=\"section mt-10\">\r\n            {DashboardSrc &&\r\n              <iframe src={DashboardSrc} width='100%' height='1000px' frameBorder='0'></iframe>\r\n            }\r\n          </Paper>\r\n         \r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AccountUsecaseDashboard;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\SupplierLogin.tsx",["1099","1100","1101","1102","1103","1104","1105"],"import { Button, Container, Grid, Icon, LinearProgress, TextField,Paper } from '@mui/material';\r\nimport React,{useState,useMemo,useEffect} from 'react';\r\nimport {Link as Rlink,useHistory} from 'react-router-dom';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport AlertMessage,{ALERT_TYPE} from '../../components/AlertMessage';\r\nimport auth from '../../services/auth';\r\n\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {login} from '../../store/actions';\r\n\r\nconst SupplierLogin:React.FC = ()=>{\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const Role = useSelector((state:any)=>state.user?state.user.role:'');\r\n    if(isLogin){\r\n        history.push('/');\r\n        /*if(Role == 'Admin'){\r\n            history.push('/admin/dashboard');\r\n        }else{\r\n            history.push('/mySubscription');\r\n        }*/\r\n    }\r\n\r\n    \r\n    const [Message,setMessage] = useState('');\r\n    const [processing,setProcessing] = useState(false);\r\n\r\n    const [Email,setEmail] = useState('');\r\n    const [Password,setPassword] = useState('');\r\n\r\n    \r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await auth.login({email:Email,pwd:Password});\r\n        if(res && res.success){\r\n            dispatch(login(res.data));\r\n        }else{\r\n            setMessage(res.message);\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            \r\n            <Paper className=\"paper\">\r\n            <div className=\"logosupplier\"></div>\r\n                <AlertMessage type={ALERT_TYPE.ERROR} message={Message}/>\r\n\r\n                <ValidatorForm\r\n                    \r\n                    onSubmit={handleSubmit}\r\n                    onError={errors => console.log(errors)}\r\n                >\r\n                    <Grid container spacing={2}>\r\n                        <Grid item md={12}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Email Address\"\r\n                                name=\"Email\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ setEmail(e.target.value) }}\r\n                                validators={['required','isEmail']}\r\n                                errorMessages={['Ehis is required','Email is not valie']}\r\n                                value={Email}\r\n                                disabled={processing}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                name=\"Password\"\r\n                                onChange={(e:any)=>{ setPassword(e.target.value) }}\r\n                                validators={['required']}\r\n                                errorMessages={['Password is required']}\r\n                                value={Password}\r\n                                disabled={processing}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br/>\r\n                    <Button disabled={processing}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <LinearProgress style={{display: processing?'':'none' }} />\r\n                    <br/><br/>\r\n                </ValidatorForm>\r\n            \r\n            </Paper>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SupplierLogin;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\dashboard1\\AccountExplorer.tsx",["1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117","1118","1119","1120","1121","1122","1123","1124","1125","1126","1127","1128","1129","1130","1131","1132","1133","1134","1135","1136","1137","1138"],"import { FormControl, Grid, InputLabel, MenuItem, Paper, Select,Card ,CardContent, Chip, Icon, Divider ,TextField, Typography, Button,Dialog,Toolbar,Pagination    } from \"@mui/material\";\r\nimport React,{useState,useMemo,useEffect} from \"react\";\r\n\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport streamgraph from \"highcharts/modules/streamgraph\";\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport client from \"../../services/client\";\r\nimport moment from \"moment\";\r\nimport Badge from '@mui/material/Badge';\r\nimport BlockUi from 'react-block-ui';\r\nimport Stack from '@mui/material/Stack';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\n\r\n\r\nimport 'react-block-ui/style.css';\r\nimport u from '../../services/util';\r\n\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport { Box } from \"@mui/system\";\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  dir?: string;\r\n  index: number;\r\n  value: number;\r\n}\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nfunction a11yProps(index: number) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    'aria-controls': `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nfunction createData(\r\n  name: string,\r\n  title: string,\r\n  email: string,\r\n  phone: string,\r\n) {\r\n  return { name, title, email, phone };\r\n}\r\n\r\n\r\nconst rows = [\r\n  createData('Srinivas Surapaneni', 'President', 'srinivas@24x7systems.com','4042297952'),\r\n  createData('Srinivas Surapaneni', 'President', 'srinivas@24x7systems.com','4042297952'),\r\n  createData('Srinivas Surapaneni', 'President', 'srinivas@24x7systems.com','4042297952'),\r\n  createData('Srinivas Surapaneni', 'President', 'srinivas@24x7systems.com','4042297952'),\r\n  createData('Srinivas Surapaneni', 'President', 'srinivas@24x7systems.com','4042297952'),\r\n  createData('Srinivas Surapaneni', 'President', 'srinivas@24x7systems.com','4042297952'),\r\n];\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  '&:nth-of-type(odd)': {\r\n    backgroundColor: theme.palette.action.hover,\r\n  },\r\n  // hide last border\r\n  '&:last-child td, &:last-child th': {\r\n    border: 0,\r\n  },\r\n}));\r\n\r\nconst AccountExplorer = () => {\r\n  const isLogin = useSelector((state:any)=>state.isLogin);\r\n  const [processing,setProcessing] = useState(false);\r\n\r\n  const [CustomerName,setCustomerName] = useState('');\r\n  const [GraphData,setGraphData]:any = useState({});\r\n  const Search = async(period:number,customer:any) => {\r\n     \r\n   \r\n     \r\n  }\r\n \r\n  const [value, setValue] = React.useState(0);\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n  const handleChangeIndex = (index: number) => {\r\n    setValue(index);\r\n  };\r\n\r\n  const [value2, setValue2] = React.useState(0);\r\n  const handleChange2 = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue2(newValue);\r\n  };\r\n  const handleChangeIndex2 = (index: number) => {\r\n    setValue2(index);\r\n  };\r\n\r\n\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  const [open1, setOpen1] = React.useState(false);\r\n  const handleClickOpen1 = () => {\r\n    setOpen1(true);\r\n  };\r\n  const handleClose1 = () => {\r\n    setOpen1(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"page-content\">\r\n        <BlockUi tag=\"div\" blocking={processing}>\r\n        <Grid container spacing={2}>\r\n          <Grid item md={6}>\r\n          <h2>Account Explorer <span>Key account information on a single interface</span></h2>\r\n          </Grid>\r\n          <Grid item md={6}>\r\n            <Filter Search={Search}/>\r\n          </Grid>\r\n        </Grid>  \r\n          \r\n          <Paper elevation={1} className=\"section mt-10\">\r\n            \r\n            <h2 style={{textAlign:'center',paddingBottom:'10px'}}>DXC Technology</h2><Divider/><br/>\r\n            \r\n            <Stack direction=\"row\" spacing={1} justifyContent=\"center\" >\r\n                <Chip icon={<Icon>settings</Icon>} label=\"Subscriptions (2)\" variant=\"outlined\"  style={{fontSize:'10px'}}/>\r\n                <Chip icon={<Icon>library_add_check</Icon>} label=\"Opportunities (2)\" variant=\"outlined\" style={{fontSize:'10px'}}/>\r\n                <Chip icon={<Icon>support_agent</Icon>} label=\"Cases (4)\" variant=\"outlined\"  style={{fontSize:'10px'}}/>\r\n                <Chip icon={<Icon>person_pin</Icon>} label=\"Account Owner: Jason Langone\" variant=\"outlined\"  style={{fontSize:'10px'}}/>\r\n                <Chip icon={<Icon>engineering</Icon>} label=\"Primary Sales Engineer: Joe Conwell\" variant=\"outlined\" style={{fontSize:'10px'}}/>\r\n                <Chip icon={<Icon>manage_accounts</Icon>} label=\"Solutions Architect: Joe Conwell \" variant=\"outlined\"  style={{fontSize:'10px'}}/>\r\n               \r\n            </Stack>\r\n          </Paper>\r\n          \r\n          <h4>Basic Information</h4>\r\n\r\n          <Paper elevation={1} className=\"section mt-22\">\r\n          \r\n          \r\n           <Grid container spacing={4}>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Customer\" size=\"small\" label=\"Parent Account\" fullWidth variant=\"standard\" />\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Customer\" size=\"small\" label=\"Type\" fullWidth variant=\"standard\" InputProps={{readOnly: true}} />\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"dxc.com\" size=\"small\" label=\"Website\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"8032109817\" size=\"small\" label=\"Phone\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Business Services\" size=\"small\" label=\"Industry\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Custom Software & IT Services\" size=\"small\" label=\"Sub-Industry\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"134,000\" size=\"small\" label=\"Employees\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"USD 17,729,000,000.00\" size=\"small\" label=\"Annual Revenue\t\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Over $5 bil.\" size=\"small\" label=\"Annual Revenue Band\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Enterprise\" size=\"small\" label=\"Market Segment\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"NA - US Northeast\" size=\"small\" label=\"Territory\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"AWS Marketplace Public Metered\" size=\"small\" label=\"Transaction Type\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Platinum\" size=\"small\" label=\"Support Level\t\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Next-Gen Transit using TGW\" size=\"small\" label=\"Primary Use Case\t\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Yes\" size=\"small\" label=\"In Production\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"3/26/2021\" size=\"small\" label=\"Last Won Deal\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n          </Grid> \r\n            <Stack className=\"mt-10\" direction=\"row\" spacing={2} justifyContent=\"flex-end\">\r\n                  <Button  variant=\"outlined\" size=\"small\" onClick={handleClickOpen1}>View All</Button>\r\n                </Stack>\r\n          </Paper>\r\n\r\n          \r\n\r\n          <h4>Related Records</h4>\r\n          <Box sx={{ bgcolor: 'background.paper'}} className=\"mt-22\">\r\n            <AppBar position=\"static\" color=\"secondary\">\r\n              <Tabs\r\n                value={value}\r\n                \r\n                onChange={handleChange}\r\n                indicatorColor=\"secondary\"\r\n                textColor=\"inherit\"\r\n                variant=\"fullWidth\"\r\n                aria-label=\"full width tabs example\"\r\n              >\r\n                <Tab label=\"Contacts\" {...a11yProps(0)} />\r\n                <Tab label=\"Opportunities\" {...a11yProps(1)} />\r\n                <Tab label=\"Cases\" {...a11yProps(2)} />\r\n                <Tab label=\"Activity\" {...a11yProps(2)} />\r\n                <Tab label=\"Contracts\" {...a11yProps(2)} />\r\n                <Tab label=\"Subscriptions\" {...a11yProps(2)} />\r\n              </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews \r\n              index={value}\r\n              onChangeIndex={handleChangeIndex}\r\n            >\r\n              <TabPanel value={value} index={0} >\r\n                <TableContainer component={Paper}>\r\n                  <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell >Title</TableCell>\r\n                        <TableCell >Email</TableCell>\r\n                        <TableCell >Phone</TableCell>\r\n                        <TableCell></TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {rows.slice(3).map((row) => (\r\n                        <StyledTableRow\r\n                          key={row.name}\r\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                        >\r\n                          <TableCell>{row.name}</TableCell>\r\n                          <TableCell>{row.title}</TableCell>\r\n                          <TableCell>{row.email}</TableCell>\r\n                          <TableCell>{row.phone}</TableCell>\r\n                          <TableCell> <IconButton size=\"small\"  onClick={handleClickOpen1}><Icon>visibility</Icon></IconButton></TableCell>\r\n                        </StyledTableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                <Stack className=\"mt-10\" direction=\"row\" spacing={2} justifyContent=\"flex-end\">\r\n                  <Button  variant=\"outlined\" size=\"small\" onClick={handleClickOpen}>View More</Button>\r\n                </Stack>\r\n              </TabPanel>\r\n              <TabPanel value={value} index={1} >\r\n                <TableContainer component={Paper}>\r\n                  <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Opportunity Name</TableCell>\r\n                        <TableCell >Primary Use Case</TableCell>\r\n                        <TableCell >Stage</TableCell>\r\n                        <TableCell >MRR</TableCell>\r\n                        <TableCell >Amount</TableCell>\r\n                        <TableCell >Close Date</TableCell>\r\n                        <TableCell >Type</TableCell>\r\n                        <TableCell >Transaction Type</TableCell>\r\n                        <TableCell ></TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      <StyledTableRow\r\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                        >\r\n                          <TableCell>DXC - Expand - Azure & SAP Expansion</TableCell>\r\n                          <TableCell>Encrypted Transit using AGW</TableCell>\r\n                          <TableCell>Closed Lost\t</TableCell>\r\n                          <TableCell>USD 2,000.00\t</TableCell>\r\n                          <TableCell>USD 2,000.00</TableCell>\r\n                          <TableCell>11/24/2021</TableCell>\r\n                          <TableCell>Expanded Business</TableCell>\r\n                          <TableCell>AWS Marketplace Public Metered</TableCell>\r\n                          <TableCell> <IconButton  onClick={handleClickOpen1}><Icon>visibility</Icon></IconButton></TableCell>\r\n                      </StyledTableRow>\r\n                      <StyledTableRow\r\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                        >\r\n                          <TableCell>\tDXC - Expand - Metered 21c</TableCell>\r\n                          <TableCell>Next-Gen Transit using TGW</TableCell>\r\n                          <TableCell>Closed Lost\t</TableCell>\r\n                          <TableCell>USD 10,000.00\t</TableCell>\r\n                          <TableCell>USD 2,000.00</TableCell>\r\n                          <TableCell>11/24/2021</TableCell>\r\n                          <TableCell>Expanded Business</TableCell>\r\n                          <TableCell>AWS Marketplace Public Metered</TableCell>\r\n                          <TableCell><Icon  onClick={handleClickOpen1}>visibility</Icon></TableCell>\r\n                      </StyledTableRow>\r\n                      <StyledTableRow\r\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                        >\r\n                          <TableCell>DXC - Expand - Azure & SAP Expansion</TableCell>\r\n                          <TableCell>Encrypted Transit using AGW</TableCell>\r\n                          <TableCell>Closed Lost\t</TableCell>\r\n                          <TableCell>USD 2,000.00\t</TableCell>\r\n                          <TableCell>USD 2,000.00</TableCell>\r\n                          <TableCell>11/24/2021</TableCell>\r\n                          <TableCell>Expanded Business</TableCell>\r\n                          <TableCell>AWS Marketplace Public Metered</TableCell>\r\n                          <TableCell><Icon  onClick={handleClickOpen1}>visibility</Icon></TableCell>\r\n                      </StyledTableRow>\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </TabPanel>\r\n              <TabPanel value={value} index={2} >\r\n                <TableContainer component={Paper}>\r\n                  <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Case</TableCell>\r\n                        <TableCell >Contact Name\t</TableCell>\r\n                        <TableCell >Subject</TableCell>\r\n                        <TableCell >Priority</TableCell>\r\n                        <TableCell >Date Opened\t</TableCell>\r\n                        <TableCell >Status</TableCell>\r\n                        <TableCell >Owner</TableCell>\r\n                        <TableCell></TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      <StyledTableRow\r\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                        >\r\n                          <TableCell>00005556</TableCell>\r\n                          <TableCell></TableCell>\r\n                          <TableCell>\tAviatrix - Allow IP for outbound</TableCell>\r\n                          <TableCell>Priority 3 (Limited business impact)\t</TableCell>\r\n                          <TableCell>2/27/2020\t\t</TableCell>\r\n                          <TableCell>Open</TableCell>\r\n                          <TableCell>\tKarthik Balachandran</TableCell>\r\n                          <TableCell><Icon>visibility</Icon></TableCell>\r\n                      </StyledTableRow> \r\n                      <StyledTableRow\r\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                        >\r\n                          <TableCell>00005556</TableCell>\r\n                          <TableCell></TableCell>\r\n                          <TableCell>\tAviatrix - Allow IP for outbound</TableCell>\r\n                          <TableCell>Priority 3 (Limited business impact)\t</TableCell>\r\n                          <TableCell>2/27/2020\t\t</TableCell>\r\n                          <TableCell>Open</TableCell>\r\n                          <TableCell>\tKarthik Balachandran</TableCell>\r\n                          <TableCell><Icon>visibility</Icon></TableCell>\r\n                      </StyledTableRow> \r\n                    </TableBody>\r\n                  </Table>\r\n                  </TableContainer>\r\n              </TabPanel>\r\n            </SwipeableViews>\r\n          </Box>\r\n    \r\n        </BlockUi>\r\n        \r\n        <h4>3rd Party Data Enrichment</h4>\r\n        \r\n        <Box sx={{ bgcolor: 'background.paper'}} className=\"  mt-22\">\r\n            <AppBar position=\"static\" color=\"secondary\">\r\n              <Tabs\r\n                value={value2}\r\n                \r\n                onChange={handleChange2}\r\n                indicatorColor=\"secondary\"\r\n                textColor=\"inherit\"\r\n                variant=\"fullWidth\"\r\n                aria-label=\"full width tabs example\"\r\n              >\r\n                <Tab label=\"LeanData\" {...a11yProps(0)} />\r\n                <Tab label=\"ZoomInfo\" {...a11yProps(1)} />\r\n                <Tab label=\"6sense\" {...a11yProps(2)} />\r\n                <Tab label=\"6QA\" {...a11yProps(2)} /> \r\n              </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews \r\n              index={value2}\r\n              onChangeIndex={handleChangeIndex2}\r\n            >\r\n              <TabPanel value={value} index={0} >\r\n                <TableContainer component={Paper}>\r\n                  <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell >Title</TableCell>\r\n                        <TableCell >Email</TableCell>\r\n                        <TableCell >Phone</TableCell>\r\n                        <TableCell ></TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {rows.slice(3).map((row) => (\r\n                        <StyledTableRow\r\n                          key={row.name}\r\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                        >\r\n                          <TableCell>{row.name}</TableCell>\r\n                          <TableCell>{row.title}</TableCell>\r\n                          <TableCell>{row.email}</TableCell>\r\n                          <TableCell>{row.phone}</TableCell>\r\n                          <TableCell><Icon>visibility</Icon></TableCell>\r\n                        </StyledTableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                <Stack className=\"mt-10\" direction=\"row\" spacing={2} justifyContent=\"flex-end\">\r\n                    <Button  variant=\"outlined\" size=\"small\" onClick={handleClickOpen}>View More</Button>\r\n                  </Stack>\r\n              </TabPanel>\r\n              <TabPanel value={value} index={1} >\r\n                Item Two\r\n              </TabPanel>\r\n              <TabPanel value={value} index={2} >\r\n                Item Three\r\n              </TabPanel>\r\n            </SwipeableViews>\r\n          </Box>         \r\n      </div>\r\n\r\n\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={handleClose}\r\n        //TransitionComponent={Transition}\r\n      >\r\n        <AppBar sx={{ position: 'relative' }} color=\"secondary\">\r\n          <Toolbar>\r\n            <Typography sx={{ ml: 2, flex: 1 }} variant=\"h6\" component=\"div\">\r\n              Contact List\r\n            </Typography>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={handleClose}\r\n              aria-label=\"close\"\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n        \r\n        <Paper elevation={1} className=\"section\" style={{height:'100%'}}>\r\n          <Paper elevation={1} className=\"section mt-10 mb-20\">\r\n            \r\n            <Grid container spacing={2}>\r\n              <Grid item md={4} lg={4} xs={12}>\r\n                <TextField defaultValue=\"\" label=\"Search By\" fullWidth variant=\"outlined\"  size=\"small\" />\r\n              </Grid>\r\n              <Grid item md={4} lg={4} xs={12}  >\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                  <InputLabel id=\"label_period\">Status</InputLabel>\r\n                  <Select fullWidth size=\"small\"\r\n                      //onChange={(e:any)=>{setPeriod(e.target.value)}}\r\n                      //value={Period}\r\n                      labelId=\"label_period\"\r\n                      label=\"Status\"\r\n                      >\r\n                      <MenuItem value=\"30\" key=\"active\">Active</MenuItem>\r\n                      <MenuItem value=\"60\">Distabled</MenuItem>\r\n                  </Select>\r\n                </FormControl> \r\n              </Grid> \r\n              <Grid item md={4} lg={4} xs={12}>\r\n                <Button variant=\"contained\" color=\"secondary\" size=\"large\">\r\n                    <Icon>search</Icon>\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n            </Paper>\r\n            <TableContainer component={Paper}>\r\n                  <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell >Title</TableCell>\r\n                        <TableCell >Email</TableCell>\r\n                        <TableCell >Phone</TableCell>\r\n                        <TableCell></TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {rows.map((row) => (\r\n                        <StyledTableRow\r\n                          key={row.name}\r\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                        >\r\n                          <TableCell>{row.name}</TableCell>\r\n                          <TableCell>{row.title}</TableCell>\r\n                          <TableCell>{row.email}</TableCell>\r\n                          <TableCell>{row.phone}</TableCell>\r\n                          <TableCell> <IconButton size=\"small\"  onClick={handleClickOpen1}><Icon>visibility</Icon></IconButton></TableCell>\r\n                        </StyledTableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n            </TableContainer>\r\n            <Stack className=\"mt-10\" direction=\"row\" spacing={2} justifyContent=\"center\">\r\n              <Pagination count={10} color=\"primary\" />\r\n            </Stack>\r\n        </Paper>\r\n      </Dialog>\r\n\r\n\r\n\r\n      <Dialog\r\n        fullScreen\r\n        open={open1}\r\n        onClose={handleClose1}\r\n        //TransitionComponent={Transition}\r\n      >\r\n        <AppBar sx={{ position: 'relative' }} color=\"secondary\">\r\n          <Toolbar>\r\n            <Typography sx={{ ml: 2, flex: 1 }} variant=\"h6\" component=\"div\">\r\n              Contact Detail\r\n            </Typography>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={handleClose1}\r\n              aria-label=\"close\"\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Paper elevation={1} className=\"section mt-10\" style={{height:'100%'}}>\r\n          <Grid container spacing={2}>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Customer\" size=\"small\" label=\"Parent Account\" fullWidth variant=\"standard\" />\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Customer\" size=\"small\" label=\"Type\" fullWidth variant=\"standard\" InputProps={{readOnly: true}} />\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"dxc.com\" size=\"small\" label=\"Website\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"8032109817\" size=\"small\" label=\"Phone\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Business Services\" size=\"small\" label=\"Industry\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Custom Software & IT Services\" size=\"small\" label=\"Sub-Industry\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"134,000\" size=\"small\" label=\"Employees\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"USD 17,729,000,000.00\" size=\"small\" label=\"Annual Revenue\t\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Over $5 bil.\" size=\"small\" label=\"Annual Revenue Band\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Enterprise\" size=\"small\" label=\"Market Segment\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"NA - US Northeast\" size=\"small\" label=\"Territory\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"AWS Marketplace Public Metered\" size=\"small\" label=\"Transaction Type\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Platinum\" size=\"small\" label=\"Support Level\t\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Next-Gen Transit using TGW\" size=\"small\" label=\"Primary Use Case\t\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"Yes\" size=\"small\" label=\"In Production\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n              <TextField defaultValue=\"3/26/2021\" size=\"small\" label=\"Last Won Deal\" fullWidth variant=\"standard\"/>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nconst Filter = (props:any)=>{\r\n\r\n  const [Period,setPeriod] = useState(30);\r\n  const [Customer,setCustomer]:any = useState({});\r\n\r\n  useMemo(() =>{\r\n    props.Search(Period,Customer);\r\n  }, [Period,Customer])\r\n\r\n  useEffect(() => {\r\n      props.Search(Period,Customer);\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2} justifyContent=\"flex-end\">\r\n        <Grid item md={8} lg={8} xs={12}>\r\n          \r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\n/*\r\nconst Filter = (props:any)=>{\r\n\r\n    const [Period,setPeriod] = useState(30);\r\n    const [Customer,setCustomer]:any = useState({});\r\n\r\n    useMemo(() =>{\r\n      props.Search(Period,Customer);\r\n    }, [Period,Customer])\r\n\r\n    useEffect(() => {\r\n        props.Search(Period,Customer);\r\n    }, [])\r\n\r\n    return (\r\n      <>\r\n        <Grid container spacing={2} justify=\"flex-end\">\r\n          <Grid item md={6} lg={6} xs={12}  >\r\n            <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n              <InputLabel id=\"label_period\">Status</InputLabel>\r\n              <Select fullWidth\r\n                  onChange={(e:any)=>{setPeriod(e.target.value)}}\r\n                  value={Period}\r\n                  labelId=\"label_period\"\r\n                  label=\"Usage since\"\r\n                  >\r\n                  <MenuItem value=\"30\" key=\"active\">Last 30 days</MenuItem>\r\n                  <MenuItem value=\"60\">Last 60 days</MenuItem>\r\n                  <MenuItem value=\"90\">Last 90 days</MenuItem>\r\n              </Select>\r\n            </FormControl> \r\n          </Grid> \r\n          <Grid item md={6} lg={6} xs={12}>\r\n            <CustomerDropdown onSelect={(customer:any)=>{ setCustomer(customer) }} />\r\n          </Grid>\r\n        </Grid>\r\n      </>\r\n    )\r\n}\r\n*/\r\n \r\n\r\nconst Graph4 = (props:any)=>{\r\n  \r\n  let title = '';\r\n  let series:any = [];\r\n  \r\n  let colors = ['#5b1547','#93063e','#c90036','#ff5626','#ffc400','#5b1547','#93063e','#c90036','#ff5626','#ffc400']\r\n\r\n  if(props.data && props.data){\r\n\r\n    if(props.data.total)\r\n      title = `Total Billing Amount <br/> ${u.format.currency(props.data.total)}`;\r\n\r\n    let index = 0;\r\n    for(let lineItem of props.data.breakdown){\r\n        series.push({\r\n          color:colors[index],\r\n          name:lineItem[0],\r\n          data:[lineItem[1].subtotal]\r\n        });\r\n        index++;\r\n      }\r\n  }\r\n  \r\n  const options = {\r\n    chart: {\r\n      type: 'column'\r\n  },\r\n  title: {\r\n      text: 'Billing By CSP (Month to Date)'\r\n  },\r\n  subtitle: {\r\n      //text: 'Click the columns to view versions. Source: <a href=\"http://statcounter.com\" target=\"_blank\">statcounter.com</a>'\r\n  },\r\n  accessibility: {\r\n      announceNewData: {\r\n          enabled: true\r\n      }\r\n  },\r\n  xAxis: {\r\n      type: 'category'\r\n  },\r\n  yAxis: {\r\n      title: {\r\n          text: 'Billing'\r\n      }\r\n\r\n  },\r\n  legend: {\r\n      enabled: false\r\n  },\r\n  plotOptions: {\r\n      series: {\r\n          borderWidth: 0,\r\n          dataLabels: {\r\n              enabled: true,\r\n              format: '{point.y:.1f}'\r\n          }\r\n      }\r\n  },\r\n\r\n  tooltip: {\r\n      headerFormat: '<span style=\"font-size:11px\">{series.name}</span><br>',\r\n      pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}%</b> of total<br/>'\r\n  },\r\n\r\n  series: [\r\n      {\r\n          name: \"Account Billing\",\r\n          colorByPoint: true,\r\n          data: [\r\n              {\r\n                  name: \"AWS\",\r\n                  y: 662.74,\r\n                  color:colors[0]\r\n              },\r\n              {\r\n                  name: \"Azure\",\r\n                  y: 410.57,\r\n                  color:colors[1]\r\n              },\r\n              {\r\n                  name: \"GCP\",\r\n                  y: 267.23,\r\n                  color:colors[2]\r\n              },\r\n              {\r\n                  name: \"OCI\",\r\n                  y: 75.58,\r\n                  color:colors[3]\r\n              }\r\n          ]\r\n      }\r\n  ]  \r\n};\r\n  \r\n  return(\r\n    <Paper elevation={1} className=\"section mt-10\">\r\n      <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </Paper>\r\n  )\r\n}\r\n\r\n\r\nconst Graph6 = (props:any)=>{\r\n  \r\n  let title = '';\r\n  let series:any = [];\r\n  \r\n  let colors = ['#5b1547','#93063e','#c90036','#ff5626','#ffc400','#5b1547','#93063e','#c90036','#ff5626','#ffc400']\r\n\r\n   \r\n  const options = {\r\n    chart: {\r\n      type: 'area'\r\n    },\r\n    accessibility: {\r\n        //description: 'Image description: An area chart compares the nuclear stockpiles of the USA and the USSR/Russia between 1945 and 2017. The number of nuclear weapons is plotted on the Y-axis and the years on the X-axis. The chart is interactive, and the year-on-year stockpile levels can be traced for each country. The US has a stockpile of 6 nuclear weapons at the dawn of the nuclear age in 1945. This number has gradually increased to 369 by 1950 when the USSR enters the arms race with 6 weapons. At this point, the US starts to rapidly build its stockpile culminating in 32,040 warheads by 1966 compared to the USSR’s 7,089. From this peak in 1966, the US stockpile gradually decreases as the USSR’s stockpile expands. By 1978 the USSR has closed the nuclear gap at 25,393. The USSR stockpile continues to grow until it reaches a peak of 45,000 in 1986 compared to the US arsenal of 24,401. From 1986, the nuclear stockpiles of both countries start to fall. By 2000, the numbers have fallen to 10,577 and 21,000 for the US and Russia, respectively. The decreases continue until 2017 at which point the US holds 4,018 weapons compared to Russia’s 4,500.'\r\n    },\r\n    title: {\r\n        text: 'Billing By CSP (Year to Date Trend)'\r\n    },\r\n    subtitle: {\r\n        \r\n    },\r\n    xAxis: {\r\n      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep']\r\n    },\r\n    yAxis: {\r\n        title: {\r\n            text: 'Monthly Billing'\r\n        },\r\n        labels: {\r\n            formatter: function (o) {\r\n                return o.value / 1000 + 'k';\r\n            }\r\n        }\r\n    },\r\n    tooltip: {\r\n        pointFormat: '{series.name}  <b>{point.y:,.0f}</b><br/> '\r\n    },\r\n    plotOptions: {\r\n        area: {\r\n            \r\n            marker: {\r\n                enabled: false,\r\n                symbol: 'circle',\r\n                radius: 2,\r\n                states: {\r\n                    hover: {\r\n                        enabled: true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    series: [{\r\n        name: 'AWS',\r\n        data: [\r\n          2901, 2245, 2910, 2279, 2393, 2084, 2646, 2514, 2711\r\n        ],\r\n        color:colors[0]\r\n    }, {\r\n        name: 'Azure',\r\n        data: [1309, 1488, 1371, 1346, 1282, 1407, 1290, 1224, 1401\r\n        ],\r\n        color:colors[1]\r\n    },\r\n    {\r\n      name: 'GCP',\r\n      data: [ \r\n        795, 707, 670, 892, 731, 943, 702, 967, 825 ],\r\n        color:colors[2]\r\n\r\n  },\r\n    {\r\n      name: 'OCI',\r\n      data: [ \r\n        133, 103, 221, 439, 142, 129, 498, 171, 231 ],\r\n        color:colors[3]\r\n  }\r\n  ]\r\n\r\n};\r\n  \r\n  return(\r\n    <Paper elevation={1} className=\"section mt-10\">\r\n      <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </Paper>\r\n  )\r\n}\r\n \r\nconst Graph5 = (props:any)=>{\r\n  \r\n  let title = '';\r\n  let series:any = [];\r\n  \r\n  let colors = ['#5b1547','#93063e','#c90036','#ff5626','#ffc400','#5b1547','#93063e','#c90036','#ff5626','#ffc400']\r\n \r\n  \r\n  const options = {\r\n    chart: {\r\n      type: 'column'\r\n  },\r\n  title: {\r\n      text: 'Billing By Accounts (Month to Date)'\r\n  },\r\n  subtitle: {\r\n      //text: 'Click the columns to view versions. Source: <a href=\"http://statcounter.com\" target=\"_blank\">statcounter.com</a>'\r\n  },\r\n  accessibility: {\r\n      announceNewData: {\r\n          enabled: true\r\n      }\r\n  },\r\n  xAxis: {\r\n      type: 'category'\r\n  },\r\n  yAxis: {\r\n      title: {\r\n          text: 'Billing'\r\n      }\r\n\r\n  },\r\n  legend: {\r\n      enabled: false\r\n  },\r\n  plotOptions: {\r\n      series: {\r\n          borderWidth: 0,\r\n          dataLabels: {\r\n              enabled: true,\r\n              format: '{point.y:.1f}'\r\n          }\r\n      }\r\n  },\r\n\r\n  tooltip: {\r\n      headerFormat: '<span style=\"font-size:11px\">{series.name}</span><br>',\r\n      pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}%</b> of total<br/>'\r\n  },\r\n\r\n  series: [\r\n      {\r\n          name: \"Account Billing\",\r\n          colorByPoint: true,\r\n          data: [\r\n              {\r\n                  name: \"Marketing\",\r\n                  y: 362.74,\r\n                  color:colors[0]\r\n              },\r\n              {\r\n                  name: \"Engineering\",\r\n                  y: 310.57,\r\n                  color:colors[1]\r\n              },\r\n              {\r\n                  name: \"Sales\",\r\n                  y: 217.23,\r\n                  color:colors[2]\r\n              },\r\n              {\r\n                  name: \"Operations\",\r\n                  y: 115.58,\r\n                  color:colors[3]\r\n              },\r\n              {\r\n                  name: \"Support\",\r\n                  y: 104.02,\r\n                  color:colors[4]\r\n              },\r\n              {\r\n                  name: \"IT\",\r\n                  y: 16.92,\r\n                  color:colors[5]\r\n              },\r\n              {\r\n                  name: \"Other\",\r\n                  y: 17.62,\r\n                  color:colors[6]\r\n              }\r\n          ]\r\n      }\r\n  ]  \r\n};\r\n  \r\n  return(\r\n    <Paper elevation={1} className=\"section mt-10\">\r\n      <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </Paper>\r\n  )\r\n}\r\n\r\n\r\nconst Graph1 = (props:any)=>{\r\n  \r\n  let title = '';\r\n  let series:any = [];\r\n  \r\n  let colors = ['#5b1547','#93063e','#c90036','#ff5626','#ffc400','#5b1547','#93063e','#c90036','#ff5626','#ffc400']\r\n\r\n  if(props.data && props.data){\r\n\r\n    if(props.data.total)\r\n      title = `Total Billing Amount <br/> ${u.format.currency(props.data.total)}`;\r\n\r\n    let index = 0;\r\n    for(let lineItem of props.data.breakdown){\r\n        series.push({\r\n          color:colors[index],\r\n          name:lineItem[0],\r\n          data:[lineItem[1].subtotal]\r\n        });\r\n        index++;\r\n      }\r\n  }\r\n  \r\n  const options = {\r\n    chart: {\r\n        type: 'column'\r\n    },\r\n    title: {\r\n        text: 'Monthly Billing (By Services)'\r\n    },\r\n    subtitle: {\r\n        //text: 'Source: WorldClimate.com'\r\n    },\r\n    xAxis: {\r\n        categories: [\r\n            'Jan',\r\n            'Feb',\r\n            'Mar',\r\n            'Apr',\r\n            'May',\r\n            'Jun',\r\n            'Jul',\r\n            'Aug',\r\n            'Sep',\r\n            'Oct',\r\n            'Nov',\r\n            'Dec'\r\n        ],\r\n        crosshair: true\r\n    },\r\n    yAxis: {\r\n        min: 0,\r\n        title: {\r\n            text: 'No of services'\r\n        }\r\n    },\r\n    tooltip: {\r\n        headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n        pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\r\n            '<td style=\"padding:0\"><b>{point.y:.1f}</b></td></tr>',\r\n        footerFormat: '</table>',\r\n        shared: true,\r\n        useHTML: true\r\n    },\r\n    plotOptions: {\r\n        column: {\r\n            pointPadding: 0.2,\r\n            borderWidth: 0\r\n        }\r\n    },\r\n    series: [{\r\n        name: 'EC2',\r\n        data: [49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4],\r\n        color:colors[0]\r\n\r\n    }, {\r\n        name: 'Lambda',\r\n        data: [83.6, 78.8, 98.5, 93.4, 106.0, 84.5, 105.0, 104.3, 91.2, 83.5, 106.6, 92.3],\r\n        color:colors[1]\r\n    }, {\r\n        name: 'Elastic Search',\r\n        data: [48.9, 38.8, 39.3, 41.4, 47.0, 48.3, 59.0, 59.6, 52.4, 65.2, 59.3, 51.2],\r\n        color:colors[2]\r\n\r\n    }, {\r\n        name: 'LightSail',\r\n        data: [42.4, 33.2, 34.5, 39.7, 52.6, 75.5, 57.4, 60.4, 47.6, 39.1, 46.8, 51.1],\r\n        color:colors[3]\r\n\r\n    }]\r\n};\r\n  \r\n  return(\r\n    <Paper elevation={1} className=\"section mt-10\">\r\n      <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </Paper>\r\n  )\r\n}\r\n\r\nconst Graph2 = (props:any)=>{\r\n  \r\n  let title = '';\r\n  let series:any = [];\r\n  \r\n  let colors = ['#5b1547','#93063e','#c90036','#ff5626','#ffc400','#5b1547','#93063e','#c90036','#ff5626','#ffc400']\r\n \r\n  const options = {\r\n     \r\n    chart: {\r\n      type: 'area'\r\n  },\r\n  title: {\r\n      text: 'Billing by Tags (Month to Date)'\r\n  },\r\n  subtitle: {\r\n      //text: 'Source: Wikipedia.org'\r\n  },\r\n  accessibility: {\r\n      point: {\r\n          //valueDescriptionFormat: '{index}. {point.category}, {point.y:,.0f} millions, {point.percentage:.1f}%.'\r\n      }\r\n  },\r\n  xAxis: {\r\n      categories: ['Jan 2021', 'Feb 2021', 'Mar 2021', 'Apr 2021', 'May 2021', 'Jun 2021', 'Jul 2021'],\r\n      tickmarkPlacement: 'on',\r\n      title: {\r\n          enabled: false\r\n      }\r\n  },\r\n  yAxis: {\r\n      labels: {\r\n          format: '{value}%'\r\n      },\r\n      title: {\r\n          enabled: false\r\n      }\r\n  },\r\n  tooltip: {\r\n      pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.percentage:.1f}%</b> ({point.y:,.0f} millions)<br/>',\r\n      split: true\r\n  },\r\n  plotOptions: {\r\n      area: {\r\n          stacking: 'percent',\r\n          lineColor: '#ffffff',\r\n          lineWidth: 1,\r\n          marker: {\r\n              lineWidth: 1,\r\n              lineColor: '#ffffff'\r\n          }\r\n      }\r\n  },\r\n  series: [{\r\n      name: 'APIs',\r\n      data: [502, 635, 809, 947, 1402, 3634, 5268],\r\n      color:colors[0],\r\n  }, {\r\n      name: 'Backend Services',\r\n      data: [106, 107, 111, 133, 221, 767, 1766],\r\n      color:colors[1],\r\n  }, {\r\n      name: 'Machine Learning',\r\n      data: [163, 203, 276, 408, 547, 729, 628],\r\n      color:colors[2],\r\n  }, {\r\n      name: 'Container',\r\n      data: [18, 31, 54, 156, 339, 818, 1201],\r\n      color:colors[3],\r\n  }, {\r\n      name: 'Batch Services',\r\n      data: [2, 2, 2, 6, 13, 30, 46],\r\n      color:colors[4],\r\n  }]\r\n  } ;\r\n  \r\n  return(\r\n    <Paper elevation={1} className=\"section mt-10\">\r\n      <HighchartsReact highcharts={Highcharts} options={options}  />\r\n    </Paper>\r\n  )\r\n}\r\n\r\n\r\nconst Graph3 = (props:any)=>{\r\n  \r\n  let title = '';\r\n  let series:any = [];\r\n  \r\n  let colors = ['#5b1547','#93063e','#c90036','#ff5626','#ffc400','#5b1547','#93063e','#c90036','#ff5626','#ffc400']\r\n \r\n  const options = {\r\n    chart: {\r\n      plotBackgroundColor: null,\r\n      plotBorderWidth: null,\r\n      plotShadow: false,\r\n      type: 'pie'\r\n  },\r\n  title: {\r\n      text: 'Billing by Regions (Month to Date)'\r\n  },\r\n  tooltip: {\r\n      pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\r\n  },\r\n  accessibility: {\r\n      point: {\r\n          valueSuffix: '%'\r\n      }\r\n  },\r\n  plotOptions: {\r\n      pie: {\r\n          allowPointSelect: true,\r\n          cursor: 'pointer',\r\n          dataLabels: {\r\n              enabled: true,\r\n              format: '<b>{point.name}</b>: {point.percentage:.1f} %'\r\n          }\r\n      }\r\n  },\r\n  series: [{\r\n      name: 'Billing',\r\n      colorByPoint: true,\r\n      data: [{\r\n          name: 'Asia Pacific (Osaka)',\r\n          y: 61.41,\r\n          sliced: true,\r\n          selected: true,\r\n          color:colors[0]\r\n      }, {\r\n          name: 'Asia Pacific (Mumbai)',\r\n          y: 11.84,\r\n          color:colors[1]\r\n      }, {\r\n          name: 'Asia Pacific (Hong Kong)',\r\n          y: 10.85,\r\n          color:colors[2]\r\n      }, {\r\n          name: 'Africa (Cape Town)',\r\n          y: 4.67,\r\n          color:colors[3]\r\n      }, {\r\n          name: 'US West (Oregon)',\r\n          y: 4.18,\r\n          color:colors[4]\r\n      } ]\r\n  }]\r\n  }\r\n \r\n  \r\n  return(\r\n    <Paper elevation={1} className=\"section mt-10\">\r\n      <HighchartsReact highcharts={Highcharts} options={options}  />\r\n    </Paper>\r\n  )\r\n}\r\n \r\nexport default AccountExplorer;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderTracking\\OrderDetail.tsx",["1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159"],"import React, { useEffect } from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\nimport { Button, Divider, Paper, Stack, Grid, TextField, FormControl, InputLabel, Select, MenuItem, Chip, LinearProgress } from \"@mui/material\";\r\nimport Typography from '@mui/material/Typography';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { useParams } from 'react-router-dom';\r\nimport ModalDialog from \"../../../components/ModalDialog\";\r\nimport { useState } from 'react';\r\nimport orderService from '../../../services/supplierportal';\r\nimport { useSelector } from 'react-redux';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { Document, Page } from 'react-pdf';\r\n\r\n\r\nconst steps = ['Ordered', 'Shipped', 'Received', 'Fulfilled', 'Returned'];\r\n\r\n\r\nexport default function OrderDetail() {\r\n\r\n  const param = useParams();\r\n  const [loading, setLoading] = useState<boolean>(false)\r\n  const [numPages, setNumPages] = useState(null);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n\r\n  const [pdfFile, setPdfFile] = useState<any>('')\r\n  function onDocumentLoadSuccess({ numPages }) {\r\n    setNumPages(numPages);\r\n  }\r\n  \r\n  const columns = [\r\n    { field: 'CloudN', headerName: 'CloudN Appliance Interfaces', width: 210, editable: true },\r\n    { field: 'Interface', headerName: 'Interface Ip Address', type: 'number', width: 150, editable: true },\r\n    { field: 'Subnet', headerName: 'Subnet Mask', width: 100, type: 'number', editable: true },\r\n    { field: 'Default', headerName: 'Default Gateway', width: 120, type: 'number', editable: true },\r\n    { field: 'MTU', headerName: 'MTU Size', width: 80, type: 'number', editable: true },\r\n    { field: 'Primary', headerName: 'Primary DNS Server', width: 145, type: 'number', editable: true },\r\n    { field: 'Secondary', headerName: 'Secondary DNS Server', width: 160, type: 'number', editable: true },\r\n    { field: 'Note', headerName: 'Note', type: 'number', width: 40, editable: true },\r\n    { field: 'Shipping', headerName: 'Shipping Title', type: 'number', width: 40, editable: true },\r\n  ];\r\n\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const [status, setStatus] = useState('Ordered');\r\n  const [files, setFiles] = useState<any>([]);\r\n  const [fileName, setFileName] = useState(\"\");\r\n  const [orderInvoices, setOrderInvoices] = useState<any>([])\r\n  const [deletedInvoices, setDeletedInvoices] = useState<any>([])\r\n  const [trackingData, setTrackingData] = useState<any>({\r\n    Status: '',\r\n    ShippingDate: '',\r\n    TrackingInfo: '',\r\n    ShippingTracking: '',\r\n    SerialNo: ''\r\n  })\r\n  const [orderData, setOrderData] = useState({\r\n    AccountName: '',\r\n    ContactName: '',\r\n    AccountPhone: '',\r\n    AccountEmail: '',\r\n    ContactID: '',\r\n    ContactPhone: '',\r\n    ContactEmail: '',\r\n  });\r\n  const [shippingData, setShippingData] = useState({\r\n    Title: '',\r\n    DeliverTo: '',\r\n    Address: '',\r\n    Phone: '',\r\n    Email: '',\r\n  });\r\n  const [applianceData, setApplianceData] = useState([]);\r\n  const [optionalData, setOptionalData] = useState([]);\r\n  const UserRole = useSelector((state: any) =>\r\n    state.user ? state.user.role : null\r\n  );\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n  const init = () => {\r\n    setFiles([])\r\n    getOrderData()\r\n    getOrderTracking()\r\n  }\r\n  useEffect(() => {\r\n    init()\r\n  }, [])\r\n\r\n  const getFileObjectApi = async (fileInp) => {\r\n    let res = await orderService.orders.getFileObject(fileInp)\r\n    setPdfFile(res.data)\r\n  }\r\n  const handleFileObjectClick = (fileData) => {\r\n    alert(\"IN\")\r\n    getFileObjectApi(fileData)\r\n\r\n  }\r\n  const getOrderTracking = async () => {\r\n    let res: any;\r\n    if (UserRole === 'Admin' || UserRole === 'Supplier Admin') {\r\n      res = await orderService.orders.getOrderTracking(param)\r\n    } else if (UserRole === 'Supplier') {\r\n      res = await orderService.orders.getOrderTracking(param)\r\n    }\r\n    if (!res.success) {\r\n      window.snakAlert.error(res.message);\r\n    } else {\r\n      if (res.success) {\r\n        setTrackingData(res.data.orderTracking)\r\n        setStatus(res.data?.orderTracking.Status);\r\n        setFileName(res.data?.orderInvoice?.Image);\r\n        \r\n        let data = res.data?.orderInvoice.map(el => {\r\n          \r\n          return  {\r\n            name: el.File.split('_')[1],\r\n            File: el.File,\r\n            Id: el.InvoiceID,\r\n            Key: el.Key\r\n          }\r\n        })\r\n        setOrderInvoices(data)  \r\n        \r\n        if (res.data?.orderTracking.Status == 'Ordered') setActiveStep(0)\r\n        if (res.data?.orderTracking.Status == 'Shipped') setActiveStep(1)\r\n        if (res.data?.orderTracking.Status == 'Received') setActiveStep(2)\r\n        if (res.data?.orderTracking.Status == 'Fulfilled') setActiveStep(3)\r\n        if (res.data?.orderTracking.Status == 'Returned') setActiveStep(4)\r\n\r\n      } else {\r\n        window.snakAlert.error(res.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleChangeStatus = (e: any) => {\r\n    setStatus(e.target.value);\r\n    setTrackingData({ ...trackingData, Status: e.target.value });\r\n  }\r\n\r\n  const saveFile = (e) => {\r\n    setFiles([...files, ...e.target.files])\r\n  };\r\n  \r\n  const updateOrderTracking = async () => {\r\n    setLoading(true)\r\n    let res: any;\r\n    const formData = new FormData();\r\n    const obj={...trackingData};\r\n    for (let i = 0; i < files.length; i++) {\r\n      formData.append(`files`, files[i])\r\n    }\r\n    formData.append(\"fileName\", fileName);\r\n    formData.append(\"type\", \"pdf\");\r\n    formData.append(\"OrderID\", param.id);\r\n    formData.append(\"TrackingData\", JSON.stringify(obj));\r\n    var newData=formData.get(\"TrackingData\");\r\n    let payload = formData;\r\n    if (UserRole === 'Admin' || UserRole === 'Supplier Admin') {\r\n      res = await orderService.orders.updateOrderTracking(payload)\r\n    } else if (UserRole === 'Supplier') {\r\n      res = await orderService.orders.updateOrderTracking(payload)\r\n    }\r\n    if (!res.success) {\r\n      window.snakAlert.error(res.message);\r\n    } else {\r\n      if (res.success) {\r\n        setTrackingData(res.data?.updatedTrackingOrder)\r\n        if (res.data?.updatedTrackingOrder.Status == 'Ordered') setActiveStep(0)\r\n        if (res.data?.updatedTrackingOrder.Status == 'Shipped') setActiveStep(1)\r\n        if (res.data?.updatedTrackingOrder.Status == 'Received') setActiveStep(2)\r\n        if (res.data?.updatedTrackingOrder.Status == 'Fulfilled') setActiveStep(3)\r\n        if (res.data?.updatedTrackingOrder.Status == 'Returned') setActiveStep(4)\r\n        window.snakAlert.success(\"Order status updated successfully\")\r\n      } else {\r\n        window.snakAlert.error(res.message);\r\n      }\r\n    }\r\n\r\n    let deletePayload = {\r\n      InvoiceIds:deletedInvoices\r\n    }\r\n    // Remove Invoices\r\n    res = await orderService.orders.deleteInvoices(deletePayload)\r\n    setLoading(false)\r\n    init()\r\n\r\n  }\r\n\r\n  const getOrderData = async () => {\r\n    let res: any;\r\n    res = await orderService.orders.getOrderDetails(param)\r\n    if (!res.success) {\r\n      window.snakAlert.error(res.message);\r\n    } else {\r\n      if (res.success) {\r\n        setData(res.data)\r\n      } else {\r\n        window.snakAlert.error(res.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  const setData = (data: any) => {\r\n    if (data) {\r\n      setOrderData(\r\n        {\r\n          AccountName: data?.order?.AccountName || '',\r\n          ContactName: data?.order?.ContactName || '',\r\n          AccountPhone: data?.order?.AccountPhone || '',\r\n          AccountEmail: data?.order?.AccountEmail || '',\r\n          ContactID: data?.order?.ContactID || '',\r\n          ContactPhone: data?.order?.ContactPhone || '',\r\n          ContactEmail: data?.order?.ContactEmail || '',\r\n        },\r\n      );\r\n      setShippingData(\r\n        {\r\n          Title: data?.orderShipments[0]?.Title || '',\r\n          DeliverTo: data?.orderShipments[0]?.DeliverTo || '',\r\n          Address: data?.orderShipments[0]?.Address || '',\r\n          Phone: data?.orderShipments[0]?.Phone || '',\r\n          Email: data?.orderShipments[0]?.Email || '',\r\n        },\r\n      );\r\n\r\n      setApplianceData(\r\n        data?.orderAppliance\r\n      );\r\n\r\n      setOptionalData(\r\n        data?.orderOptional\r\n      );\r\n    } else {\r\n      setOrderData({\r\n        AccountName: '',\r\n        ContactName: '',\r\n        AccountPhone: '',\r\n        AccountEmail: '',\r\n        ContactID: '',\r\n        ContactPhone: '',\r\n        ContactEmail: ''\r\n      });\r\n      setShippingData({\r\n        Title: '',\r\n        DeliverTo: '',\r\n        Address: '',\r\n        Phone: '',\r\n        Email: '',\r\n      });\r\n      setApplianceData([]);\r\n      setOptionalData([]);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\"FU\", files)\r\n  }, [files])\r\n  \r\n \r\n  const handleDelete = (i) => {\r\n    let temp = [...files]\r\n    temp.splice(i, 1)\r\n    setFiles(temp)\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\"FILES!@#\", files)\r\n  }, [files])\r\n  \r\n\r\n  const handleSaveFileDelete = (i) => {\r\n    let temp = [...orderInvoices]\r\n    let deletedItem = temp.splice(i, 1)\r\n    setDeletedInvoices([...deletedInvoices, deletedItem[0]])\r\n    setOrderInvoices(temp)\r\n  }\r\n  // const uploadFile = async () => {\r\n  //   let res: any;\r\n  //   const formData = new FormData();\r\n  //   formData.append(\"file\", file);\r\n  //   formData.append(\"fileName\", fileName);\r\n  //   formData.append(\"type\", \"image\");\r\n  //   formData.append(\"OrderID\", param.id);\r\n  //   try {\r\n  //     res = await orderService.orders.uploadImage(formData);\r\n  //     console.log(res);\r\n  //   } catch (ex) {\r\n  //     console.log(ex);\r\n  //   }\r\n  // };\r\n  return (\r\n    <>\r\n      <div className='page-content'>\r\n        <h2>Track Order <span>Track your order</span></h2>\r\n        <Divider /><br />\r\n\r\n        <Box sx={{ width: '100%' }}>\r\n          <Stepper activeStep={activeStep}>\r\n            {steps.map((label, index) => {\r\n              return (\r\n                <Step key={label}>\r\n                  <StepLabel>{label}</StepLabel>\r\n                </Step>\r\n              );\r\n            })}\r\n          </Stepper>\r\n          {activeStep === steps.length ? (\r\n            <React.Fragment>\r\n              <Typography sx={{ mt: 2, mb: 1 }}>\r\n                All steps completed - you&apos;re finished\r\n              </Typography>\r\n              <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\r\n                <Box sx={{ flex: '1 1 auto' }} />\r\n                <Button onClick={handleReset}>Reset</Button>\r\n              </Box>\r\n            </React.Fragment>\r\n          ) : (\r\n            <React.Fragment>\r\n              <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\r\n\r\n              </Box>\r\n            </React.Fragment>\r\n          )}\r\n        </Box>\r\n\r\n\r\n        <ValidatorForm onSubmit={updateOrderTracking} onError={errors => {\r\n          console.log(errors)\r\n        }}>\r\n\r\n\r\n          <h4>Order Tracking</h4>\r\n          <Paper elevation={1} className=\"section mt-22\">\r\n            <Grid container spacing={6}>\r\n              <Grid item md={6} xs={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Status</InputLabel>\r\n                  <Select\r\n                    value={status}\r\n                    label=\"Status\"\r\n                    size=\"small\"\r\n                    onChange={handleChangeStatus}\r\n                  >\r\n                    <MenuItem value={'Ordered'}>Ordered</MenuItem>\r\n                    <MenuItem value={'Shipped'}>Shipped</MenuItem>\r\n                    <MenuItem value={'Received'}>Received</MenuItem>\r\n                    <MenuItem value={'Fulfilled'}>Fulfilled</MenuItem>\r\n                    <MenuItem value={'Returned'}>Returned</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField type=\"date\" size=\"small\" id=\"full-width-text-field\" fullWidth onChange={(e) => setTrackingData({ ...trackingData, ShippingDate: e.target.value })} value={trackingData?.ShippingDate} />\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Tracking Info\" fullWidth onChange={(e) => setTrackingData({ ...trackingData, TrackingInfo: e.target.value })} value={trackingData?.TrackingInfo} />\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Shipping Tracking\" fullWidth onChange={(e) => setTrackingData({ ...trackingData, ShippingTracking: e.target.value })} value={trackingData?.ShippingTracking} />\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Serial No\" fullWidth onChange={(e) => setTrackingData({ ...trackingData, SerialNo: e.target.value })} value={trackingData?.SerialNo} />\r\n              </Grid>\r\n            </Grid><br />\r\n\r\n          </Paper>\r\n\r\n          <h4>Account Information</h4>\r\n          <Paper elevation={1} className=\"section mt-22\">\r\n            <Grid container spacing={6}>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Account Name\" fullWidth value={orderData?.AccountName}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }} />\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Contact Name\" fullWidth value={orderData?.ContactName}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }} />\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Phone\" fullWidth value={orderData?.ContactPhone}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }} />\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Email\" fullWidth value={orderData?.ContactEmail}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }} />\r\n              </Grid>\r\n            </Grid><br />\r\n          </Paper>\r\n\r\n          <h4>Contact Information</h4>\r\n          <Paper elevation={1} className=\"section mt-22\">\r\n            <Grid container spacing={6}>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Address\" fullWidth value={orderData?.AccountName}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }} />\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Phone\" fullWidth value={orderData?.ContactPhone}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }} />\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Email\" fullWidth value={orderData?.ContactEmail}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }} />\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Website\" fullWidth value={orderData?.ContactEmail}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }} />\r\n              </Grid>\r\n            </Grid><br />\r\n          </Paper>\r\n\r\n          <h4>Shipping Information</h4>\r\n          <Paper elevation={1} className=\"section mt-22\">\r\n            <Grid container spacing={6}>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Title\" fullWidth value={shippingData?.Title}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }} />\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Deliver To\" fullWidth value={shippingData?.DeliverTo}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }} />\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Address\" fullWidth value={shippingData?.Address}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }} />\r\n              </Grid>\r\n              <Grid item md={6} xs={6}>\r\n                <TextField size=\"small\" id=\"full-width-text-field\" label=\"Phone\" fullWidth value=\"mywebsite\"\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }} />\r\n              </Grid>\r\n            </Grid><br />\r\n\r\n          </Paper>\r\n\r\n          <h4>Appliance Settings</h4>\r\n          <Paper elevation={1} className=\"section mt-22\">\r\n            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>{columns[0].headerName}</TableCell>\r\n                  <TableCell>{columns[1].headerName}</TableCell>\r\n                  <TableCell>{columns[2].headerName}</TableCell>\r\n                  <TableCell>{columns[3].headerName}</TableCell>\r\n                  <TableCell>{columns[4].headerName}</TableCell>\r\n                  <TableCell>{columns[5].headerName}</TableCell>\r\n                  <TableCell>{columns[6].headerName}</TableCell>\r\n                  <TableCell>{columns[7].headerName}</TableCell>\r\n                  <TableCell>{columns[8].headerName}</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {applianceData?.map((row: any, index) => (\r\n                  <TableRow\r\n                    key={row?.ApplianceID}\r\n                    sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                  >\r\n                    {/* <TableCell component=\"th\" scope=\"row\">\r\n                      {row.CloudN}\r\n                    </TableCell> */}\r\n                    <TableCell>{row?.Interface}</TableCell>\r\n                    <TableCell>{row?.InterfaceIp}</TableCell>\r\n                    <TableCell>{row?.Subnet}</TableCell>\r\n                    <TableCell>{row?.DefaultGateway}</TableCell>\r\n                    <TableCell>{row?.MTUSize}</TableCell>\r\n                    <TableCell>{row?.PrimaryDNS}</TableCell>\r\n                    <TableCell>{row?.SecondaryDNS}</TableCell>\r\n                    <TableCell>{row?.Note}</TableCell>\r\n                    <TableCell>{row?.ShippingTitle}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n            <ModalDialog\r\n            />\r\n            <Divider />\r\n            <h4>Optional Information</h4>\r\n            <Paper elevation={1} className=\"section mt-22\">\r\n              <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Brand/Model</TableCell>\r\n                    <TableCell>Port Speed</TableCell>\r\n                    <TableCell>Supported MTU size</TableCell>\r\n                    <TableCell>SFP+,SPF module or DAC</TableCell>\r\n                    <TableCell>Cable Type</TableCell>\r\n                    <TableCell>Cable Length</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n\r\n                  {\r\n                    optionalData?.map((row: any) => (\r\n                      <TableRow key={row?.InfoID}\r\n                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                      >\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {row?.Brand}\r\n                        </TableCell>\r\n                        <TableCell>{row?.PortSpeed}</TableCell>\r\n                        <TableCell>{row?.SupportedMTUSize}</TableCell>\r\n                        <TableCell>{row?.SFP}</TableCell>\r\n                        <TableCell>{row?.CableType}</TableCell>\r\n                        <TableCell>{row?.CableLength}</TableCell>\r\n                      </TableRow>\r\n                    )\r\n\r\n                    )\r\n                  }\r\n\r\n                </TableBody>\r\n              </Table>\r\n              <ModalDialog\r\n              />\r\n            </Paper>\r\n          </Paper>\r\n          <br></br>\r\n                  {fileName ?  <h4>Update Invoice:</h4>: <h4>Upload Invoice</h4>}\r\n\r\n          <Paper elevation={1} className=\"section mt-22\">\r\n          <Stack>\r\n            <Grid container spacing={1}>\r\n                <>\r\n                <Grid item md={12} xs={12}>\r\n                <Button variant=\"contained\" component=\"label\" sx={{m: 4}} color=\"primary\">\r\n                  Upload Files\r\n                  <input type=\"file\" hidden multiple id=\"full-width-text-field\" onChange={saveFile}/>\r\n                </Button>\r\n                <Divider />\r\n\r\n                  \r\n                <div>\r\n                  {loading ? <LinearProgress /> :  <>\r\n                    {orderInvoices?.map((file, i) => \r\n                      <Chip\r\n                      // onClick={() => handleFileObjectClick(file)}\r\n                        sx={{m: 2}}\r\n                        key={i}\r\n                        label={file?.name}\r\n                        variant=\"outlined\"\r\n                        onDelete={() => handleSaveFileDelete(i)}\r\n                    />)}\r\n                    \r\n                    {files?.map((file, i) => \r\n                      <Chip\r\n                        key={i}\r\n                        sx={{m: 2}}\r\n                        label={file?.name}\r\n                        variant=\"outlined\"\r\n                        // onClick={() => handleFileObjectClick(file)}\r\n                        onDelete={() => handleDelete(i)}\r\n                    />)}\r\n                  \r\n                  </>\r\n                  }\r\n                </div>\r\n                </Grid>\r\n                </>              \r\n            </Grid>\r\n          </Stack>\r\n          </Paper>\r\n          <br></br>\r\n          <Stack className=\"mt-10\" direction=\"row\" spacing={2} justifyContent=\"flex-end\">\r\n            <Button type=\"submit\" variant=\"contained\" color=\"secondary\">SUBMIT</Button>\r\n          </Stack>\r\n        </ValidatorForm>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\vendors\\form.tsx",["1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176"],"import { Button, Checkbox, FormControlLabel, FormGroup, Grid, LinearProgress, Paper,Select,FormControl, MenuItem, InputLabel, Autocomplete, TextField } from '@mui/material';\r\nimport React,{useState,useEffect } from 'react';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport {Link as RLink,useHistory} from 'react-router-dom';\r\nimport {useParams} from 'react-router-dom';\r\nimport SearchableDropdown from \"../../../components/SearchableDropdown\";\r\nimport productService from '../../../services/supplierportal';\r\n\r\nimport {USER_TYPE} from '../../../const'\r\n\r\nlet _password:string = ''; // for referencing\r\n\r\nconst AdminUserForm:React.FC = ()=>{\r\n    const param = useParams();\r\n    const history = useHistory();\r\n    // Selected user id for default\r\n    const [selectedUser, setselectedUser] = useState({UserID: null, Email: ''})\r\n\r\n    // Holds list of user displays on autocomplete\r\n    const [userList, setUserList] = useState([])\r\n    const mode = param.id?'update':'create';\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n\r\n    const [VendorName,setVendorName] = useState('');\r\n    const [Address,setAddress] = useState('');\r\n    const [Phone,setPhone] = useState('');\r\n    const [Website,setWebsite] = useState('');\r\n    const [UserID,setUserID] = useState(null);\r\n    const [Role,setRole] = useState('Supplier');\r\n    const [Password,setPassword] = useState('');\r\n    const [IsCustomer,setIsCustomer] = useState<boolean>(false);\r\n\r\n    _password = Password;\r\n    \r\n    const setData = (data:any)=>{\r\n        if(data){\r\n            setVendorName(data.VendorName);\r\n            setUserID(data.UserID);\r\n            setAddress(data.Address);\r\n            setPhone(data.Phone);\r\n            setWebsite(data.Website);\r\n            setRole(data.Role);\r\n            setIsCustomer(data.UserType === USER_TYPE.CUSTOMER)\r\n        }else{\r\n            setVendorName('');\r\n            setUserID(null);\r\n            setAddress('');\r\n            setPhone('');\r\n            setWebsite('');\r\n            setRole('Supplier');\r\n        }\r\n    }\r\n\r\n    const getRecord = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await productService.vendors.get({id:param.id});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData(null);\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        let params = {\r\n            VendorName,UserID,Address,Phone,Website,\r\n            id:param.id\r\n        }\r\n        let res:any = null;\r\n\r\n        if(mode == 'update')\r\n        res = await productService.vendors.update(params);\r\n        else\r\n        res = await productService.vendors.create(params);\r\n\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                history.push('/supplierportal/vendors')\r\n                //window.snakAlert.success(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n    const handleChangeRole = (e:any)=>{\r\n        setRole(e.target.value)\r\n    }\r\n\r\n    // Get users with role renders need to be displayed on autocomplete\r\n    const getUserVendorsList = async () => {\r\n        let res: any;\r\n        res = await productService.vendors.listVendorUser({})\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n               setUserList(res.data)\r\n                //window.snakAlert.success(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n    }\r\n    const getCurrentUserVendor = async () => {\r\n        let res: any;\r\n        res = await productService.vendors.getCurrentVendor(param)\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n               setselectedUser(res.data)\r\n                //window.snakAlert.success(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getUserVendorsList()\r\n        if(mode == 'update'){\r\n            getRecord();\r\n            getCurrentUserVendor()\r\n        }\r\n        // add custom validation for confirm password\r\n        ValidatorForm.addValidationRule('isPasswordMatch', (value:string) => {\r\n            if (value !== _password) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        ValidatorForm.addValidationRule('validatePassword', (value:string) => {\r\n            let regex = /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/;\r\n            return regex.test(value);  \r\n        });\r\n        return ()=>{\r\n            ValidatorForm.removeValidationRule('isPasswordMatch');\r\n            ValidatorForm.removeValidationRule('validatePassword');\r\n        }\r\n    }, [])\r\n\r\n    // Handle Auto complete option select\r\n    const handleOptionSelect = (e, r) => {\r\n        setUserID(r?.UserID)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"page-content\">\r\n                <h2>Vendors <span>  {mode=='update'?'Update Vendor':'Create Vendor'} </span></h2>\r\n                \r\n                {mode=='update'?\r\n                     ''\r\n                    :''}\r\n                    <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n                    <Paper elevation={1} className=\"section mt-10\">\r\n                        <ValidatorForm\r\n                            onSubmit={handleSubmit}\r\n                            onError={errors => {\r\n                                console.log(errors)\r\n                            }}\r\n                        >\r\n                            <Grid container spacing={4}>\r\n                                <Grid item md={6} xs={12}>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <Autocomplete\r\n                                        key={selectedUser.UserID}\r\n                                        id=\"size-small-standard\"\r\n                                        size=\"small\"\r\n                                        onChange={handleOptionSelect}\r\n                                        disablePortal\r\n                                        defaultValue={selectedUser}\r\n                                        getOptionLabel={(option) => option.Email}\r\n                                        options={userList}\r\n                                        renderInput={(params) => <TextField variant=\"outlined\" margin=\"dense\" {...params} label=\"Vendor Email\" />}\r\n                                    />\r\n                              \r\n                                        {/* <TextValidator\r\n                                            variant=\"outlined\"\r\n                                            margin=\"dense\"\r\n                                            fullWidth\r\n                                            label=\"User ID\"\r\n                                            name=\"UserID\"\r\n                                            autoFocus\r\n                                            size=\"small\"\r\n                                            onChange={(e:any)=>{ setUserID(e.target.value) }}\r\n                                            validators={['required']}\r\n                                            errorMessages={['UserID is required']}\r\n                                            value={UserID}\r\n                                            disabled={processing}\r\n                                            inputProps={{ maxLength: 100 }}\r\n                                        /> */}\r\n                                    </Grid>\r\n                                    <Grid item md={12} xs={12}>\r\n                                        <TextValidator\r\n                                            variant=\"outlined\"\r\n                                            margin=\"dense\"\r\n                                            fullWidth\r\n                                            label=\"Vendor Name\"\r\n                                            name=\"FullName\"\r\n                                            autoFocus\r\n                                            size=\"small\"\r\n                                            onChange={(e:any)=>{ setVendorName(e.target.value) }}\r\n                                            validators={['required']}\r\n                                            errorMessages={['Name is required']}\r\n                                            value={VendorName}\r\n                                            disabled={processing}\r\n                                            inputProps={{ maxLength: 100 }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={12} xs={12}>\r\n                                        <TextValidator\r\n                                            variant=\"outlined\"\r\n                                            margin=\"dense\"\r\n                                            fullWidth\r\n                                            label=\"Address\"\r\n                                            name=\"Address\"\r\n                                            size=\"small\"\r\n                                            autoFocus\r\n                                            onChange={(e:any)=>{ setAddress(e.target.value) }}\r\n                                            validators={['required']}\r\n                                            errorMessages={['Address is required','Address is not valid']}\r\n                                            value={Address}\r\n                                            disabled={processing}\r\n                                            inputProps={{ maxLength: 100 }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={12} xs={12}>\r\n                                        <TextValidator\r\n                                            variant=\"outlined\"\r\n                                            margin=\"dense\"\r\n                                            fullWidth\r\n                                            label=\"Phone\"\r\n                                            name=\"Phone\"\r\n                                            size=\"small\"\r\n                                            autoFocus\r\n                                            onChange={(e:any)=>{ setPhone(e.target.value) }}\r\n                                            validators={['required']}\r\n                                            errorMessages={['Phone is required','Phone is not valid']}\r\n                                            value={Phone}\r\n                                            disabled={processing}\r\n                                            inputProps={{ maxLength: 100 }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={12} xs={12}>\r\n                                        <TextValidator\r\n                                            variant=\"outlined\"\r\n                                            margin=\"dense\"\r\n                                            fullWidth\r\n                                            label=\"Website\"\r\n                                            name=\"Website\"\r\n                                            size=\"small\"\r\n                                            autoFocus\r\n                                            onChange={(e:any)=>{ setWebsite(e.target.value) }}\r\n                                            validators={['required']}\r\n                                            errorMessages={['Website is required','Website is not valid']}\r\n                                            value={Website}\r\n                                            disabled={processing}\r\n                                            inputProps={{ maxLength: 100 }}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={12}>\r\n                                        <br/>\r\n                                        <Button disabled={processing}\r\n                                            type=\"submit\"\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\">Submit</Button>\r\n                                        &nbsp; &nbsp;\r\n                                        <Button\r\n                                            component={RLink}\r\n                                            to=\"/supplierportal/vendors\"\r\n                                            variant=\"contained\"\r\n                                            >Cancel</Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>                        \r\n                        </ValidatorForm>\r\n                    </Paper>\r\n                </div>    \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminUserForm;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\products\\form.tsx",["1177","1178","1179","1180","1181","1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202"],"import { Button, Checkbox, FormControlLabel, FormGroup, Grid, LinearProgress, Paper, Select, FormControl, MenuItem, InputLabel, Autocomplete, TextField } from '@mui/material';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport { Link as RLink, useHistory } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport SearchableDropdown from \"../../../components/SearchableDropdown\";\r\nimport productService from '../../../services/supplierportal';\r\nimport { USER_TYPE } from '../../../const'\r\nimport vendorService from '../../../services/supplierportal';\r\nimport { ConstructionOutlined } from '@mui/icons-material';\r\nimport { useSelector } from 'react-redux';\r\nlet _password: string = ''; // for referencing\r\nconst VENDORLIST=[]\r\n\r\nconst AdminUserForm: React.FC = () => {\r\n    const param = useParams();\r\n    const history = useHistory();\r\n    const mode = param.id ? 'update' : 'create';\r\n    const [vendorList, setVendorList] = useState([])\r\n    const [selectedVendor, setSelectedVendor] = useState({VendorID:null, VendorName: ''})\r\n\r\n    const [processing, setProcessing] = useState(false);\r\n\r\n    const [ProductName, setProductName] = useState('');\r\n    const [Description, setDescription] = useState('');\r\n    const [VendorID, setVendorID] = useState(null);\r\n    const [VendorUserID, setVendorUserID] = useState(null);\r\n    const [Role, setRole] = useState('Supplier');\r\n    const [filters, setFilters] = useState({});\r\n    \r\n    const rowPerPage = 10;\r\n    const page=1;\r\n    const [VendorData,setVendorData]=useState([{}]);\r\n    const UserRole = useSelector((state: any) =>\r\n    state.user ? state.user.role : null\r\n  );\r\n  const UserID = useSelector((state: any) =>\r\n    state.user ? state.user.id : null\r\n  );\r\n\r\n    const setData = (data: any) => {\r\n        if (data) {\r\n            setProductName(data.ProductName);\r\n            setDescription(data.Description);\r\n            setVendorID(data.VendorID);\r\n            setRole(data.Role);\r\n        } else {\r\n            setProductName('');\r\n            setDescription('');\r\n            setVendorID(null);\r\n            setRole('Supplier');\r\n        }\r\n    }\r\n    const setData2 = (data: any) => {\r\n        if (data) {\r\n            setVendorID(data.VendorID);\r\n        } else {\r\n            setVendorID(null);\r\n        }\r\n    }\r\n    const getRecord = async () => {\r\n        setProcessing(true);\r\n        let res: any;\r\n        if (UserRole === 'Admin' || UserRole === 'Supplier Admin') {\r\n            res = await productService.products.get({ id: param.id });\r\n        } else if (UserRole === 'Supplier') {\r\n            res = await productService.products.getVendorProduct({ id: param.id });\r\n\r\n        }\r\n        if (res.success && res.data) {\r\n            setData(res.data);\r\n        } else {\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        /*if (!res.success) {\r\n            window.snakAlert.error(res.message);\r\n            setData(null);\r\n        } else {\r\n            if (res.success && res.data) {\r\n                setData(res.data);\r\n            } else {\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }*/\r\n        setProcessing(false);\r\n    }\r\n    const getVendor=async () => {\r\n        setProcessing(true);\r\n        let res: any = await vendorService.vendors.listing({page,rowPerPage});\r\n        setVendorData(res?.data?.rows);\r\n        if (!res.success) {\r\n            window.snakAlert.error(res.message);\r\n            setData2(null);\r\n        } else {\r\n            if (res.success && res.data) {\r\n                setData2(res.data.rows);\r\n            } else {\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const getVendorUser=async () => {\r\n        setProcessing(true);\r\n        //alert(UserID);\r\n        let api: any = await productService.products.getVendorUser({ id: UserID });\r\n        console.log(api.data);\r\n        //setVendorUserID(api.data.VendorID);\r\n        if (!api.success) {\r\n            window.snakAlert.error(api.message);\r\n            setVendorUserID(null);\r\n        } else {\r\n            if (api.success && api.data) {\r\n                setVendorUserID(api.data.VendorID);\r\n            } else {\r\n                window.snakAlert.error(api.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n\r\n    const handleSubmit = async () => {\r\n        setProcessing(true);\r\n        let params = {\r\n            ProductName, Description, VendorID,\r\n            id: param.id\r\n        }\r\n        let res: any = null;\r\n\r\n        if (mode == 'update'){\r\n        if (UserRole == 'Admin') {\r\n            res = await productService.products.update(params);\r\n        } else if (UserRole === 'Supplier') {\r\n            res = await productService.products.updateVendorProduct(params);\r\n\r\n        }}\r\n        else {\r\n            if (UserRole == 'Admin') {\r\n                res = await productService.products.create(params);\r\n            } else if (UserRole === 'Supplier') {\r\n                /*let api: any = null;\r\n                api=await productService.products.getVendorUser(UserID);*/\r\n                let Supplierparams = {\r\n                    ProductName, Description, VendorUserID,\r\n                    id: param.id\r\n                }\r\n                res = await productService.products.createVendorProduct(Supplierparams);\r\n            }\r\n        }\r\n\r\n        if (!res.success) {\r\n            window.snakAlert.error(res.message);\r\n        } else {\r\n            if (res.success && res.data) {\r\n                history.push(\"/supplierportal/products\")\r\n                //window.snakAlert.success(res.data);\r\n            } else {\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const getCurrentVendor = async () => {\r\n        let res:any\r\n        if (UserRole === 'Admin') {\r\n            res = await productService.products.getVendorByProductId(param)\r\n        }\r\n\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n               setSelectedVendor(res.data)\r\n            }else{\r\n                setSelectedVendor({})\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n    \r\n        if (mode == 'update'){\r\n            getRecord();\r\n            if (UserRole == 'Admin') {\r\n                getCurrentVendor()\r\n            }\r\n            \r\n        }\r\n        \r\n            if (UserRole == 'Admin') {\r\n                getVendor();\r\n                getVendorsList();\r\n            }\r\n\r\n            if(UserRole == 'Supplier'){\r\n                getVendorUser();\r\n            }\r\n        \r\n\r\n        // add custom validation for confirm password\r\n        \r\n        ValidatorForm.addValidationRule('isPasswordMatch', (value: string) => {\r\n            if (value !== _password) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        ValidatorForm.addValidationRule('validatePassword', (value: string) => {\r\n            let regex = /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/;\r\n            return regex.test(value);\r\n        });\r\n        return () => {\r\n            ValidatorForm.removeValidationRule('isPasswordMatch');\r\n            ValidatorForm.removeValidationRule('validatePassword');\r\n        }\r\n        \r\n    }, [])\r\n\r\n    const getVendorsList = async () => {\r\n        let res: any;\r\n        res = await productService.vendors.listSearch({})\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setVendorList([]);\r\n        }else{\r\n            if(res.success && res.data){\r\n                setVendorList(res.data);    \r\n            }else{\r\n                setVendorList([]);\r\n            }\r\n        }\r\n    }\r\n\r\n    const getVendorsUser = async () => {\r\n        let res: any;\r\n        res = await productService.vendors.listSearch({})\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setVendorList([]);\r\n        }else{\r\n            if(res.success && res.data){\r\n                setVendorList(res.data);    \r\n            }else{\r\n                setVendorList([]);\r\n            }\r\n        }\r\n    }\r\n   \r\n    const handleOptionSelect = (e, r) => {\r\n        setVendorID(r?.VendorID || null)\r\n    }\r\n\r\n    \r\n    const handleChange = (event) => {\r\n        setVendorID(event.target.value);\r\n        // setVendorName(event.target.value);\r\n      };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"page-content\">\r\n                <h2>Products <span>  {mode == 'update' ? 'Update Product' : 'Create Product'} </span></h2>\r\n\r\n\r\n                <LinearProgress className=\"progress-bar\" style={{ display: (processing ? '' : 'none') }} />\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    <ValidatorForm\r\n                        onSubmit={handleSubmit}\r\n                        onError={errors => {\r\n                            console.log(errors)\r\n                        }}\r\n                    >\r\n                        <Grid container spacing={4}>\r\n                            <Grid item md={6} xs={12}>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        label=\"Product Name\"\r\n                                        name=\"ProductName\"\r\n                                        autoFocus\r\n                                        size=\"small\"\r\n                                        onChange={(e: any) => { setProductName(e.target.value) }}\r\n                                        validators={['required']}\r\n                                        errorMessages={['Product Name is required']}\r\n                                        value={ProductName}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 100 }}\r\n                                    />\r\n                                </Grid>\r\n                                {/* {UserRole === 'Supplier' ? (\r\n                                    <Grid item md={12} xs={12}>\r\n                                    <FormControl fullWidth>\r\n                                        <InputLabel id=\"demo-simple-select-label\">Vendor</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"demo-simple-select-label\"\r\n                                            id=\"demo-simple-select\"\r\n                                            label=\"Vendor\"\r\n                                            value={VendorID}\r\n                                            key={VendorName}\r\n                                            onChange={handleChange}\r\n                                        >\r\n                                            {VendorData.map((key: any)=>{\r\n                                                return (\r\n                                                    <MenuItem value={key.VendorID}>\r\n                                                {key?.VendorName}\r\n                                                </MenuItem>\r\n                                                )\r\n                                            })}\r\n                                            \r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                ) : null} */}\r\n                                {UserRole === 'Supplier' ? (\r\n                                    <Grid item md={12} xs={12}>\r\n                                        <Autocomplete\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        value={VendorUserID}\r\n                                        disabled\r\n                                        options=\"\"\r\n                                        renderInput={(params) => <TextField variant=\"outlined\" margin=\"dense\" {...params} label=\"VendorID\" />}\r\n                                    />\r\n                                </Grid>\r\n                                ) : null}\r\n                                {UserRole === 'Admin' ? (\r\n                                    <Grid item md={12} xs={12}>\r\n                                    <Autocomplete\r\n                                        key={selectedVendor?.VendorID}\r\n                                        id=\"size-small-standard\"\r\n                                        size=\"small\"\r\n                                        onChange={handleOptionSelect}\r\n                                        disablePortal\r\n                                        defaultValue={selectedVendor}\r\n                                        getOptionLabel={(option) => option.VendorName}\r\n                                        options={vendorList}\r\n                                        renderInput={(params) => <TextField variant=\"outlined\" margin=\"dense\" {...params} label=\"VendorName\" />}\r\n                                    /></Grid>\r\n                                  ) : null}\r\n                                <Grid item md={12} xs={12}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        label=\"Description\"\r\n                                        name=\"Description\"\r\n                                        size=\"small\"\r\n                                        autoFocus\r\n                                        onChange={(e: any) => { setDescription(e.target.value) }}\r\n                                        validators={['required']}\r\n                                        errorMessages={['Description is required', 'Email is not valid']}\r\n                                        value={Description}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 100 }}\r\n                                    />\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item md={12}>\r\n                                    <br />\r\n                                    <Button disabled={processing}\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\">Submit</Button>\r\n                                    &nbsp; &nbsp;\r\n                                    <Button\r\n                                        component={RLink}\r\n                                        to=\"/supplierportal/products\"\r\n                                        variant=\"contained\"\r\n                                    >Cancel</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ValidatorForm>\r\n                </Paper>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminUserForm;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderForm\\OrderForm.tsx",["1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234","1235"],"import { Button, Paper, Skeleton, Stack, Grid, TextField, Divider, Select, MenuItem, Icon, IconButton, Autocomplete, FormControl, Tooltip } from \"@mui/material\";\r\nimport React, { useState, useMemo, useEffect } from \"react\";\r\nimport { ValidatorForm } from 'react-material-ui-form-validator';\r\nimport { Link as RLink, useHistory } from 'react-router-dom';\r\nimport ModalDialog from \"../../../components/ModalDialog\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport DeleteOutlineIcon from \"@mui/icons-material/DeleteOutline\";\r\nimport DoneIcon from \"@mui/icons-material/Done\";\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\nimport orderService from '../../../services/supplierportal';\r\nimport { ConstructionOutlined } from \"@mui/icons-material\";\r\nimport sfdc from '../../../services/sfdc';\r\nimport { useParams } from 'react-router-dom';\r\nimport productService from '../../../services/supplierportal';\r\nimport { useSelector } from \"react-redux\";\r\nimport SearchableDropdown from \"../../../components/SearchableDropdown\";\r\n\r\nconst OrderForm = (props: any) => {\r\n\r\n    const history = useHistory();\r\n    const params = useParams();\r\n\r\n    // Account Information States\r\n    const [accountData, setAccountData] = useState({\r\n        AccountName: '',\r\n        AccountPhone: '',\r\n        AccountWebsite: '',\r\n        AccountEmail: '',\r\n        ContactPhone: '',\r\n        ContactEmail: '',\r\n        ContactName: '',\r\n        ContactAddress: '',\r\n        AccountID: '',\r\n        ContactID: ''\r\n    })\r\n\r\n    // const [shippingId, setShippingId] = useState(null)\r\n    // const [orderId,setOrderId]=useState(null);\r\n    // const [applianceId, setApplianceId] = useState(null)\r\n    //For Shipping\r\n    const columns1 = [\r\n        { field: 'Title', headerName: 'Title', width: 210, editable: true },\r\n        { field: 'Deliver', headerName: 'Deliver To', type: 'number', width: 150, editable: true },\r\n        { field: 'Address', headerName: 'Address', width: 100, type: 'number', editable: true },\r\n        { field: 'Phone', headerName: 'Phone', width: 120, type: 'number', editable: true },\r\n        { field: 'Email', headerName: 'Email', width: 80, type: 'number', editable: true },\r\n    ];\r\n    const [shippingrows, setShippingRows] = useState([]);\r\n\r\n    const [ShowAddNewShippingInfo, setShowAddNewShippingInfo] = useState<boolean>(false);\r\n    const [ShippingInfoID, setShippingInfoID] = useState<number | null>(null); // for modifying record\r\n    const handlerAddNewShippingInfo = () => setShowAddNewShippingInfo(true);\r\n    const handlerCloseShippingInfo = () => setShowAddNewShippingInfo(false);\r\n    const handlerCloseEditableShippingInfo = () => setShippingInfoID(null);\r\n\r\n    const handlerUpdateShippngInfo = async (params) => {\r\n        // update shipping code here\r\n        let shipRows = [...shippingrows]\r\n        let foundIndex = shipRows.findIndex(row => row.id = params.id)\r\n        shipRows[foundIndex] = {\r\n            id: params.id,\r\n            Title: params.Title,\r\n            Deliver: params.Deliver,\r\n            Address: params.Address,\r\n            Phone: params.Phone,\r\n            Email: params.Email,\r\n        }\r\n        setShippingRows(shipRows);\r\n        handlerCloseEditableShippingInfo();\r\n    }\r\n\r\n    const handlerAddNewShipInfo = async (params) => {\r\n        // code for save new record\r\n        setShippingRows([\r\n            ...shippingrows,\r\n            {\r\n                id: shippingrows.length + 1,\r\n                Title: params.Title,\r\n                Deliver: params.Deliver,\r\n                Address: params.Address,\r\n                Phone: params.Phone,\r\n                Email: params.Email,\r\n            },\r\n        ]);\r\n        // hide add row\r\n        setShowAddNewShippingInfo(false)\r\n        setShippingInfoID(shippingrows.length + 1);\r\n        console.log(params);\r\n    }\r\n\r\n\r\n    // const handlerAddNewShippingInfoapi = async (orderId) => {\r\n    //     let success = false\r\n    //     let shippingID = null\r\n    //     let shippingParams = []\r\n    //     shippingrows.map(row => {\r\n    //         if (row) {\r\n    //             shippingParams.push({\r\n    //                 OrderID: orderId,\r\n    //                 Title: row.Title,\r\n    //                 DeliverTo: row.Deliver,\r\n    //                 Address: row.Address,\r\n    //                 Phone: row.Phone,\r\n    //                 Email: row.Email\r\n    //             })\r\n    //         }\r\n    //     })\r\n    //     let res: any = null;\r\n    //     res = await orderService.ordershipping.create({ shippingParams });\r\n    //     console.log(res);\r\n    //     if (!res.success) {\r\n    //         window.snakAlert.error(res.message);\r\n    //     } else {\r\n    //         if (res.success) {\r\n    //             handlerAddNewApplianceInfoapi(orderId, res.data?.shippingDetails[0]['ShippingID']);\r\n\r\n    //         } else {\r\n    //             window.snakAlert.error(res.message);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    \r\n    const handlerDeleteShippingInfo = async (i) => {\r\n        if (await window.ConfirmationDialog(\"Shipping Info\", \"Delete?\")) {\r\n            const list = [...shippingrows];\r\n            list.splice(i, 1);\r\n            setShippingRows(list);\r\n        }\r\n    }\r\n    const handlerMoodifyShipppingInfo = (id) => {\r\n        setShippingInfoID(id);\r\n    }\r\n\r\n\r\n    //For Appliance\r\n    const columns = [\r\n        { field: 'ProductName', headerName: 'Product name', width: 100, editable: true },\r\n        { field: 'CloudN', headerName: 'Appliance Interfaces', width: 50, editable: true },\r\n        { field: 'Interface', headerName: 'Interface Ip Address', type: 'number', width: 50, editable: true },\r\n        { field: 'Subnet', headerName: 'Subnet Mask', width: 50, type: 'number', editable: true },\r\n        { field: 'Default', headerName: 'Default Gateway', width: 50, type: 'number', editable: true },\r\n        { field: 'MTU', headerName: 'MTU Size', width: 80, type: 'number', editable: true },\r\n        { field: 'Primary', headerName: 'Primary DNS Server', width: 50, type: 'number', editable: true },\r\n        { field: 'Secondary', headerName: 'Secondary DNS Server', width: 50, type: 'number', editable: true },\r\n        { field: 'Note', headerName: 'Note', type: 'number', width: 40, editable: true },\r\n        { field: 'Shipping', headerName: 'Shipping Title', type: 'number', width: 40, editable: true },\r\n    ];\r\n    const [totalAppliances, setTotalAppliances] = useState(0)\r\n    const [defaultAppliances, setDefaultAppliances] = useState([{\r\n        id: 0,\r\n        ProductName: \"\",\r\n        ProductID: null,\r\n        ApplianceInterfaces: '',\r\n        InterfaceIpAddress: '',\r\n        SubnetMask: '',\r\n        DefaultGateway: '',\r\n        MTUSize: '',\r\n        PrimaryDNSServer: '',\r\n        SecondaryDNSServer: '',\r\n        Note: '',\r\n        ShippingTitle: \"\"\r\n    },\r\n    {\r\n        id: 1,\r\n        ProductName: \"\",\r\n        ProductID: null,\r\n        ApplianceInterfaces: '',\r\n        InterfaceIpAddress: '',\r\n        SubnetMask: '',\r\n        DefaultGateway: '',\r\n        MTUSize: '',\r\n        PrimaryDNSServer: '',\r\n        SecondaryDNSServer: '',\r\n        Note: '',\r\n        ShippingTitle: \"\"\r\n    }])\r\n    const [appliancerows, setApplianceRows] = useState([[\r\n        {\r\n            id: 0,\r\n            ProductName: \"\",\r\n            ProductID: null,\r\n            ApplianceInterfaces: 'ILO',\r\n            InterfaceIpAddress: '',\r\n            SubnetMask: '',\r\n            DefaultGateway: '',\r\n            MTUSize: '',\r\n            PrimaryDNSServer: '',\r\n            SecondaryDNSServer: '',\r\n            Note: '',\r\n            ShippingTitle: \"\",\r\n            ShippingID: 0\r\n        },\r\n        {\r\n            id: 1,\r\n            ProductName: \"\",\r\n            ProductID: null,\r\n            ApplianceInterfaces: 'Management',\r\n            InterfaceIpAddress: '',\r\n            SubnetMask: '',\r\n            DefaultGateway: '',\r\n            MTUSize: '',\r\n            PrimaryDNSServer: '',\r\n            SecondaryDNSServer: '',\r\n            Note: '',\r\n            ShippingTitle: \"\",\r\n            ShippingID: 0\r\n        }\r\n    ]]);\r\n\r\n    //Optional Information\r\n    //const [optionalrows, setOptionalRows] = useState([[[{},]]]); Saafan work for default optional row\r\n    const [optionalrows, setOptionalRows] = useState([[]]);\r\n    const handleAddApplianceClick = () => {\r\n        setTotalAppliances(totalAppliances + 1)\r\n        let appRows = [...appliancerows]\r\n        let newRow = [{\r\n            id: 0,\r\n            ProductName: \"\",\r\n            ProductID: null,\r\n            ApplianceInterfaces: 'ILO',\r\n            InterfaceIpAddress: '192.168.10.50',\r\n            SubnetMask: '/30',\r\n            DefaultGateway: '192.168.10.49',\r\n            MTUSize: '1500',\r\n            PrimaryDNSServer: 'Not Required',\r\n            SecondaryDNSServer: 'Not Required',\r\n            Note: 'Layer-2',\r\n            ShippingTitle: \"My new title\",\r\n            ShippingID: 0\r\n        },\r\n        {\r\n            id: 1,\r\n            ProductName: \"\",\r\n            ProductID: null,\r\n            ApplianceInterfaces: 'Management',\r\n            InterfaceIpAddress: '192.168.10.50',\r\n            SubnetMask: '/30',\r\n            DefaultGateway: '192.168.10.49',\r\n            MTUSize: '1500',\r\n            PrimaryDNSServer: 'Not Required',\r\n            SecondaryDNSServer: 'Not Required',\r\n            Note: 'Layer-2',\r\n            ShippingTitle: \"My new title\",\r\n            ShippingID: 0\r\n        }]\r\n        appRows.push(newRow)\r\n        setApplianceRows(appRows)\r\n        let optRows = [...optionalrows]\r\n        let newOptRow = []\r\n        optRows.push(newOptRow)\r\n        setOptionalRows(optRows)\r\n        /*let newOptRow = [{\r\n            id: 0,\r\n            Brand: 'New Model',\r\n            Port: '200g',\r\n            SMTU: '1500-byte',\r\n            SFP: 'Cisco SFP Fiber',\r\n            CableType: 'Fibre Cable',\r\n            CableLength: '200m',\r\n        }]\r\n        optRows.push(newOptRow)\r\n        setOptionalRows(optRows) Saffan work for add new appliance default optional row*/\r\n    }\r\n\r\n    const [ShowAddNewApplianceInfo, setShowAddNewApplianceInfo] = useState<boolean>(false);\r\n    const [ApplianceInfoID, setApplianceInfoID] = useState<number | null>(null); // for modifying record\r\n    const [ApplianceInfoIndex, setApplianceInfoIndex] = useState<number | null>(null); // for modifying record\r\n    const [currentIndex, setCurrentIndex] = useState(null)\r\n    const handlerAddNewApplianceInfo = (ind) => {\r\n        setCurrentIndex(ind)\r\n        setShowAddNewApplianceInfo(true);\r\n    }\r\n\r\n    const handlerCloseApplianceInfo = () => setShowAddNewApplianceInfo(false);\r\n    const handlerCloseEditableApplianceInfo = () => setApplianceInfoID(null);\r\n\r\n    const handlerUpdateApplianceInfo = async (params) => {\r\n        // update shipping code here\r\n        console.log(params)\r\n        let appRows = [...appliancerows]\r\n        const foundIndex = appRows[params.index].findIndex(app => app.id === params.id)\r\n        appRows[params.index][foundIndex] = {\r\n            id: params?.id,\r\n            ProductName: params?.selectedProduct?.ProductName,\r\n            ProductID: params?.selectedProduct?.ProductID,\r\n            ApplianceInterfaces: params.ApplianceInterfaces,\r\n            InterfaceIpAddress: params.InterfaceIpAddress,\r\n            SubnetMask: params.SubnetMask,\r\n            DefaultGateway: params.DefaultGateway,\r\n            MTUSize: params.MTUSize,\r\n            PrimaryDNSServer: params.PrimaryDNSServer,\r\n            SecondaryDNSServer: params.SecondaryDNSServer,\r\n            Note: params.Note,\r\n            ShippingTitle: params.ShippingTitle,\r\n            ShippingID: params.ShippingID\r\n        }\r\n        console.log(appRows)\r\n        setApplianceRows(appRows);\r\n        handlerCloseEditableApplianceInfo()\r\n    }\r\n\r\n    const handlerAddNewAppInfo = async (params) => {\r\n        // code for save new record\r\n        console.log(params);\r\n        // setApplianceRows([\r\n        //     ...appliancerows,\r\n        //     {\r\n        //         id: appliancerows.length + 1,\r\n        //         ProductName: params?.selectedProduct?.ProductName,\r\n        //         ProductID: params?.selectedProduct?.ProductID,\r\n        //         ApplianceInterfaces: params.ApplianceInterfaces,\r\n        //         InterfaceIpAddress: params.InterfaceIpAddress,\r\n        //         SubnetMask: params.SubnetMask,\r\n        //         DefaultGateway: params.DefaultGateway,\r\n        //         MTUSize: params.MTUSize,\r\n        //         PrimaryDNSServer: params.PrimaryDNSServer,\r\n        //         SecondaryDNSServer: params.SecondaryDNSServer,\r\n        //         Note: params.Note,\r\n        //         ShippingTitle: params.ShippingTitle\r\n        //     },\r\n        // ]);\r\n        // hide add row\r\n        let appRows = [...appliancerows]\r\n        let selectedAppRow = appRows[params.index]\r\n        let id;\r\n        if (appRows[params.index]?.length > 0) {\r\n            let len = appRows[params.index]?.length\r\n            id = appRows[params.index][len - 1]['id'] + 1\r\n        } else {\r\n            id = 0\r\n        }\r\n\r\n        selectedAppRow.push({\r\n            id: id,\r\n            ProductName: params?.selectedProduct?.ProductName,\r\n            ProductID: params?.selectedProduct?.ProductID,\r\n            ApplianceInterfaces: params.ApplianceInterfaces,\r\n            InterfaceIpAddress: params.InterfaceIpAddress,\r\n            SubnetMask: params.SubnetMask,\r\n            DefaultGateway: params.DefaultGateway,\r\n            MTUSize: params.MTUSize,\r\n            PrimaryDNSServer: params.PrimaryDNSServer,\r\n            SecondaryDNSServer: params.SecondaryDNSServer,\r\n            Note: params.Note,\r\n            ShippingTitle: params.ShippingTitle,\r\n            ShippingID: params.ShippingID\r\n        })\r\n        appRows[params.index] = selectedAppRow\r\n        setApplianceRows(appRows);\r\n        handlerCloseEditableApplianceInfo()\r\n\r\n        setShowAddNewApplianceInfo(false)\r\n        // setApplianceInfoID(appliancerows.length + 1);\r\n        console.log(params);\r\n    }\r\n    const handlerDeleteApplianceInfo = async (ind, i) => {\r\n        if (await window.ConfirmationDialog(\"Appliance Information\", \"Delete?\")) {\r\n            const list = [...appliancerows];\r\n            list[ind].splice(i, 1);\r\n            setApplianceRows(list);\r\n        }\r\n    }\r\n    const handlerMoodifyApplianceInfo = (index, id) => {\r\n        setApplianceInfoIndex(index)\r\n        setApplianceInfoID(id);\r\n    }\r\n\r\n    // const handlerAddNewApplianceInfoapi = async (orderId, shippingId) => {\r\n    //     console.log(appliancerows + \"rows\");\r\n\r\n    //     let applianceParams = []\r\n    //     appliancerows.flat().map((row) => {\r\n    //         if (row) {\r\n    //             applianceParams.push({\r\n    //                 OrderID: orderId,\r\n    //                 ProductID: row.ProductID,\r\n    //                 Interface: row.ApplianceInterfaces,\r\n    //                 InterfaceIp: row.InterfaceIpAddress,\r\n    //                 Subnet: row.SubnetMask,\r\n    //                 DefaultGateway: row.DefaultGateway,\r\n    //                 MTUSize: row.MTUSize,\r\n    //                 PrimaryDNS: row.PrimaryDNSServer,\r\n    //                 SecondaryDNS: row.SecondaryDNSServer,\r\n    //                 Note: row.Note,\r\n    //                 ShippingTitle: row.ShippingTitle,\r\n    //                 ShippingID: shippingId\r\n    //             })\r\n    //         }\r\n    //     })\r\n    //     let res: any = null;\r\n    //     res = await orderService.orderappliance.create({ applianceParams });\r\n    //     console.log(res + \"Response of appliance API\");\r\n    //     // setApplianceId(res.data.ApplianceID)\r\n    //     if (!res.success) {\r\n    //         window.snakAlert.error(res.message);\r\n    //     } else {\r\n    //         if (res.success) {\r\n    //             console.log(\"RES DATA\", res.data)\r\n    //             handlerAddNewOptionalInfoapi(orderId, res.data[0]['ApplianceID']);\r\n    //         } else {\r\n    //             window.snakAlert.error(res.message);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        console.log(\"AppRows\", appliancerows)\r\n    }, [appliancerows])\r\n\r\n    useEffect(() => {\r\n        console.log(\"OptRows\", optionalrows)\r\n\r\n    }, [optionalrows])\r\n\r\n\r\n\r\n    const [ShowAddNewOptionalInfo, setShowAddNewOptionalInfo] = useState<boolean>(false);\r\n    const [OptionalInfoID, setOptionalInfoID] = useState<number | null>(null); // for modifying record\r\n    const handlerAddNewOptionalInfo = (ind) => {\r\n        setCurrentIndex(ind)\r\n        setShowAddNewOptionalInfo(true);\r\n    }\r\n    const handlerCloseOptionalInfo = () => setShowAddNewOptionalInfo(false);\r\n    const handlerCloseEditableOptionalInfo = () => setOptionalInfoID(null);\r\n    const handlerUpdateOptionalInfo = (params) => {\r\n        // update shipping code here\r\n\r\n        console.log(params)\r\n        let optRows = [...optionalrows]\r\n        const foundIndex = optRows[params.index].findIndex(opp => opp.id === params.id)\r\n        optRows[params.index][foundIndex] = {\r\n            id: params?.id,\r\n            Brand: params?.Brand,\r\n            Port: params?.Port,\r\n            SMTU: params?.SMTU,\r\n            SFP: params?.SFP,\r\n            CableType: params?.CableType,\r\n            CableLength: params?.CableLength\r\n        }\r\n        setOptionalRows(optRows);\r\n        handlerCloseEditableOptionalInfo()\r\n\r\n    }\r\n\r\n    const getAccountDetails = async () => {\r\n        let res: any;\r\n        res = await sfdc.getAccount(params.accountId);\r\n        console.log(res.data);\r\n        if (res.success) {\r\n            setAccountData(prevState => ({\r\n                ...prevState,\r\n                AccountID: res?.data.Id,\r\n                AccountName: res?.data.Name,\r\n                AccountPhone: res?.data.Phone,\r\n                AccountWebsite: res?.data.Website,\r\n            }))\r\n        } else {\r\n            window.snakAlert.error(res.message);\r\n        }\r\n    }\r\n\r\n    const getContactDetails = async () => {\r\n        let res: any;\r\n        res = await sfdc.getContact(params.contactId);\r\n        if (res.success) {\r\n            setAccountData(prevState => ({\r\n                ...prevState,\r\n                ContactID: res?.data.Id,\r\n                ContactName: res?.data.Name,\r\n                ContactEmail: res?.data.Email,\r\n                ContactPhone: res?.data.Phone,\r\n                ContactAddress: res?.data.MailingAddress,\r\n                AccountEmail: res?.data.Email,\r\n            }))\r\n        } else {\r\n            window.snakAlert.error(res.message);\r\n        }\r\n    }\r\n\r\n    const [opData, setOpData] = useState({\r\n        OpportunityID: '',\r\n        Name: '',\r\n        StageName: '',\r\n        Amount: ''\r\n        \r\n    })\r\n\r\n    const getOpportunityDetails = async () => {\r\n        let res: any;\r\n        res = await sfdc.getOpportunity(params.opportunityId);\r\n        if (res.success) {\r\n            setOpData(prevState => ({\r\n                ...prevState,\r\n                OpportunityID: res?.data.Id,\r\n                Name: res?.data.Name,\r\n                StageName: res?.data.StageName,\r\n                Amount: res?.data.Amount,\r\n            }))\r\n        } else {\r\n            window.snakAlert.error(res.message);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAccountDetails()\r\n        getContactDetails()\r\n        getOpportunityDetails()\r\n    }, [])\r\n\r\n    const handlerAddNewOptInfo = async (params) => {\r\n\r\n        let optRows = [...optionalrows]\r\n        let selectedOptRow = optRows[params.index]\r\n        let id;\r\n        if (optRows[params.index]?.length > 0) {\r\n            let len = optRows[params.index]?.length\r\n            id = optRows[params.index][len - 1]['id'] + 1\r\n        } else {\r\n            id = 0\r\n        }\r\n\r\n        selectedOptRow.push({\r\n            id: id,\r\n            Brand: params?.Brand,\r\n            Port: params?.Port,\r\n            SMTU: params?.SMTU,\r\n            SFP: params?.SFP,\r\n            CableType: params?.CableType,\r\n            CableLength: params?.CableLength\r\n        })\r\n        optRows[params.index] = selectedOptRow\r\n        setOptionalRows(optRows);\r\n        handlerCloseEditableOptionalInfo()\r\n        setShowAddNewOptionalInfo(false)\r\n\r\n        // hide add row\r\n        // setShowAddNewOptionalInfo(false)\r\n        // setOptionalInfoID(optionalrows.length + 1);\r\n        // console.log(params);\r\n    }\r\n    const handlerDeleteOptionalInfo = async (ind, i) => {\r\n        if (await window.ConfirmationDialog(\"Optional Information\", \"Delete?\")) {\r\n            const list = [...optionalrows];\r\n            list[ind].splice(i, 1);\r\n            setOptionalRows(list);\r\n        }\r\n    }\r\n    const handlerMoodifyOptionalgInfo = (id) => {\r\n        setOptionalInfoID(id);\r\n    }\r\n\r\n    // const handleOrderTrackingCreate = async (orderId) => {\r\n    //     let res: any = null;\r\n    //     res = await orderService.orders.createOrderTracking({ OrderID: orderId });\r\n    //     if (!res.success) {\r\n    //         window.snakAlert.error(res.message);\r\n    //     } else {\r\n    //         if (res.success) {\r\n    //             history.push(\"/supplierportal/ordertracking\")\r\n    //         } else {\r\n    //             window.snakAlert.error(res.message);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // const handlerAddNewOptionalInfoapi = async (orderId, applianceId) => {\r\n    //     console.log(optionalrows + \"rows\");\r\n    //     let optionalParams = []\r\n    //     optionalrows.flat().map((row) => {\r\n    //         optionalParams.push({\r\n    //             ApplianceID: applianceId,\r\n    //             Brand: row.Brand,\r\n    //             PortSpeed: row.Port,\r\n    //             SupportedMTUSize: row.SMTU,\r\n    //             SFP: row.SFP,\r\n    //             CableType: row.CableType,\r\n    //             CableLength: row.CableLength,\r\n    //         })\r\n    //     })\r\n\r\n    //     let res: any = null;\r\n    //     res = await orderService.orderoptional.create({ optionalParams });\r\n    //     if (!res.success) {\r\n    //         window.snakAlert.error(res.message);\r\n    //     } else {\r\n    //         if (res.success) {\r\n    //             handleOrderTrackingCreate(orderId)\r\n    //         } else {\r\n    //             window.snakAlert.error(res.message);\r\n    //         }\r\n    //     }\r\n    // }\r\n    // const [grid, setGrid] = React.useState(false);\r\n\r\n    // const [contactData, setContactData] = useState({\r\n    //     address: '',\r\n    //     phone: '',\r\n    //     email: '',\r\n    //     website: ''\r\n    // })\r\n\r\n    // const handleAddNewContactInfoapi = async () => {\r\n    //     let orderParams = {\r\n    //         OrderNO: 1,\r\n    //         AccountID: accountData.AccountID,\r\n    //         AccountName: accountData.AccountName,\r\n    //         AccountPhone: accountData.ContactPhone,\r\n    //         AccountEmail: accountData.ContactEmail,\r\n    //         ContactID: accountData.ContactID,\r\n    //         ContactName: contactData.address,\r\n    //         ContactPhone: contactData.phone,\r\n    //         ContactEmail: contactData.email\r\n    //     }\r\n    //     let res: any = null;\r\n    //     res = await orderService.orders.create(orderParams);\r\n    //     if (!res.success) {\r\n    //         window.snakAlert.error(res.message);\r\n    //     } else {\r\n    //         if (res.success) {\r\n    //             handlerAddNewShippingInfoapi(res.data.OrderID);\r\n    //         } else {\r\n    //             window.snakAlert.error(res.message);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // Account Infor Functions\r\n    const handleAccountInfoChange = (e) => {\r\n        setAccountData({ ...accountData, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const handleContactChange = (e) => {\r\n        //setContactData({ ...contactData, [e.target.name]: e.target.value })\r\n        setAccountData({ ...accountData, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const handlerAddNewOrderApi = async () => {\r\n        let res: any = null;\r\n        let applianceParams = []\r\n        let shippingParams = []\r\n         let orderParams = {\r\n            AccountID: accountData.AccountID,\r\n            AccountName: accountData.AccountName,\r\n            AccountPhone: accountData.AccountPhone,\r\n            AccountEmail: accountData.ContactEmail,\r\n            AccountWebsite: accountData.AccountWebsite,\r\n            ContactID: accountData.ContactID,\r\n            ContactName: accountData.ContactName,\r\n            ContactPhone: accountData.ContactPhone,\r\n            ContactEmail: accountData.ContactEmail,\r\n            ContactAddress: accountData.ContactAddress,\r\n        }\r\n        console.log(JSON.stringify(orderParams) + \"Order rows\");\r\n        shippingrows.map(row => {\r\n            if (row) {\r\n                shippingParams.push({\r\n                    Title: row.Title,\r\n                    DeliverTo: row.Deliver,\r\n                    Address: row.Address,\r\n                    Phone: row.Phone,\r\n                    Email: row.Email\r\n                })\r\n            }\r\n        })\r\n        console.log(shippingrows,\"Shipping rows\");\r\n        console.log(appliancerows,\"Appliances rows\");\r\n        console.log(optionalrows, \"rows\");\r\n        appliancerows.flat().map((row) => {\r\n            if (row) {\r\n                applianceParams.push({\r\n                    ProductID: row.ProductID,\r\n                    Interface: row.ApplianceInterfaces,\r\n                    InterfaceIp: row.InterfaceIpAddress,\r\n                    Subnet: row.SubnetMask,\r\n                    DefaultGateway: row.DefaultGateway,\r\n                    MTUSize: row.MTUSize,\r\n                    PrimaryDNS: row.PrimaryDNSServer,\r\n                    SecondaryDNS: row.SecondaryDNSServer,\r\n                    Note: row.Note,\r\n                    ShippingTitle: row.ShippingTitle,\r\n                    ShippingID: row.ShippingID\r\n                })\r\n            }\r\n        })\r\n        \r\n        let optionalParams = []\r\n        optionalrows.flat().map((row) => {\r\n            optionalParams.push({\r\n                Brand: row.Brand,\r\n                PortSpeed: row.Port,\r\n                SupportedMTUSize: row.SMTU,\r\n                SFP: row.SFP,\r\n                CableType: row.CableType,\r\n                CableLength: row.CableLength,\r\n            })\r\n        })\r\n\r\n        let opportunityParams = {\r\n                OpportunityID: opData.OpportunityID,\r\n                Name: opData.Name,\r\n                StageName: opData.StageName,\r\n                Amount: opData.Amount,\r\n        }\r\n        console.log(opportunityParams,\"Opportunity\")\r\n\r\n        let params = {\r\n            orderParams,\r\n            shippingParams,\r\n            applianceParams,\r\n            optionalParams,\r\n            opportunityParams\r\n        }\r\n        //let params = [orderParams,shippingParams,optionalParams,applianceParams]\r\n        \r\n        res = await orderService.orders.createOrder(params);\r\n        if (!res.success) {\r\n            window.snakAlert.error(res.message);\r\n        } else {\r\n            if (res.success) {\r\n                history.push(\"/supplierportal/ordertracking\")\r\n            } else {\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        //setVendorID(event.target.value);\r\n        // setVendorName(event.target.value);\r\n        //alert(\"Handle\");\r\n        if (shippingrows?.length > 0) {\r\n            //handleAddNewContactInfoapi();\r\n            handlerAddNewOrderApi();\r\n        }\r\n        else {\r\n            window.snakAlert.error(\"Add shipping details\");\r\n        }\r\n\r\n    };\r\n    console.log(totalAppliances)\r\n    const handlerDeleteApplianceInfoGrid = (ind)=>{\r\n        let _appliancerows = [...appliancerows]\r\n        \r\n        setTotalAppliances(totalAppliances - 1)\r\n        _appliancerows.splice(ind,1)\r\n        setApplianceRows(_appliancerows);\r\n        //console.log(_appliancerows)\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"page-content\">\r\n                <h2>New Order Form <span>Create new order</span></h2>\r\n                <Divider />\r\n                <ValidatorForm\r\n                    onSubmit={handleSubmit}\r\n                    onError={errors => {\r\n                        console.log(errors)\r\n                    }}\r\n                >\r\n                    <h4>Account Information</h4>\r\n                    <Paper elevation={1} className=\"section mt-22\">\r\n                        <Grid container spacing={6}>\r\n                            <Grid item md={6} xs={6}>\r\n                                <TextField size=\"small\" id=\"full-width-text-field\" name=\"AccountName\" label=\"Account Name\" fullWidth onChange={handleAccountInfoChange} value={accountData.AccountName} required />\r\n                            </Grid>\r\n                            <Grid item md={6} xs={6}>\r\n                                <TextField size=\"small\" id=\"full-width-text-field\" name=\"ContactName\" label=\"Contact Name\" fullWidth onChange={handleAccountInfoChange} value={accountData.ContactName} required />\r\n                            </Grid>\r\n                            <Grid item md={6} xs={6}>\r\n                                <TextField size=\"small\" id=\"full-width-text-field\" name=\"AccountPhone\" label=\"Phone\" fullWidth onChange={handleAccountInfoChange} value={accountData.AccountPhone} required />\r\n                            </Grid>\r\n                            <Grid item md={6} xs={6}>\r\n                                <TextField size=\"small\" id=\"full-width-text-field\" name=\"AccountEmail\" label=\"Email\" fullWidth onChange={handleAccountInfoChange} value={accountData.AccountEmail} required />\r\n                            </Grid>\r\n                        </Grid><br />\r\n                    </Paper>\r\n\r\n                    <h4>Contact Information</h4>\r\n                    <Paper elevation={1} className=\"section mt-22\">\r\n                        <TextFieldsListing noOfColumn={2} onContactChange={handleContactChange} accountData={accountData}/>\r\n                    </Paper>\r\n\r\n                    <h4>Shipping Information</h4>\r\n                    <Paper elevation={1} className=\"section mt-22\">\r\n                        <Tooltip title=\"Add new address\">\r\n                            <Button variant=\"contained\" color=\"success\" size=\"small\"  onClick={handlerAddNewShippingInfo}>\r\n                                <Icon className=\"icon-white\">post_add</Icon>\r\n                            </Button>\r\n                        </Tooltip>\r\n                        <Divider className=\"mt-10\"/>\r\n\r\n                        <Table sx={{ minWidth: 650 }} size=\"small\" className=\"grid-table mt-10\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>{columns1[0].headerName}</TableCell>\r\n                                    <TableCell>{columns1[1].headerName}</TableCell>\r\n                                    <TableCell>{columns1[2].headerName}</TableCell>\r\n                                    <TableCell>{columns1[3].headerName}</TableCell>\r\n                                    <TableCell>{columns1[4].headerName}</TableCell>\r\n                                    <TableCell></TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {shippingrows && shippingrows.map((row: any, index: number) => (\r\n                                    <>\r\n                                        {ShippingInfoID != null && ShippingInfoID == index ?\r\n                                            <InlineShippingRow\r\n                                                onClose={handlerCloseEditableShippingInfo}\r\n                                                onSave={handlerUpdateShippngInfo}\r\n                                                data={row}\r\n                                            />\r\n                                            :\r\n                                            <TableRow key={row.id}>\r\n                                                <TableCell>{row.Title}</TableCell>\r\n                                                <TableCell>{row.Deliver}</TableCell>\r\n                                                <TableCell>{row.Address}</TableCell>\r\n                                                <TableCell>{row.Phone}</TableCell>\r\n                                                <TableCell>{row.Email}</TableCell>\r\n                                                <TableCell align=\"center\">\r\n                                                    <IconButton size=\"small\" className=\"action\" onClick={() => handlerDeleteShippingInfo(index)}>\r\n                                                        <Icon className=\"\">delete_outline</Icon>\r\n                                                    </IconButton> &nbsp;\r\n                                                    <IconButton size=\"small\" className=\"action\">\r\n                                                        <Icon className=\"\" onClick={() => handlerMoodifyShipppingInfo(index)}>edit</Icon>\r\n                                                    </IconButton>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        }\r\n                                    </>\r\n                                ))}\r\n                                {ShowAddNewShippingInfo && <InlineShippingRow onClose={handlerCloseShippingInfo} onSave={handlerAddNewShipInfo} />}\r\n                            </TableBody>\r\n                        </Table>\r\n                        <ModalDialog\r\n                        />\r\n\r\n                    </Paper>\r\n                    <Stack direction=\"row\" justifyContent=\"space-between\">\r\n                        <h4>Appliance Settings</h4>\r\n                        <br></br>\r\n                        <div style={{ marginTop: \"15px\",marginBottom:'10px' }}>\r\n                            <Button style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"secondary\" size=\"small\" startIcon={<Icon>post_add</Icon>} onClick={() => handleAddApplianceClick()}>\r\n                                Add Appliance\r\n                            </Button>\r\n                        </div>\r\n                    </Stack>\r\n                    {appliancerows && appliancerows.map((appliance, ind) => (\r\n                        <Paper className=\"section mt-2 mb-12\">\r\n                            <Grid container>\r\n                                <Grid item md={6}>\r\n                                    <Tooltip title=\"Add appliance record\">\r\n                                        <Button variant=\"contained\" color=\"success\" size=\"small\" onClick={() => handlerAddNewApplianceInfo(ind)}>\r\n                                            <Icon className=\"icon-white\">post_add</Icon>\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                                {ind != 0 &&\r\n                                <Grid item md={6}>\r\n                                    <Stack justifyContent=\"right\" direction=\"row\">\r\n                                        <Tooltip title=\"Delete appliance record\">\r\n                                            <IconButton size=\"small\" onClick={()=>handlerDeleteApplianceInfoGrid(ind)}>\r\n                                                <Icon className=\"icon-red\">delete_forever</Icon>\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </Stack>\r\n                                </Grid>\r\n                                }\r\n                            </Grid>\r\n                            \r\n                            \r\n                            <Divider className=\"mt-10\"/>\r\n                            <Table sx={{ minWidth: 750 }} size=\"small\" className=\"grid-table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell width='200px'>{columns[0].headerName}</TableCell>\r\n                                        <TableCell>{columns[1].headerName}</TableCell>\r\n                                        <TableCell>{columns[9].headerName}</TableCell>\r\n                                        <TableCell>{columns[2].headerName}</TableCell>\r\n                                        <TableCell width=\"60px\">{columns[3].headerName}</TableCell>\r\n                                        <TableCell>{columns[4].headerName}</TableCell>\r\n                                        <TableCell width=\"60px\">{columns[5].headerName}</TableCell>\r\n                                        <TableCell>{columns[6].headerName}</TableCell>\r\n                                        <TableCell>{columns[7].headerName}</TableCell>\r\n                                        <TableCell>{columns[8].headerName}</TableCell>\r\n                                        \r\n                                        <TableCell width=\"100px\"></TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {appliance && appliance.map((row, index) => (\r\n                                        <>\r\n                                            {ApplianceInfoID != null && ApplianceInfoID == index ?\r\n                                                <InlineApplianceRow\r\n                                                    onClose={handlerCloseEditableApplianceInfo}\r\n                                                    onSave={handlerUpdateApplianceInfo}\r\n                                                    data={row}\r\n                                                    ind={ind}\r\n                                                    rowship={shippingrows}\r\n                                                />\r\n                                                :\r\n                                                <TableRow key={row.id}>\r\n                                                    <TableCell>\r\n                                                        {row?.ProductName || '-'}\r\n                                                    </TableCell>\r\n                                                    <TableCell>\r\n                                                        {row.ApplianceInterfaces}\r\n                                                    </TableCell>\r\n                                                    <TableCell>{row.ShippingTitle}</TableCell>\r\n                                                    <TableCell>{row.InterfaceIpAddress}</TableCell>\r\n                                                    <TableCell>{row.SubnetMask}</TableCell>\r\n                                                    <TableCell>{row.DefaultGateway}</TableCell>\r\n                                                    <TableCell>{row.MTUSize}</TableCell>\r\n                                                    <TableCell>{row.PrimaryDNSServer}</TableCell>\r\n                                                    <TableCell>{row.SecondaryDNSServer}</TableCell>\r\n                                                    <TableCell>{row.Note}</TableCell>\r\n                                                    \r\n                                                    <TableCell>\r\n                                                        <IconButton size=\"small\" className=\"action\" onClick={() => handlerDeleteApplianceInfo(ind, index)}>\r\n                                                            <Icon className=\"\">delete_outline</Icon>\r\n                                                        </IconButton> &nbsp;\r\n                                                        <IconButton size=\"small\" className=\"action\">\r\n                                                            <Icon className=\"\" onClick={() => handlerMoodifyApplianceInfo(ind, index)}>edit</Icon>\r\n                                                        </IconButton>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            }\r\n                                        </>\r\n                                    ))}\r\n                                    {ShowAddNewApplianceInfo && ind == currentIndex && <InlineApplianceRow ind={ind} onClose={handlerCloseApplianceInfo} onSave={handlerAddNewAppInfo} />}\r\n                                </TableBody>\r\n                            </Table>\r\n                            <ModalDialog\r\n                            />\r\n                            <Divider />\r\n                            <h4>Optional Information</h4>\r\n                            <Paper elevation={1} className=\"section mt-22\">\r\n                                <Tooltip title=\"Add appliance optional info.\">\r\n                                    <Button variant=\"contained\" color=\"success\" size=\"small\" onClick={() => handlerAddNewOptionalInfo(ind)}>\r\n                                        <Icon className=\"icon-white\">post_add</Icon>\r\n                                    </Button>\r\n                                </Tooltip>\r\n                                <Divider className=\"mt-10\"/>\r\n                                <Table sx={{ minWidth: 650 }} size=\"small\" className=\"grid-table mt-10\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>Brand/Model</TableCell>\r\n                                            <TableCell>Port Speed</TableCell>\r\n                                            <TableCell>Supported MTU size</TableCell>\r\n                                            <TableCell>SFP+,SPF module or DAC</TableCell>\r\n                                            <TableCell>Cable Type</TableCell>\r\n                                            <TableCell>Cable Length</TableCell>\r\n                                            <TableCell></TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {optionalrows && optionalrows[ind].map((row, index) => (\r\n                                            <>\r\n                                                {OptionalInfoID != null && OptionalInfoID == index ?\r\n                                                    <InlineOptionalRow\r\n                                                        onClose={handlerCloseEditableOptionalInfo}\r\n                                                        onSave={handlerUpdateOptionalInfo}\r\n                                                        data={row}\r\n                                                        ind={ind}\r\n                                                    />\r\n                                                    : (\r\n                                                        <TableRow\r\n                                                            key={row.id}\r\n                                                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                                                        >\r\n                                                            <TableCell component=\"th\" scope=\"row\">\r\n                                                                {row.Brand}\r\n                                                            </TableCell>\r\n                                                            <TableCell>{row.Port}</TableCell>\r\n                                                            <TableCell>{row.SMTU}</TableCell>\r\n                                                            <TableCell>{row.SFP}</TableCell>\r\n                                                            <TableCell>{row.CableType}</TableCell>\r\n                                                            <TableCell>{row.CableLength}</TableCell>\r\n                                                            <TableCell>\r\n                                                                <IconButton className=\"mr10\" size=\"small\" onClick={() => handlerDeleteOptionalInfo(ind, index)}>\r\n                                                                    <Icon>delete_outline</Icon>\r\n                                                                </IconButton>\r\n                                                            </TableCell>\r\n                                                            <TableCell>\r\n                                                                <IconButton className=\"mr10\" size=\"small\" onClick={() => handlerMoodifyOptionalgInfo(index)}>\r\n                                                                    <EditIcon>Edit</EditIcon>\r\n                                                                </IconButton>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    )}\r\n                                            </>\r\n                                        ))}\r\n                                        {ShowAddNewOptionalInfo && ind == currentIndex && <InlineOptionalRow ind={ind} onClose={handlerCloseOptionalInfo} onSave={handlerAddNewOptInfo} />}\r\n                                    </TableBody>\r\n                                </Table>\r\n                                <ModalDialog\r\n                                />\r\n                            </Paper>\r\n                        </Paper>\r\n                    ))}\r\n\r\n\r\n\r\n                    <br /><Divider />\r\n                    <Stack className=\"mt-10\" direction=\"row\" spacing={2} justifyContent=\"flex-end\">\r\n                        <Button variant=\"contained\" color=\"secondary\" type=\"submit\" startIcon={<Icon>check_circle</Icon>}>SUBMIT</Button>\r\n                    </Stack>\r\n                </ValidatorForm>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport const TextFieldsListing = (props) => {\r\n\r\n    const { fields, noOfColumn, InputProps,accountData } = props;\r\n    const lists = [\r\n        {\r\n            \"Primary Contact\": \"\",\r\n            \"Shipping Address\": \"\"\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <Grid container spacing={6}>\r\n                <Grid item md={Math.floor(12 / noOfColumn)} xs={6}>\r\n                    <TextField size=\"small\" id=\"full-width-text-field\" label=\"Address\" name=\"ContactAddress\" value={accountData.ContactAddress} fullWidth InputProps={InputProps} onChange={(e: any) => { props.onContactChange(e) }} required />\r\n                </Grid>\r\n                <Grid item md={Math.floor(12 / noOfColumn)} xs={6}>\r\n                    <TextField size=\"small\" id=\"full-width-text-field\" label=\"Phone\" name=\"ContactPhone\" value={accountData.ContactPhone} fullWidth InputProps={InputProps} onChange={(e: any) => { props.onContactChange(e) }} required />\r\n                </Grid>\r\n                <Grid item md={Math.floor(12 / noOfColumn)} xs={6}>\r\n                    <TextField size=\"small\" id=\"full-width-text-field\" label=\"Email\" name=\"ContactEmail\" value={accountData.ContactEmail} fullWidth InputProps={InputProps} onChange={(e: any) => { props.onContactChange(e) }} required />\r\n                </Grid>\r\n                <Grid item md={Math.floor(12 / noOfColumn)} xs={6}>\r\n                    <TextField size=\"small\" id=\"full-width-text-field\" label=\"Website\" name=\"AccountWebsite\" value={accountData.AccountWebsite} fullWidth InputProps={InputProps} onChange={(e: any) => { props.onContactChange(e) }} required />\r\n                </Grid>\r\n                <Grid item md={Math.floor(12 / noOfColumn)} xs={6}>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nconst InlineShippingRow = (props: any) => {\r\n    const { data, onSave, onClose, ind } = props;\r\n    const [Title, setTitle] = useState('');\r\n    const [Deliver, setDeliver] = useState('');\r\n    const [Address, setAddress] = useState('');\r\n    const [Phone, setPhone] = useState('');\r\n    const [Email, setEmail] = useState('');\r\n    const [index, setIndex] = useState();\r\n    const [id, setId] = useState();\r\n\r\n    // for update row\r\n    const onSaveHandler = () => {\r\n        onSave({ id, index, Title, Deliver, Address, Phone, Email });\r\n    }\r\n    useEffect(() => {\r\n        if (data && Object.keys(data).length >= 0) {\r\n            setId(data.id);\r\n            setIndex(ind);\r\n            setTitle(data.Title);\r\n            setDeliver(data.Deliver);\r\n            setAddress(data.Address);\r\n            setPhone(data.Phone);\r\n            setEmail(data.Email);\r\n        }\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n        setIndex(ind);\r\n    }, [ind])\r\n\r\n\r\n    return (\r\n        <>\r\n            <TableRow>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" margin=\"dense\" value={Title} onChange={(e) => { setTitle(e.target.value) }} required />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" margin=\"dense\" value={Deliver} onChange={(e) => { setDeliver(e.target.value) }} required />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" margin=\"dense\" value={Address} onChange={(e) => { setAddress(e.target.value) }} required />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" margin=\"dense\" value={Phone} onChange={(e) => { setPhone(e.target.value) }} required />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" margin=\"dense\" value={Email} onChange={(e) => { setEmail(e.target.value) }} required />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <IconButton size=\"small\" className=\"action\" onClick={onSaveHandler}>\r\n                        <Icon className=\"\">done</Icon>\r\n                    </IconButton> &nbsp;\r\n                    <IconButton size=\"small\" className=\"action\" onClick={onClose}>\r\n                        <Icon className=\"\">close</Icon>\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nconst InlineApplianceRow = (props: any) => {\r\n    const UserRole = useSelector((state: any) =>\r\n        state.user ? state.user.role : null\r\n    );\r\n    const [selectedProduct, setSelectedProduct] = useState({ ProductID: null, ProductName: '' })\r\n    const [productList, setProductList] = useState([])\r\n    const { data, onSave, onClose, ind, rowship } = props;\r\n    const [id, setId] = useState(null)\r\n    const [index, setIndex] = useState(null)\r\n    const [ApplianceInterfaces, setApplianceInterfaces] = useState('');\r\n    const [InterfaceIpAddress, setInterfaceIpAddress] = useState('');\r\n    const [SubnetMask, setSubnetMask] = useState('');\r\n    const [DefaultGateway, setDefaultGateway] = useState('');\r\n    const [MTUSize, setMTUSize] = useState('');\r\n    const [PrimaryDNSServer, setPrimaryDNSServer] = useState('');\r\n    const [SecondaryDNSServer, setSecondaryDNSServer] = useState('');\r\n    const [Note, setNote] = useState('');\r\n    const [ShippingTitle, setShippingTitle] = useState('');\r\n    const [ShippingID, setShippingID] = useState(0);\r\n    const ship ={\r\n        id: 0,\r\n        Title: \"New Title\"\r\n    }\r\n    const [SelectedRow, setSelectedRow ]= useState(ship);\r\n    const params = useParams();\r\n    const ITEM_HEIGHT = 38;\r\n    const ITEM_PADDING_TOP = 8;\r\n    const MenuProps = {\r\n        PaperProps: {\r\n            style: {\r\n                maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n                width: 50\r\n            }\r\n        }\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     //   Get product data\r\n    //     getProductList()\r\n\r\n    // }, [])\r\n\r\n    // // Get list of products\r\n    // const getProductList = async () => {\r\n    //     let res: any;\r\n    //     let payload = { ...params }\r\n    //     if (UserRole === 'Admin') {\r\n    //         res = await productService.products.listProductsSearch(payload)\r\n    //     } else if (UserRole === 'Supplier') {\r\n    //         res = await productService.products.listProductsByVendorId(payload)\r\n    //     }\r\n    //     if (!res.success) {\r\n    //         window.snakAlert.error(res.message);\r\n    //     } else {\r\n    //         setProductList(res.data)\r\n    //     }\r\n    // }\r\n\r\n    // Select Product\r\n    const handleOptionSelect = (e, r) => {\r\n        console.log(r)\r\n        setSelectedProduct(r)\r\n    }\r\n\r\n    // for update row\r\n    const onSaveHandler = () => {\r\n        onSave({ index, id, selectedProduct, ApplianceInterfaces, InterfaceIpAddress, SubnetMask, DefaultGateway, MTUSize, PrimaryDNSServer, SecondaryDNSServer, Note,ShippingTitle, ShippingID });\r\n    }\r\n    useEffect(() => {\r\n        setIndex(ind)\r\n    }, [ind])\r\n\r\n    useEffect(() => {\r\n        if (data && Object.keys(data).length > 0) {\r\n            setIndex(ind)\r\n            setId(data.id)\r\n            setApplianceInterfaces(data.ApplianceInterfaces);\r\n            setInterfaceIpAddress(data.InterfaceIpAddress);\r\n            setSubnetMask(data.SubnetMask);\r\n            setDefaultGateway(data.DefaultGateway);\r\n            setMTUSize(data.MTUSize);\r\n            setPrimaryDNSServer(data.PrimaryDNSServer);\r\n            setSecondaryDNSServer(data.SecondaryDNSServer);\r\n            setNote(data.Note);\r\n            setShippingTitle(data.ShippingTitle)\r\n            setShippingID(data.ShippingID);\r\n            setSelectedProduct({\r\n                ProductID: data.ProductID,\r\n                ProductName: data.ProductName\r\n            });\r\n        }\r\n        console.log(data,\"Data\")\r\n    }, [data])\r\n\r\n\r\n    const getShippingIndex=(id,rowship:any)=>{\r\n        for(let i=0;i<rowship?.length;i++){\r\n            if(rowship[i].id===id){\r\n                return i;\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n    const handleShippingSelect=(e)=>{\r\n        console.log(e.target.value);\r\n        console.log(e.target);\r\n        // console.log(e.target[e.target.selectedIndex].id);\r\n        //console.log(e.target.options[e.target.selectedIndex].id);\r\n        //console.log(e.currentTarget.value);\r\n        setSelectedRow(e.target.value);\r\n        setShippingTitle(e.target.value.Title);\r\n        console.log(ShippingTitle);\r\n        setShippingID(e.target.value.id);\r\n\r\n        console.log(\"The selected ID is\"+ShippingID);\r\n\r\n    }\r\n\r\n    const handleProductSelect=(e)=>{\r\n        console.log(e);\r\n        setSelectedProduct({\r\n            ProductID: e.id,\r\n            ProductName: e.text\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <TableRow>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    {/* <Autocomplete\r\n                        // key={selectedProduct?.ProductID}\r\n                        size=\"small\"\r\n                        onChange={handleOptionSelect}\r\n                        disablePortal\r\n                        defaultValue={selectedProduct}\r\n                        \r\n                        getOptionLabel={(option) => option.ProductName}\r\n                        options={productList}\r\n                        validators={['required']}\r\n                        renderInput={(params) => <TextField size=\"small\" variant=\"standard\" margin=\"dense\" {...params}/>}\r\n                    /> */}\r\n                    <SearchableDropdown params={{acid:params?.accountId}} variant=\"standard\" label=\"Products\" action=\"searchSfdcLiveProducts\" onSelect={(value: any) => handleProductSelect(value)} defaultValue={selectedProduct?.ProductName} value={selectedProduct?.ProductName}/>\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" placeholder=\"ILO\" margin=\"dense\" value={ApplianceInterfaces} onChange={(e) => { setApplianceInterfaces(e.target.value) }} required />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <FormControl sx={{ m: 1, width: 100, mt: 3 }}>\r\n                        <Select\r\n                            value={rowship?rowship[getShippingIndex(SelectedRow.id,rowship)]:null}\r\n                            //value={SelectedRow}\r\n                            //name={ShippingTitle}\r\n                             //@ts-ignore [1]\r\n                            size=\"small\"\r\n                            onChange={(e) => { handleShippingSelect(e) }}\r\n                            MenuProps={MenuProps}\r\n                            defaultValue={SelectedRow}\r\n                            variant=\"standard\"\r\n                            placeholder=\"My New title\"\r\n                        >\r\n                            {rowship?.length != 0 && rowship?.map((row) => {\r\n                                return (\r\n                                    <MenuItem \r\n                                    key={row.id}\r\n                                    value={row}\r\n                                    >{row?.Title}\r\n                                    {/* {console.log(\"Shipping row Title \" + row.Title)}\r\n                                    {console.log(\"Shipping row \" + JSON.stringify(row))}\r\n                                    {console.log(\"Shipping row \" + JSON.stringify(rowship))} */}\r\n                                    </MenuItem>\r\n                                )\r\n                            })}\r\n                            {rowship?.length === 0 && (\r\n                                <MenuItem \r\n                                    key={SelectedRow.id}\r\n                                    value={SelectedRow}\r\n                                    >{SelectedRow?.Title}\r\n                                     {console.log(\"Shipping Title \" + SelectedRow?.Title)}\r\n                                    </MenuItem>\r\n                            )}\r\n                        </Select>\r\n                    </FormControl>\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" placeholder=\"192.168.10.50\" margin=\"dense\" value={InterfaceIpAddress} onChange={(e) => { setInterfaceIpAddress(e.target.value) }} required />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" placeholder=\"/30\" margin=\"dense\" value={SubnetMask} onChange={(e) => { setSubnetMask(e.target.value) }} required />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" placeholder=\"192.168.10.49\" margin=\"dense\" value={DefaultGateway} onChange={(e) => { setDefaultGateway(e.target.value) }} required />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" placeholder=\"1500\" margin=\"dense\" value={MTUSize} onChange={(e) => { setMTUSize(e.target.value) }} required />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" placeholder=\"Not Required\" margin=\"dense\" value={PrimaryDNSServer} onChange={(e) => { setPrimaryDNSServer(e.target.value) }} required />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" placeholder=\"Not Required\" margin=\"dense\" value={SecondaryDNSServer} onChange={(e) => { setSecondaryDNSServer(e.target.value) }} required />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" placeholder=\"Layer-2\" margin=\"dense\" value={Note} onChange={(e) => { setNote(e.target.value) }} required />\r\n                </TableCell>\r\n                \r\n                <TableCell>\r\n                    <IconButton size=\"small\" className=\"action\" onClick={onSaveHandler}>\r\n                        <Icon className=\"\">done</Icon>\r\n                    </IconButton> &nbsp;\r\n                    <IconButton size=\"small\" className=\"action\" onClick={onClose}>\r\n                        <Icon className=\"\">close</Icon>\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nconst InlineOptionalRow = (props: any) => {\r\n    const { data, onSave, onClose, ind } = props;\r\n    const [id, setId] = useState()\r\n    const [index, setIndex] = useState()\r\n    const [Brand, setBrand] = useState('');\r\n    const [Port, setPort] = useState('');\r\n    const [SMTU, setSMTU] = useState('');\r\n    const [SFP, setSFP] = useState('');\r\n    const [CableType, setCableType] = useState('');\r\n    const [CableLength, setCableLength] = useState('');\r\n\r\n    // for update row\r\n    const onSaveHandler = () => {\r\n        onSave({ id, index, Brand, Port, SMTU, SFP, CableType, CableLength });\r\n    }\r\n    useEffect(() => {\r\n        setIndex(ind)\r\n    }, [ind])\r\n\r\n    useEffect(() => {\r\n        if (data && Object.keys(data).length >= 0) {\r\n            setIndex(ind)\r\n            setId(data.id)\r\n            setBrand(data.Brand);\r\n            setPort(data.Port);\r\n            setSMTU(data.SMTU);\r\n            setSFP(data.SFP);\r\n            setCableType(data.CableType);\r\n            setCableLength(data.CableLength);\r\n        }\r\n    }, [data])\r\n\r\n    return (\r\n        <>\r\n            <TableRow>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" margin=\"dense\" value={Brand} onChange={(e) => { setBrand(e.target.value) }} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" margin=\"dense\" value={Port} onChange={(e) => { setPort(e.target.value) }} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" margin=\"dense\" value={SMTU} onChange={(e) => { setSMTU(e.target.value) }} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" margin=\"dense\" value={SFP} onChange={(e) => { setSFP(e.target.value) }} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" margin=\"dense\" value={CableType} onChange={(e) => { setCableType(e.target.value) }} />\r\n                </TableCell>\r\n                <TableCell component=\"td\" scope=\"row\">\r\n                    <TextField size=\"small\" variant=\"standard\" margin=\"dense\" value={CableLength} onChange={(e) => { setCableLength(e.target.value) }} />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <IconButton size=\"small\" className=\"action\" onClick={onSaveHandler}>\r\n                        <Icon className=\"\">done</Icon>\r\n                    </IconButton> &nbsp;\r\n                    <IconButton size=\"small\" className=\"action\" onClick={onClose}>\r\n                        <Icon className=\"\">close</Icon>\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OrderForm;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\reports\\BillingReport.tsx",["1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246"],"import React,{useEffect, useState} from 'react';\r\nimport {Grid,Paper,LinearProgress, TextField,Icon,Typography, IconButton,Collapse } from '@mui/material'\r\nimport SearchableDropdown from \"../../../components/SearchableDropdown\";\r\n\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\n\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport CDateRangePicker from '../../../components/CDateRangePicker';\r\n\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport ABU from '../../../services/ABU';\r\nimport u from '../../../services/util';\r\nimport { USER_TYPE } from \"../../../const\";\r\n\r\nconst BillingReport = ()=>{\r\n    const accid = useSelector((state: any) =>state.user ? state.user.accid : null);\r\n    const UserType = useSelector((state: any) =>state.user ? state.user.type : null);\r\n\r\n    const [RDateRange, setRDateRange] = useState<any>();\r\n    const [Account, setAccount] = useState<any|null>(null);\r\n    const [GridData,setGridData] = useState<any|null>(null);\r\n    const [loading,setloading] = useState<boolean>(false);\r\n    \r\n    const [SelectedRow, setSelectedRow] = useState(-1); // accordition \r\n\r\n    const handlerOnSelectAccount = (value:any)=>{\r\n        setAccount(value.id);\r\n    }\r\n    \r\n    const handlerSetDate = (dateRange:any)=>{\r\n        if(dateRange){\r\n           setRDateRange(dateRange);\r\n        }\r\n    }\r\n\r\n    const load = async()=>{\r\n        setloading(true)\r\n        const res:any = await ABU.getReport({id:Account,...RDateRange});\r\n        if(res.success){\r\n            setGridData(res.data)\r\n        }else{\r\n            window.snakAlert.error(res.message)\r\n        }\r\n        setloading(false)\r\n    }\r\n    const selectRow = (index:number)=>{\r\n        if(SelectedRow == index){\r\n            setSelectedRow(-1)\r\n        }else{\r\n            setSelectedRow(index)\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(Account && RDateRange){\r\n            load();\r\n        }\r\n    },[Account,RDateRange])\r\n    \r\n    useEffect(() => {\r\n        if (UserType === USER_TYPE.CUSTOMER) {\r\n            setAccount(accid);\r\n        }\r\n    }, [UserType]);\r\n\r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n             <div className=\"page-content\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={6}>\r\n                        <h2>Billing Report <span>Aviatrix Usage Billing Report</span></h2>\r\n                    </Grid>\r\n                    <Grid item md={6}>\r\n                        <Grid container spacing={3} justifyContent=\"right\">\r\n                            <Grid item md={6}>\r\n                                <CDateRangePicker\r\n                                    initialDateRange='Last Week'\r\n                                    onSetDate={handlerSetDate}\r\n                                />\r\n                            </Grid>\r\n                            {UserType != USER_TYPE.CUSTOMER && \r\n                            <Grid item md={6}>\r\n                                <SearchableDropdown action=\"searchAccount\" onSelect={(value:any)=> handlerOnSelectAccount(value) } />\r\n                            </Grid>\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n                {loading && <LinearProgress/>}\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    \r\n                    {!GridData && <div style={{fontSize:'12px',textAlign:'center'}}>No records found</div>}\r\n                    {GridData && GridData.summary && \r\n                    <>\r\n                    <TableContainer component={Paper}>\r\n                        <Table sx={{ minWidth: 650 }} size=\"small\" className='grid-table' aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell width=\"60px\"></TableCell>\r\n                                    <TableCell>Date</TableCell>\r\n                                    <TableCell>ABU Usage</TableCell>\r\n                                    <TableCell>Cost</TableCell>\r\n                                    <TableCell>Plan</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {GridData.records && GridData.records.map((row:any,ind:number)=>(\r\n                                <>\r\n                                    <TableRow key={ind}>\r\n                                        <TableCell>\r\n                                            <IconButton\r\n                                                aria-label=\"expand row\"\r\n                                                size=\"small\"\r\n                                                onClick={() => selectRow(ind)}\r\n                                            >\r\n                                                {SelectedRow==ind ? <KeyboardArrowUpIcon sx={{fontSize:'16px'}} /> : <KeyboardArrowDownIcon  sx={{fontSize:'16px'}} />}\r\n                                            </IconButton>\r\n                                        </TableCell>\r\n                                        <TableCell>{row.date}</TableCell>\r\n                                        <TableCell>{row.value}</TableCell>\r\n                                        <TableCell>{u.format.currency(row.revenue)}</TableCell>\r\n                                        <TableCell>{row.billing_plan}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow key={`${ind}_${row.date}`} className={`${SelectedRow==ind?'expandable':'no-border'}`}>\r\n                                        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={5}>\r\n                                            <Collapse in={ind==SelectedRow} timeout=\"auto\" unmountOnExit>\r\n                                                \r\n                                                <DetailBreakdown account={Account} date = {row.date}/>\r\n\r\n                                            </Collapse>\r\n                                        </TableCell>\r\n                                    </TableRow>    \r\n                                </>    \r\n                                ))}\r\n                                <TableRow className='summary'>\r\n                                    <TableCell></TableCell>\r\n                                    <TableCell></TableCell>\r\n                                    <TableCell><strong>Grand Total</strong></TableCell>\r\n                                    <TableCell><strong>{GridData.summary.value}</strong></TableCell>\r\n                                    <TableCell><strong>{u.format.currency(GridData.summary.revenue)}</strong></TableCell>\r\n                                </TableRow>                                \r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    </>\r\n                    } \r\n                </Paper>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst DetailBreakdown = ({account,date})=>{\r\n    const [Data,setData] = useState<any|null>(null);\r\n    const [loading,setloading] = useState<boolean>(false);\r\n\r\n    const load = async()=>{\r\n        setloading(true)\r\n        const res:any = await ABU.getBreakdown({id:account,date});\r\n        if(res.success){\r\n            setData(res.data)\r\n        }else{\r\n            window.snakAlert.error(res.message)\r\n        }\r\n        setloading(false)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        load()\r\n    },[account,date])\r\n\r\n    const isColumnAvailable = (records,column)=>{\r\n        if(records && Array.isArray(records) && records.length > 0){\r\n           return (records[0] && records[0][column])? true:false\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {loading && <LinearProgress className='mt--6'/>}\r\n            <Grid container spacing={4} className='mb-12'>\r\n                {Data && Data.map((series:any,ind:number)=>(\r\n                    <Grid item md={6}>\r\n                        <h4 key={`${series.name}`}>{series.name}</h4>\r\n                        <TableContainer component={Paper} key={ind}>\r\n                            <Table size=\"small\" className='grid-table blue' aria-label=\"simple table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Name</TableCell>\r\n                                        {isColumnAvailable(series.records,\"value\") &&\r\n                                            <TableCell>ABU Usage</TableCell>\r\n                                        }\r\n                                        {isColumnAvailable(series.records,\"usage\") &&\r\n                                            <TableCell>Usage</TableCell>\r\n                                        }\r\n                                        {isColumnAvailable(series.records,\"rate\") &&\r\n                                            <TableCell>Rate</TableCell>\r\n                                        }\r\n                                        <TableCell>Cost</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                {series.records.map((row:any,ind:number)=>(\r\n                                    <TableRow key={ind}>\r\n                                        <TableCell>{row.name}</TableCell>\r\n                                        {row.value && <TableCell>{row.value}</TableCell>}\r\n                                        {row.usage && <TableCell>{row.usage}</TableCell>}\r\n                                        {row.rate && <TableCell>{row.rate}</TableCell>}\r\n                                        <TableCell>{u.format.currency(row.revenue)}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                ))}                \r\n            </Grid>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default BillingReport;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\adminUsers\\index.tsx",["1247","1248","1249","1250"],"import { LinearProgress, Paper } from '@mui/material';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../../services/client';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n// child components\r\nimport Filter from './Filter';\r\nimport Listing from './Listing';\r\n\r\nimport adminService from '../../../services/admin';\r\n\r\nconst AdminUsers:React.FC = ()=>{\r\n    const [data,setData]:any = useState({});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    // listing filters\r\n    const [filters,setFilters] = useState({});\r\n    const rowPerPage = 20;\r\n\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await adminService.users.listing({...filters,rowPerPage});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);    \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handlerDelete = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"User deletion\",`Delete selected user with name \"${row.FullName}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await adminService.users.remove({id:row.UserID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    const handlerActivate = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"User Activation\",`Activate selected user with name \"${row.FullName}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await adminService.users.activate({id:row.UserID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n    },[filters]);\r\n\r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"page-content\">\r\n            <h2>Admin: Users <span>List of all users</span></h2>\r\n        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Filter onSearch={handlerSearch}/>\r\n            </Paper>\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Listing rowPerPage={rowPerPage} data={data} \r\n                    onPagingChange={handlerSearch} \r\n                    onDelete={handlerDelete}\r\n                    onActivate={handlerActivate}\r\n                    />      \r\n                    \r\n            </Paper>\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AdminUsers;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\featuredDashboards\\index.tsx",["1251","1252","1253","1254"],"import { Divider, Grid, Paper } from '@mui/material';\r\nimport { Filter } from '@mui/icons-material';\r\nimport React from 'react';\r\n\r\nimport { useHistory, withRouter, Link as RLink } from \"react-router-dom\";\r\n\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Typography from '@mui/material/Typography';\r\nimport { CardActionArea } from '@mui/material';\r\n\r\nimport img01 from '../../assets/images/01-REP-DASH.png';\r\nimport img02 from '../../assets/images/03-USE-CASES.png';\r\nimport img03 from '../../assets/images/02-ACCOUNT-DIVE.png';\r\n\r\nconst textHeight = {\r\n    height:'60px',\r\n    overflow:'hide'\r\n}\r\n\r\nconst FeaturedDashboards = ()=>{\r\n    \r\n    const history = useHistory();\r\n    \r\n    return(\r\n        <>\r\n            <div className=\"page-content\">\r\n                <h2>Featured Dashboards <span>List of featured dashboards</span></h2>\r\n                <Divider/><br/>\r\n                <Grid container spacing={4}>\r\n                     <Grid item md={4}>\r\n                        <Card onClick={()=>{history.push('/featured-dashboards/rep')}}>\r\n                            <CardActionArea>\r\n                                <CardMedia \r\n                                    component=\"img\"\r\n                                    height=\"100%\"\r\n                                    image={img01}\r\n                                    \r\n                                    style={{padding:'10px'}}\r\n                                />\r\n                                <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                    <strong>Rep Dashboard - v3.0</strong>\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" sx={textHeight}>\r\n                                    Net New Booking MTD to date, Paying Customer MTD, Term Contract MRR Utilization, Open Opportunities, Won Opportunities, Top 10 MRR Customers and more...\r\n                                </Typography>\r\n                                </CardContent>\r\n                            </CardActionArea>\r\n                        </Card>\r\n                     </Grid>\r\n                     <Grid item md={4}>\r\n                     <Card onClick={()=>{history.push('/featured-dashboards/useCase')}}>\r\n                            <CardActionArea>\r\n                                <CardMedia \r\n                                    component=\"img\"\r\n                                    height=\"100%\"\r\n                                    image={img03}\r\n                                    \r\n                                    style={{padding:'10px'}}\r\n                                />\r\n                                <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                    <strong>Account Use Cases</strong>\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" sx={textHeight}>\r\n                                    Live controller snapshot - Last 24 hours, Billable Metrics, AVTX Transit, Firenet, Gateways, Active Mesh and more...\r\n                                </Typography>\r\n                                </CardContent>\r\n                            </CardActionArea>\r\n                        </Card>\r\n                     </Grid>\r\n                     <Grid item md={4}>\r\n                     <Card onClick={()=>{history.push('/featured-dashboards/accountDeepdive')}}>\r\n                            <CardActionArea>\r\n                                <CardMedia \r\n                                    component=\"img\"\r\n                                    height=\"100%\"\r\n                                    image={img02}\r\n                                    \r\n                                    style={{padding:'10px'}}\r\n                                />\r\n                                <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                    <strong>Account Deepdive</strong>\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" sx={textHeight}>\r\n                                Gateways, Revenue this FQ, Billed MRR (excluding service and hardware), MRR Funnel for 12 months, Net new MRR, Consumed Usage Hours and more...\r\n                                </Typography>\r\n                                </CardContent>\r\n                            </CardActionArea>\r\n                        </Card>\r\n                     </Grid>\r\n                     <Grid item md={4}>\r\n                         \r\n                     </Grid>\r\n                     <Grid item md={4}>\r\n                        \r\n                     </Grid>\r\n                     <Grid item md={4}>\r\n                        \r\n                     </Grid>\r\n                     <Grid item md={4}>\r\n                        \r\n                     </Grid>\r\n                     <Grid item md={4}>\r\n                        \r\n                     </Grid>\r\n                </Grid>\r\n      \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FeaturedDashboards;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\tags\\index.tsx",["1255","1256","1257","1258","1259"],"import { LinearProgress, Paper } from '@mui/material';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../../services/client';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n// child components\r\nimport Filter from './Filter';\r\nimport Listing from './Listing';\r\n\r\nimport tagService from '../../../services/tags';\r\nimport { USER_TYPE } from '../../../const';\r\nimport { useSelector } from 'react-redux';\r\nimport AccountTagForm from './form';\r\n\r\nconst AccountTag:React.FC = ()=>{\r\n    const [data,setData]:any = useState({});\r\n    const UserType = useSelector((state: any) =>\r\n    state.user ? state.user.type : null\r\n  );\r\n  const accid = useSelector((state: any) =>\r\n  state.user ? state.user.accid : null\r\n);\r\n    const [processing,setProcessing] = useState(false);\r\n    // listing filters\r\n    const [filters,setFilters] = useState({});\r\n    const rowPerPage = 10;\r\n\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await tagService.listing({...filters,rowPerPage});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);    \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    \r\n\r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n    },[filters]);\r\n\r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"page-content\">\r\n            {UserType != USER_TYPE.CUSTOMER ?\r\n            \r\n            <>\r\n                    <h2>Domains <span>List of all domains</span></h2><Paper elevation={1} className=\"section mt-10\">\r\n                        <Filter onSearch={handlerSearch} />\r\n                    </Paper><LinearProgress className=\"progress-bar\" style={{ display: (processing ? '' : 'none') }} /><Paper elevation={1} className=\"section mt-10\">\r\n                            <Listing rowPerPage={rowPerPage} data={data}\r\n                                onPagingChange={handlerSearch} />\r\n\r\n                        </Paper>\r\n                        </>\r\n                        :\r\n                        <>\r\n                        <h2>Tags <span>List of all tags</span></h2>\r\n                        <div className=\"section mt-10\"></div><AccountTagForm accountType={UserType} domainID={accid} /></>}\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AccountTag;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderTracking\\index.tsx",["1260","1261","1262","1263","1264","1265","1266","1267","1268","1269","1270"],"import { LinearProgress, Paper } from '@mui/material';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../../services/client';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n// child components\r\nimport Filter from './Filter';\r\nimport Listing from './Listing';\r\n\r\nimport adminService from '../../../services/admin';\r\nimport orders from '../../../services/supplierportal/orders';\r\nimport order_shipping from '../../../services/supplierportal/order_shipping';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst AdminUsers:React.FC = ()=>{\r\n    const [data,setData]:any = useState({});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    // listing filters\r\n    const [filters,setFilters] = useState({});\r\n    const rowPerPage = 10;\r\n    const UserRole = useSelector((state: any) =>\r\n    state.user ? state.user.role : null\r\n  );\r\n\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        if (UserRole == 'Admin' || UserRole == 'Supplier Admin' ) {\r\n            let res:any = await orders.listing({...filters,rowPerPage});\r\n           // console.log(JSON.stringify(res));\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                let orders = res.data.orders\r\n                let shipmentOrders = res.data.orderShipments\r\n                 for (let i =0; i<orders?.rows?.length; i++) {\r\n                        let shipment = shipmentOrders.filter(shp => shp.OrderID === orders?.rows[i]['OrderID'])\r\n                        if (shipment?.length > 0)\r\n                            orders.rows[i]['shipmentDetails'] = shipment\r\n                        else \r\n                            orders.rows[i]['shipmentDetails'] = []\r\n                    }\r\n               // console.log(Object.keys(orders.rows).sort(sorter));\r\n                //console.log(orders.rows.sort((a, b) => a.OrderID > b.OrderID ? 1 : -1));\r\n                //setData(orders.rows);    \r\n                setData(orders?.rows?.reverse((a, b) => a?.OrderID > b?.OrderID ? 1 : -1));    \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        } else if (UserRole == 'Admin' || UserRole == 'Supplier Admin' ) {\r\n            //res = await productService.products.getVendorProduct({ id: param.id });\r\n            let res:any = await orders.vendorOrderlisting({...filters,rowPerPage});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setData({});\r\n            }else{\r\n                if(res.success && res.data){\r\n                    let orders = res.data.orders\r\n                    let shipmentOrders = res.data.orderShipments\r\n                     for (let i =0; i<orders?.rows?.length; i++) {\r\n                            let shipment = shipmentOrders.filter(shp => shp.OrderID === orders?.rows[i]['OrderID'])\r\n                            if (shipment?.length > 0)\r\n                                orders.rows[i]['shipmentDetails'] = shipment\r\n                            else \r\n                                orders.rows[i]['shipmentDetails'] = []\r\n                        }\r\n                        setData(orders?.rows?.reverse((a, b) => a?.OrderID > b?.OrderID ? 1 : -1));       \r\n                }else{\r\n                    setData({});\r\n                }\r\n    \r\n            }\r\n        }\r\n        console.log(\"Data is\"+data?.rows);\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handlerDelete = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"Order deletion\",`Delete selected Order with Name \"${row.ContactName}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await orders.remove({id:row.OrderID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    const handlerActivate = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"Prder Activation\",`Activate selected Order with name \"${row.ContactName}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await orders.activate({id:row.OrderID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    // const handlerActivate = async(row:any)=>{\r\n    //     if(await window.ConfirmationDialog(\"User Activation\",`Activate selected user with name \"${row.FullName}\"?`)){\r\n    //         setProcessing(true);\r\n    //         let res:any = await order_shipping.activate({id:row.UserID});\r\n    //         if(!res.success){\r\n    //             window.snakAlert.error(res.message);\r\n    //             setProcessing(false);\r\n    //         }else{\r\n    //             window.snakAlert.success(res.data);\r\n    //             search();\r\n    //         }\r\n    //     }\r\n    // }\r\n    \r\n\r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n            console.log(\"Data is\"+data);\r\n    },[filters]);\r\n\r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"page-content\">\r\n            <h2>Orders <span>List of all orders</span></h2>\r\n        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Filter onSearch={handlerSearch}/>\r\n            </Paper>\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Listing rowPerPage={rowPerPage} data={data} \r\n                    onPagingChange={handlerSearch} \r\n                    onDelete={handlerDelete}\r\n                    onSearch={search}\r\n                    // onActivate={handlerActivate}\r\n                    />      \r\n                    \r\n            </Paper>\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AdminUsers;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\vendors\\index.tsx",["1271","1272","1273","1274","1275","1276"],"import { LinearProgress, Paper } from '@mui/material';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../../services/client';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n// child components\r\nimport Filter from './Filter';\r\nimport Listing from './Listing';\r\n\r\nimport vendorService from '../../../services/supplierportal';\r\nimport { useSelector } from 'react-redux';\r\nimport { USER_TYPE } from '../../../const';\r\n\r\nconst AdminUsers:React.FC = ()=>{\r\n    const [data,setData]:any = useState({});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    // listing filters\r\n    const [filters,setFilters] = useState({});\r\n    const recordPerPage = 10;\r\n\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await vendorService.vendors.listing({...filters,recordPerPage});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);    \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handlerDelete = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"Vendor deletion\",`Delete selected Vendor with name \"${row.VendorName}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await vendorService.vendors.remove({id:row.VendorID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    const UserRole = useSelector((state: any) =>state.user ? state.user.role : null);\r\n\r\n  const handlerActivate = async(row:any)=>{\r\n    if(await window.ConfirmationDialog(\"Vendor Activation\",`Activate selected Vendor with name \"${row.VendorName}\"?`)){\r\n        setProcessing(true);\r\n        let res:any = await vendorService.vendors.activate({id:row.VendorID});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setProcessing(false);\r\n        }else{\r\n            window.snakAlert.success(res.data);\r\n            search();\r\n        }\r\n    }\r\n}\r\n    \r\n    \r\n\r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n    },[filters]);\r\n\r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {(UserRole === \"Supplier Admin\" || UserRole === \"Admin\") ? (<div className=\"page-content\">\r\n            <h2>Vendors <span>List of all Vendors</span></h2>\r\n        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Filter onSearch={handlerSearch}/>\r\n            </Paper>\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Listing rowPerPage={recordPerPage} data={data} \r\n                    onPagingChange={handlerSearch} \r\n                    onDelete={handlerDelete}\r\n                    />      \r\n                    \r\n            </Paper>\r\n            \r\n        </div>) : <h1>Unauthorize to access</h1> }\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AdminUsers;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\products\\index.tsx",["1277","1278","1279","1280"],"import { LinearProgress, Paper } from '@mui/material';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../../services/client';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n// child components\r\nimport Filter from './Filter';\r\nimport Listing from './Listing';\r\n\r\nimport productService from '../../../services/supplierportal';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Products:React.FC = ()=>{\r\n    const userRole = useSelector((state: any) =>\r\n        state.user ? state.user.role : null\r\n    );\r\n\r\n    const [data,setData]:any = useState({});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    // listing filters\r\n    const [filters,setFilters] = useState({});\r\n    const recordPerPage = 10;\r\n\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any\r\n        if (userRole === 'Admin' || userRole === 'Supplier Admin') {\r\n            res = await productService.products.listing({...filters,recordPerPage}); \r\n        } else if (userRole === 'Supplier') {\r\n            res = await productService.products.vendorProductlisting({...filters,recordPerPage}); \r\n \r\n        }\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);    \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handlerDelete = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"Product deletion\",`Delete selected product with name \"${row.ProductName}\"?`)){\r\n            setProcessing(true);\r\n            let res:any;\r\n            if (userRole === 'Admin' || userRole === 'Supplier Admin') {\r\n                res = await productService.products.remove({id:row.ProductID});\r\n            } else if (userRole === 'Supplier') {\r\n                res = await productService.products.removeVendorProduct({id:row.ProductID}); \r\n     \r\n            }\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n\r\n     \r\n    \r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n    },[filters]);\r\n\r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"page-content\">\r\n            <h2>Products <span>List of all Products</span></h2>\r\n        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Filter onSearch={handlerSearch}/>\r\n            </Paper>\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Listing rowPerPage={recordPerPage} data={data} \r\n                    onPagingChange={handlerSearch} \r\n                    onDelete={handlerDelete}\r\n                    />      \r\n                    \r\n            </Paper>\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Products;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\AIML\\index.tsx",["1281","1282","1283"],"import { Divider } from \"@mui/material\";\r\nimport React,{useState,useMemo,useEffect} from \"react\";\r\n\r\nimport GraphCrossSell from './graphs/GraphCrossSell';\r\nimport GraphUpSell from \"./graphs/GraphUpSell\";\r\n\r\nconst AIML = ()=>{\r\n    return(\r\n        <div className=\"page-content\">\r\n            <h2>AI Insights<span></span></h2>\r\n            <Divider/><br/> \r\n            \r\n            <GraphCrossSell/>\r\n            \r\n            <Divider/><br/> \r\n            \r\n            <GraphUpSell/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AIML;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\index.tsx",["1284","1285","1286","1287","1288","1289"],"import { Grid, LinearProgress, Stack } from \"@mui/material\";\r\nimport React,{useState,useMemo,useEffect} from \"react\";\r\nimport SearchableDropdown from \"../../components/SearchableDropdown\";\r\n\r\nimport {useSelector} from 'react-redux';\r\nimport Summary from \"./Summary\";\r\nimport RelatedRecords from \"./RelatedRecords\";\r\n\r\nimport Tabs from '../../core/Tabs';\r\nimport AlertMessage from \"../../components/AlertMessage\";\r\nimport ThirdPartyData from \"./ThirdPartyData\";\r\nimport AIML from \"./AIML\";\r\n\r\nconst AccountExplorer = ()=>{\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const [AccountID,setAccountID] = useState(null);\r\n    \r\n    const handlerOnSelectAccount = (account:any)=>{\r\n        if(account)\r\n            setAccountID(account.id);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"page-content\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={8}>\r\n                        <h2>Account Explorer <span>Key account information on a single interface</span></h2>\r\n                    </Grid>\r\n                    <Grid item md={4}>\r\n                        <SearchableDropdown action=\"searchAccount\" onSelect={(value:any)=> handlerOnSelectAccount(value) } />\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n                {!AccountID?\r\n                    <Stack direction=\"row\" justifyContent=\"center\" style={{marginTop:'100px'}}>\r\n                        <strong>Please select account to view the dashboard</strong>\r\n                    </Stack>\r\n                :''}\r\n                \r\n                <Summary id={AccountID}/>\r\n                <RelatedRecords id={AccountID}/>\r\n                <ThirdPartyData id={AccountID}/>\r\n                <AIML id={AccountID}/>\r\n            </div>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AccountExplorer;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\invoices\\index.tsx",["1290","1291","1292","1293","1294","1295","1296","1297","1298"],"import { Divider, FormControl, Grid, InputLabel, LinearProgress, MenuItem, Paper, Select, Stack} from \"@mui/material\";\r\nimport React,{useState,useMemo,useEffect} from \"react\";\r\nimport SearchableDropdown from \"../../../components/SearchableDropdown\";\r\nimport InvoiceListing from \"./InvoiceListing\";\r\n\r\nimport {useSelector} from 'react-redux';\r\nimport { USER_TYPE } from \"../../../const\";\r\n\r\nconst BillingInvoices = ()=>{\r\n    const UserType = useSelector((state:any)=> state.user?state.user.type:null);\r\n    const accid = useSelector((state:any)=> state.user?state.user.accid:null);\r\n    const org = useSelector((state:any)=> state.user?state.user.org:null);\r\n\r\n    const [Account,setAccount] = useState<any>(null);\r\n\r\n    const handlerOnSelectAccount = (account:any)=>{\r\n        if(account){\r\n            setAccount(account);\r\n        }\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        if(UserType === USER_TYPE.CUSTOMER){\r\n            setAccount({id:accid,text:org});\r\n        }\r\n    },[UserType])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"page-content\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={6} lg={8} xs={12}>\r\n                        <h2>Billing Invoices <span>customer billing invoices last 6 months</span></h2>\r\n                    </Grid>\r\n                    {UserType != USER_TYPE.CUSTOMER && \r\n                    <Grid item md={4} lg={4} xs={12}>   \r\n                        <SearchableDropdown action=\"searchAccount\" onSelect={(value:any)=> handlerOnSelectAccount(value) } />\r\n                    </Grid>\r\n                    }\r\n                </Grid>\r\n                <Divider/>\r\n                {!Account?\r\n                    <Stack direction=\"row\" justifyContent=\"center\" style={{marginTop:'100px'}}>\r\n                        <strong>Please select account to view the dashboard</strong>\r\n                    </Stack>\r\n                :''\r\n                }\r\n\r\n                <InvoiceListing Account={Account}/>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BillingInvoices;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\index.tsx",["1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316","1317"],"import {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Stack,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@mui/material\";\r\nimport React, { useState, useMemo, useEffect } from \"react\";\r\nimport { Link as RLink } from \"react-router-dom\";\r\nimport SearchableDropdown from \"../../../components/SearchableDropdown\";\r\nimport ComparasionGraphs from \"./monthlyComparison/ComparasionGraphs\";\r\n\r\nimport MatrixStandard from \"./MatrixStandard\";\r\nimport DateAdapter from \"@mui/lab/AdapterMoment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { USER_TYPE } from \"../../../const\";\r\nimport DateRangePicker, { DateRange } from \"@mui/lab/DateRangePicker\";\r\nimport MatrixAccount2 from \"./MatrixAccount2\";\r\nimport MatrixTags from \"./MatrixTags\";\r\nimport Spider from \"./Spider\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport TagIcon from \"@mui/icons-material/Tag\";\r\nimport AnalyticsIcon from \"@mui/icons-material/Analytics\";\r\nimport LineStyleIcon from \"@mui/icons-material/LineStyle\";\r\nimport CloudIcon from \"@mui/icons-material/Cloud\";\r\nimport PestControlIcon from \"@mui/icons-material/PestControl\";\r\nimport TableChartIcon from \"@mui/icons-material/TableChart\";\r\nimport AccountTreeIcon from \"@mui/icons-material/AccountTree\";\r\nimport MatrixAccountStacked from \"./MatrixAccountStacked\";\r\nimport AccountBoxIcon from \"@mui/icons-material/AccountBox\";\r\nimport TimelineIcon from \"@mui/icons-material/Timeline\";\r\nimport { DesktopDatePicker, LocalizationProvider } from \"@mui/lab\";\r\nimport ModalDialog from \"../../../components/ModalDialog\";\r\nimport MatrixCSP from \"./MatrixCSP\";\r\nimport Summary from \"./Summary\";\r\nimport moment from \"moment\";\r\nimport TimeSeries from \"./TImeSeries\";\r\n\r\nconst UsageMatrix = () => {\r\n  const [AccountID, setAccountID] = useState<string>(\"\");\r\n  const [Period, setPeriod] = useState<any>(30);\r\n  const [showMonthly, setShowMonthly] = useState<boolean>(false);\r\n  const [showCSP, setCSP] = useState<boolean>(false);\r\n  const [showStandard, setStandard] = useState<boolean>(false);\r\n  const [showAccount, setShowAccount] = useState<boolean>(false);\r\n  const [showStackedAccount, setShowStackedAccount] = useState<boolean>(false);\r\n  const [showSpider, setShowSpider] = useState<boolean>(false);\r\n  const [showTimeSeries, setShowTimeSeries] = useState<boolean>(false);\r\n  const [showTag, setShowTag] = useState<boolean>(false);\r\n  const [showSummary, setShowSummary] = useState<boolean>(true);\r\n\r\n  const UserType = useSelector((state: any) =>\r\n    state.user ? state.user.type : null\r\n  );\r\n  const [value, setValue] = React.useState<any>([null, null]);\r\n  const [startDate, setStartDate] = React.useState<any>(null);\r\n  const [endDate, setEndDate] = React.useState<any>(null);\r\n  const [datePicker, setDatePicker] = useState<boolean>(false);\r\n  const handlerCloseViewAll = () => setDatePicker(false);\r\n  const accid = useSelector((state: any) =>\r\n    state.user ? state.user.accid : null\r\n  );\r\n  const handlerOnSelectAccount = (account: any) => {\r\n    if (account) setAccountID(account.id);\r\n  };\r\n  const handlerChangePeriod = (e: any) => {\r\n    if (e.target.value == \"CUSTOM\") {\r\n      setDatePicker(true);\r\n    } else {\r\n      setPeriod(e.target.value);\r\n      setStartDate(null);\r\n      setEndDate(null);\r\n    }\r\n\r\n    if (e.target.value != 30 && showSummary) {\r\n      setPeriod(30);\r\n      window.snakAlert.warning(\"Dashboard only valid for last 30 days\");\r\n    }\r\n    if ((e.target.value == 60 || e.target.value == 90) && showMonthly) {\r\n      setShowMonthly(true);\r\n    } else if ((e.target.value != 60 || e.target.value != 90) && showMonthly) {\r\n      setStandard(true);\r\n      setShowMonthly(false);\r\n    }\r\n  };\r\n  const handleMonthlyComparison = () => {\r\n    if (Period != 60 || Period != 90) {\r\n      setPeriod(60);\r\n    }\r\n    setShowMonthly(true);\r\n    setShowSummary(false);\r\n    setStandard(false);\r\n    setShowAccount(false);\r\n    setShowTag(false);\r\n    setShowStackedAccount(false);\r\n    setCSP(false);\r\n    setShowSpider(false);\r\n    setShowTimeSeries(false);\r\n  };\r\n  const handleAccountBreakdown = () => {\r\n    setCSP(false);\r\n    setShowSummary(false);\r\n    setShowMonthly(false);\r\n    setStandard(false);\r\n    setShowAccount(true);\r\n    setShowTag(false);\r\n    setShowStackedAccount(false);\r\n    setShowSpider(false);\r\n    setShowTimeSeries(false);\r\n  };\r\n  const handleTagBreakdown = () => {\r\n    setCSP(false);\r\n    setShowMonthly(false);\r\n    setShowSummary(false);\r\n    setStandard(false);\r\n    setShowAccount(false);\r\n    setShowTag(true);\r\n    setShowStackedAccount(false);\r\n    setShowSpider(false);\r\n    setShowTimeSeries(false);\r\n  };\r\n  const handleSummary = () => {\r\n    if (Period != 30) {\r\n      setPeriod(30);\r\n      window.snakAlert.warning(\"Dashboard only valid for last 30 days\");\r\n    }\r\n    setShowSummary(true);\r\n    setCSP(false);\r\n    setShowMonthly(false);\r\n    setStandard(false);\r\n    setShowAccount(false);\r\n    setShowTag(false);\r\n    setShowStackedAccount(false);\r\n    setShowSpider(false);\r\n    setShowTimeSeries(false);\r\n  };\r\n  const handleStackedAccountBreakdown = () => {\r\n    setCSP(false);\r\n    setShowSummary(false);\r\n    setShowMonthly(false);\r\n    setStandard(false);\r\n    setShowAccount(false);\r\n    setShowTag(false);\r\n    setShowStackedAccount(true);\r\n    setShowSpider(false);\r\n    setShowTimeSeries(false);\r\n  };\r\n\r\n  const handleStandard = () => {\r\n    setShowMonthly(false);\r\n    setShowSummary(false);\r\n    setCSP(false);\r\n    setStandard(true);\r\n    setShowAccount(false);\r\n    setShowTag(false);\r\n    setShowStackedAccount(false);\r\n    setShowSpider(false);\r\n    setShowTimeSeries(false);\r\n  };\r\n  const handleCSPBreakdown = () => {\r\n    setCSP(true);\r\n    setShowMonthly(false);\r\n    setShowSummary(false);\r\n    setStandard(false);\r\n    setShowAccount(false);\r\n    setShowTag(false);\r\n    setShowStackedAccount(false);\r\n    setShowSpider(false);\r\n    setShowTimeSeries(false);\r\n  };\r\n\r\n  const handleSpiderChange = () => {\r\n    setShowSpider(true);\r\n    setShowSummary(false);\r\n    setCSP(false);\r\n    setShowMonthly(false);\r\n    setStandard(false);\r\n    setShowAccount(false);\r\n    setShowTag(false);\r\n    setShowStackedAccount(false);\r\n    setShowTimeSeries(false);\r\n  };\r\n  const handleTimeSeriesChange = () => {\r\n    setShowTimeSeries(true);\r\n    setShowSummary(false);\r\n    setShowSpider(false);\r\n    setCSP(false);\r\n    setShowMonthly(false);\r\n    setStandard(false);\r\n    setShowAccount(false);\r\n    setShowTag(false);\r\n    setShowStackedAccount(false);\r\n  };\r\n  const handleSubmit = () => {\r\n    if (value && value.length > 1) {\r\n      setPeriod(\"CUSTOM\");\r\n      setStartDate(moment(value[0]._d).format(\"YYYY-MM-DD 00:00:00\"));\r\n      setEndDate(moment(value[1]._d).format(\"YYYY-MM-DD 00:00:00\"));\r\n      setDatePicker(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (UserType === USER_TYPE.CUSTOMER) {\r\n      setAccountID(accid);\r\n    }\r\n  }, [UserType]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"page-content\">\r\n        <Grid container spacing={1} justifyContent=\"space-between\">\r\n          <Grid item md={AccountID ? 1.5 : 6} lg={AccountID ? 1.5 : 6} xs={12}>\r\n            <h2>\r\n              Usage Analytics<span>Live Customer Usage Analytics</span>\r\n            </h2>\r\n          </Grid>\r\n\r\n          {AccountID != \"\" ? (\r\n            <>\r\n              <Grid item md={4.5} lg={4.5} xs={12}>\r\n                <Tooltip\r\n                  className=\"tooltip-background\"\r\n                  title=\"Dashboard\"\r\n                  followCursor\r\n                  componentsProps={{\r\n                    tooltip: {\r\n                      sx: {\r\n                        bgcolor: \"#11417f\",\r\n                      },\r\n                    },\r\n                  }}\r\n                >\r\n                  <IconButton\r\n                    sx={{ color: \"#11417f\" }}\r\n                    size=\"large\"\r\n                    onClick={handleSummary}\r\n                    aria-label=\"Dashboard\"\r\n                  >\r\n                    <TableChartIcon fontSize=\"medium\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n                <Tooltip\r\n                  className=\"tooltip-background\"\r\n                  title=\"Basic Usage Analytics\"\r\n                  followCursor\r\n                  componentsProps={{\r\n                    tooltip: {\r\n                      sx: {\r\n                        bgcolor: \"#11417f\",\r\n                      },\r\n                    },\r\n                  }}\r\n                >\r\n                  <IconButton\r\n                    sx={{ color: \"#11417f\" }}\r\n                    size=\"large\"\r\n                    onClick={handleStandard}\r\n                    aria-label=\"Monthly Analysis\"\r\n                  >\r\n                    <LineStyleIcon fontSize=\"medium\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n                <Tooltip\r\n                  className=\"tooltip-background\"\r\n                  title=\"Monthly Comparison\"\r\n                  followCursor\r\n                  componentsProps={{\r\n                    tooltip: {\r\n                      sx: {\r\n                        bgcolor: \"#11417f\",\r\n                      },\r\n                    },\r\n                  }}\r\n                >\r\n                  <IconButton\r\n                    sx={{ color: \"#11417f\" }}\r\n                    size=\"large\"\r\n                    onClick={handleMonthlyComparison}\r\n                    aria-label=\"Monthly Analysis\"\r\n                  >\r\n                    <AnalyticsIcon fontSize=\"medium\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n\r\n                <Tooltip\r\n                  title=\"Account Breakdown\"\r\n                  followCursor\r\n                  componentsProps={{\r\n                    tooltip: {\r\n                      sx: {\r\n                        bgcolor: \"#11417f\",\r\n                      },\r\n                    },\r\n                  }}\r\n                >\r\n                  <IconButton\r\n                    sx={{ ml: 2, color: \"#11417f\" }}\r\n                    // edge=\"start\"\r\n                    // color=\"primary\"\r\n                    size=\"large\"\r\n                    onClick={handleAccountBreakdown}\r\n                    aria-label=\"monthly analysis\"\r\n                  >\r\n                    <AccountBoxIcon fontSize=\"medium\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n\r\n                <Tooltip\r\n                  title=\"Account Breakdown Comparison\"\r\n                  followCursor\r\n                  componentsProps={{\r\n                    tooltip: {\r\n                      sx: {\r\n                        bgcolor: \"#11417f\",\r\n                      },\r\n                    },\r\n                  }}\r\n                >\r\n                  <IconButton\r\n                    sx={{ ml: 2, mr: 2, color: \"#11417f\" }}\r\n                    // edge=\"start\"\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                    onClick={handleStackedAccountBreakdown}\r\n                    aria-label=\"monthly analysis\"\r\n                  >\r\n                    <AccountTreeIcon fontSize=\"medium\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n                <Tooltip\r\n                  title=\"Tag Breakdown\"\r\n                  followCursor\r\n                  componentsProps={{\r\n                    tooltip: {\r\n                      sx: {\r\n                        bgcolor: \"#11417f\",\r\n                      },\r\n                    },\r\n                  }}\r\n                >\r\n                  <IconButton\r\n                    // edge=\"start\"\r\n                    sx={{ color: \"#11417f\" }}\r\n                    size=\"large\"\r\n                    onClick={handleTagBreakdown}\r\n                    aria-label=\"monthly analysis\"\r\n                  >\r\n                    <TagIcon fontSize=\"medium\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n                <Tooltip\r\n                  title=\"Cloud Platform Breakdown\"\r\n                  followCursor\r\n                  componentsProps={{\r\n                    tooltip: {\r\n                      sx: {\r\n                        bgcolor: \"#11417f\",\r\n                      },\r\n                    },\r\n                  }}\r\n                >\r\n                  <IconButton\r\n                    // edge=\"start\"\r\n                    sx={{ color: \"#11417f\" }}\r\n                    size=\"large\"\r\n                    onClick={handleCSPBreakdown}\r\n                    aria-label=\"monthly analysis\"\r\n                  >\r\n                    <CloudIcon fontSize=\"medium\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n                <Tooltip\r\n                  title=\"Spider Chart\"\r\n                  followCursor\r\n                  componentsProps={{\r\n                    tooltip: {\r\n                      sx: {\r\n                        bgcolor: \"#11417f\",\r\n                      },\r\n                    },\r\n                  }}\r\n                >\r\n                  <IconButton\r\n                    // edge=\"start\"\r\n                    sx={{ color: \"#11417f\" }}\r\n                    size=\"large\"\r\n                    onClick={handleSpiderChange}\r\n                    aria-label=\"monthly analysis\"\r\n                  >\r\n                    <PestControlIcon fontSize=\"medium\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n                {\r\n                // prediction button\r\n                /* <Tooltip\r\n                  title=\"Time Series\"\r\n                  followCursor\r\n                  componentsProps={{\r\n                    tooltip: {\r\n                      sx: {\r\n                        bgcolor: \"#11417f\",\r\n                      },\r\n                    },\r\n                  }}\r\n                >\r\n                  <IconButton\r\n                    // edge=\"start\"\r\n                    sx={{ color: \"#11417f\" }}\r\n                    size=\"large\"\r\n                    onClick={handleTimeSeriesChange}\r\n                    aria-label=\"time seires analysis\"\r\n                  >\r\n                    <TimelineIcon fontSize=\"medium\" />\r\n                  </IconButton>\r\n                </Tooltip> */}\r\n              </Grid>\r\n            </>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n\r\n          <Grid item md={3} lg={3} xs={12}>\r\n            <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n              <InputLabel id=\"label_period\">Period</InputLabel>\r\n              <Select\r\n                fullWidth\r\n                onChange={handlerChangePeriod}\r\n                value={Period}\r\n                labelId=\"label_period\"\r\n                label=\"Period\"\r\n              >\r\n                <MenuItem value={30} key=\"active\">\r\n                  Last 30 days\r\n                </MenuItem>\r\n                <MenuItem value={60}>Last 60 days</MenuItem>\r\n                <MenuItem value={90}>Last 90 days</MenuItem>\r\n                <MenuItem value={\"THIS_MONTH\"}>Current month</MenuItem>\r\n                <MenuItem value={\"LAST_MONTH\"}>Last month</MenuItem>\r\n                <MenuItem value={\"THIS_WEEK\"}>Current week</MenuItem>\r\n                <MenuItem value={\"LAST_WEEK\"}>Last week</MenuItem>\r\n                <MenuItem value={\"YESTERDAY\"}>Yesterday</MenuItem>\r\n                <MenuItem value={\"TODAY\"}>Today</MenuItem>\r\n                <MenuItem value={\"CUSTOM\"} onClick={() => setDatePicker(true)}>\r\n                  Custom{\" \"}\r\n                </MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          {UserType != USER_TYPE.CUSTOMER && (\r\n            <Grid item md={3} lg={3} xs={12}>\r\n              <SearchableDropdown\r\n                action=\"searchAccount\"\r\n                onSelect={(value: any) => handlerOnSelectAccount(value)}\r\n              />\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n        <Divider />\r\n\r\n        {!AccountID ? (\r\n          <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            style={{ marginTop: \"100px\" }}\r\n          >\r\n            <strong>Please select account to view the dashboard</strong>\r\n          </Stack>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n\r\n        {showStandard ? (\r\n          <MatrixStandard\r\n            AccountID={AccountID}\r\n            Period={Period}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {showCSP ? (\r\n          <MatrixCSP\r\n            AccountID={AccountID}\r\n            Period={Period}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {showMonthly ? (\r\n          <ComparasionGraphs AccountID={AccountID} Period={Period} />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {showStackedAccount ? (\r\n          <MatrixAccountStacked\r\n            AccountID={AccountID}\r\n            Period={Period}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {showAccount ? (\r\n          <MatrixAccount2\r\n            AccountID={AccountID}\r\n            Period={Period}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {showTag ? (\r\n          <MatrixTags\r\n            AccountID={AccountID}\r\n            Period={Period}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {showSummary ? (\r\n          <Summary\r\n            AccountID={AccountID}\r\n            Period={Period}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {showSpider ? (\r\n          <Spider\r\n            AccountID={AccountID}\r\n            Period={Period}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {showTimeSeries ? (\r\n          <TimeSeries\r\n            AccountID={AccountID}\r\n            Period={Period}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <ModalDialog\r\n        open={datePicker}\r\n        title=\"Select Date Range\"\r\n        component={\r\n          <>\r\n            <Grid container spacing={1} mt={3} mb={3}>\r\n              {/* <Grid item md={3} lg={3} xs={12}> </Grid> */}\r\n              <LocalizationProvider dateAdapter={DateAdapter}>\r\n                <DateRangePicker\r\n                  startText=\"Strat date\"\r\n                  endText=\"End date\"\r\n                  value={value}\r\n                  onChange={(newValue) => {\r\n                    setValue(newValue);\r\n                  }}\r\n                  renderInput={(startProps, endProps) => (\r\n                    <React.Fragment>\r\n                      <TextField {...startProps} />\r\n                      <Box sx={{ mx: 2 }}> to </Box>\r\n                      <TextField {...endProps} />\r\n                    </React.Fragment>\r\n                  )}\r\n                />\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justifyContent=\"flex-end\"\r\n              mt={3}\r\n              pr={4}\r\n            >\r\n              <Button\r\n                // sx={{ alignSelf: 'flex-end' }}\r\n                onClick={handleSubmit}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Grid>\r\n          </>\r\n        }\r\n        onClose={handlerCloseViewAll}\r\n        fullScreen={false}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UsageMatrix;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\reports\\index.tsx",["1318","1319","1320","1321","1322","1323","1324","1325"],"import { Divider, Grid, Paper,Icon, Button,Card,CardActionArea,CardMedia, Typography } from '@mui/material';\r\nimport React from 'react';\r\n\r\nimport imgReport from '../../../assets/images/sp-dashbaord.jpg'\r\n\r\nconst SupplierReports = ()=>{\r\n     \r\n    return(\r\n        <>\r\n            <div className=\"page-content cockpit\">\r\n                \r\n                    <Paper elevation={1} className=\"section mt-10\">\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12}>\r\n                                <img src={imgReport} style={{width:\"100%\"}}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SupplierReports;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planList\\index.tsx",["1326","1327","1328","1329","1330","1331","1332","1333"],"import React,{useState,useEffect} from 'react';\r\nimport { Grid, Paper,Stack,Button, Icon, Tooltip, IconButton, LinearProgress } from '@mui/material';\r\nimport DataTable, { ExpanderComponentProps,TableRow }  from 'react-data-table-component';\r\n\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport ListFilter from './ListFilter';\r\n\r\nimport ModalDialog from '../../../../components/ModalDialog';\r\nimport PlanApproval from './PlanDetailDialog'; \r\nimport billingConfigurator from '../../../../services/billingConfigurator';\r\nimport PlanDetailDialog from './PlanDetailDialog';\r\nimport { BILLING_PLAN_STATUS } from '../../../../const';\r\nimport helper from '../../../../helper';\r\nimport DialogJsonFeed from './DialogJsonFeed';\r\n\r\nconst PlanListing = ()=>{\r\n    const initData = {rows:[],count:0,page:1};\r\n    const [Data,setData] = useState<any>(initData);\r\n    const [Filter,setFilter] = useState<any>({page:1});\r\n    const [loading,setloading] = useState<boolean>(false);\r\n\r\n    const[InfoDialog, setInfoDialog] = useState<any>({show:false,id:null});\r\n    \r\n    const handlerFilterChange = (filter:any)=>{\r\n        setFilter({...filter});\r\n    }\r\n\r\n    const onPagingChange = (page:number)=>{\r\n        setFilter({...Filter,page:page});\r\n    }\r\n\r\n    const load = async()=>{\r\n        setloading(true);\r\n        let res:any = await billingConfigurator.planList({...Filter});\r\n        if(res.success){\r\n            setData(res.data)\r\n        }\r\n        setloading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(Object.keys(Filter).length > 0)\r\n            load();\r\n    }, [Filter])\r\n\r\n    \r\n    const handlerCloseInfoDialog = (refresh:boolean=false)=> {\r\n        setInfoDialog({id:null,show:false});\r\n        if(refresh){\r\n            load();\r\n        }\r\n    }\r\n    const handlerShowInfoDialog = (id)=> {\r\n        setInfoDialog({id:id,show:true});\r\n    }\r\n\r\n    const columns:any = [\r\n        {\r\n          name: 'ID',\r\n          selector: 'PlanID',\r\n          //compact:true,\r\n          width:'60px',\r\n        },\r\n        {\r\n            name: 'Code',\r\n            selector: 'GUID',\r\n            compact:true,\r\n            //width:'120px',\r\n            //hide:600,\r\n        },\r\n        {\r\n            name: 'Title',\r\n            selector: 'Title',\r\n            compact:true,\r\n            //width:'120px',\r\n            //hide:600,\r\n        },\r\n        {\r\n            name: 'Account',\r\n            //selector: 'PersonIncharge',\r\n            compact:true,\r\n            width:'160px',\r\n            cell:(row:any)=><>{row.SfdcAccountName}</>\r\n        },\r\n        {\r\n            name: 'Opp.',\r\n            selector: 'SfdcOppName',\r\n            compact:true,\r\n            width:'120px',\r\n            \r\n        },\r\n        {\r\n            name: 'Quote',\r\n            selector: 'SfdcQuoteNumber',\r\n            compact:true,\r\n            width:'120px',\r\n            \r\n        },\r\n        {\r\n            name: 'Status',\r\n            selector: 'Status',\r\n            compact:true,\r\n            //hide:1200,\r\n        },\r\n        {\r\n            name: 'Created By',\r\n            //selector: 'RDate',\r\n            compact:true,\r\n            width:'140px',\r\n            //hide:1200,\r\n            cell:(row:any)=><>{row.CreatedByUser?row.CreatedByUser.FullName:''}</>\r\n        },\r\n        {\r\n            name: '',\r\n            //selector: 'MPID',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                    {helper.isEmpty(row.SfdcPlanID) && \r\n                    <Tooltip title=\"Edit\" >\r\n                        <IconButton size=\"small\" className=\"action\" component={RLink} to={`/billing/configurator/plan/${row.PlanID}`}>\r\n                            <Icon className=\"icon-blue\">edit</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    }\r\n                    \r\n                    <Tooltip title=\"View Billing Plan\">\r\n                        <IconButton size=\"small\" className=\"action\" \r\n                            onClick={()=>{\r\n                                handlerShowInfoDialog(row.PlanID);\r\n                            }}>\r\n                            <Icon className=\"icon-blue\">library_add_check</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    \r\n                </>\r\n          }\r\n      ];\r\n\r\n    return (\r\n        <>\r\n            <div className=\"page-content\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={5} lg={6} xs={12}>\r\n                        <h2>Billing Configurator <span>List of all billing plans</span></h2>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    <ListFilter onChangeFilter={handlerFilterChange}/>\r\n                </Paper>\r\n                \r\n                {loading && <LinearProgress className=\"mt--4\"/>}\r\n\r\n                <Paper elevation={1} className=\"section mt-14\">\r\n                    <DataTable className='table'\r\n                        title=\"\"\r\n                        noHeader={true}\r\n                        columns={columns}\r\n                        dense={true}\r\n                        \r\n                        data={Data.rows}\r\n                        highlightOnHover={true}\r\n                        pagination={true}\r\n                        paginationServer={true}\r\n                        paginationTotalRows={Data.count}\r\n                        paginationPerPage={20}\r\n                        paginationComponentOptions={ {noRowsPerPage: true}}\r\n                        paginationDefaultPage={Filter.page}\r\n                        //paginationResetDefaultPage={!Filter.page}\r\n                        onChangePage={(page:number)=>{onPagingChange(page)}}\r\n                        //expandableRows \r\n                        //expandableRowsComponent={ExpandedComponent}\r\n                        //conditionalRowStyles={conditionalRowStyles}\r\n                    />        \r\n                </Paper>\r\n\r\n            </div>\r\n             \r\n            <ModalDialog    \r\n                fullScreen={false}   \r\n                title={`Billing Plan Details`}\r\n                component={<PlanDetailDialog id={InfoDialog?InfoDialog.id:null} onClose={handlerCloseInfoDialog}/>}\r\n                open={InfoDialog.show}\r\n                onClose={()=>(handlerCloseInfoDialog(false))}\r\n            />\r\n    \r\n            \r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlanListing;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\sfdc.ts",["1334"],"/**\r\n * Salesforce Service\r\n */\r\n\r\nimport client from './client';\r\n\r\nconst accountSummary = async(id:string)=>{\r\n    let res:any = await client.get('/sfdc/account/summary',{id:id});\r\n    return res;\r\n}\r\n\r\nconst getAccount = async(id:string)=>{\r\n    let res:any = await client.get('/sfdc/account/get',{id:id});\r\n    return res;\r\n}\r\n\r\nconst getAccountRelatedDocs = async(id:string)=>{\r\n    let res:any = await client.get('/sfdc/account/relatedDocument',{id:id});\r\n    return res;\r\n}\r\n\r\n\r\nconst get3rdOartiesData = async(id:string)=>{\r\n    let res:any = await client.get('/sfdc/account/3rdPartyData',{id:id});\r\n    return res;\r\n}\r\n\r\nconst getContact = async(id:string)=>{\r\n    let res:any = await client.get('/sfdc/contact/get',{id:id});\r\n    return res;\r\n}\r\nconst getEvent = async(id:string)=>{\r\n    let res:any = await client.get('/sfdc/event/get',{id:id});\r\n    return res;\r\n}\r\n\r\nconst getOpportunity = async(id:string)=>{\r\n    let res:any = await client.get('/sfdc/opportunity/get',{id:id});\r\n    return res;\r\n}\r\n\r\nconst getAll = async()=>{\r\n    let res:any = await client.getAll('/sfdc/account/getall');\r\n    return res;\r\n}\r\n\r\nexport default {\r\n    accountSummary,getAccount,getAccountRelatedDocs,get3rdOartiesData,\r\n    getContact,\r\n    getEvent,\r\n    getOpportunity,\r\n    getAll\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\index.tsx",["1335","1336","1337","1338","1339","1340","1341","1342","1343","1344","1345","1346","1347","1348","1349","1350","1351","1352"],"import React,{useState,useEffect, Suspense,lazy} from 'react';\r\nimport {useParams,useHistory} from 'react-router-dom';\r\nimport { Grid, Paper,Stack,Button, Icon,Checkbox, TextField, Divider, Card, CardContent, LinearProgress, Tooltip, Link } from '@mui/material';\r\n//import DatePicker from '@mui/lab/DatePicker';\r\nimport './assets/style.css';\r\nimport u from '../../../../services/util'\r\n\r\nimport AnimatedNumber from 'react-animated-number';\r\n\r\nimport ParameterSelector from './ParameterSelector';\r\nimport ModalDialog from '../../../../components/ModalDialog';\r\n\r\nimport groups from './assets/groups';\r\n\r\nimport BillingModelSelector from './DialogBillingModelSelector';\r\nimport BillingModelComparison from './BillingModelComparison';\r\n\r\nimport sampleModels from './assets/sampleModels';\r\n\r\nimport {GraphParameters,GraphGroupParametersPie,GraphGuage,InvoiceGraph} from '../../../../components/graphs/billingConfigurator';\r\n\r\nimport billingConfigurator from '../../../../services/billingConfigurator';\r\nimport DialogSavePlan from './DialogSavePlan';\r\n//import BillingSpliter from './BillingSpliter';\r\n\r\n//const tmp = {\"success\":true,\"data\":{\"account\":{\"Id\":\"0011P00001ChCNzQAN\",\"Name\":\"C360 TestAccount\",\"Domain\":null},\"billing\":{\"lastMonthInvoice\":{\"amount\":138349.78,\"invMonth\":12,\"invYear\":2021,\"invoice_date\":\"2021-12-02T10:28:16.000Z\"},\"usageParams\":[]},\"plan\":{\"Title\":\"new-plan-01\",\"Status\":\"Approved\",\"CreatedBy\":\"Admin\",\"SfdcQuoteID\":\"a3h1P000000HKmoQAG\",\"SfdcQuoteNumber\":\"Q-03852\",\"BillingModelID\":\"\",\"BillingModelName\":\"\",\"SfdcContactEmail\":null,\"SfdcDomain\":null,\"params\":[{\"group\":\"gateway\",\"name\":\"fqdn_gw\",\"title\":\"FQDN\",\"unitPrice\":0.23,\"unit\":\"Per Hour\",\"checked\":true},{\"group\":\"s2cConnection\",\"name\":\"inter_tunnels\",\"title\":\"S2C TUNNEL\",\"unitPrice\":0.7,\"unit\":\"Per Hour\",\"checked\":true},{\"group\":\"s2cConnection\",\"name\":\"intra_tunnels\",\"title\":\"S2S TUNNEL\",\"unitPrice\":0.23,\"unit\":\"Per Hour\",\"checked\":true},{\"group\":\"s2cConnection\",\"name\":\"psf_noguard_gw\",\"title\":\"PSF_NOGUARD_GW\",\"unitPrice\":0.23,\"unit\":\"Per Hour\",\"checked\":true},{\"group\":\"instance\",\"name\":\"usercount\",\"title\":\"VPN USER LICENSES\",\"unitPrice\":0.045,\"unit\":\"Per Hour\",\"checked\":true}]},\"parameters\":[{\"id\":\"01t1P00000FfQ6pQAF\",\"group\":\"gateway\",\"name\":\"bgp_mode\",\"title\":\"BGP_MODE\",\"unitPrice\":0.18,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ6uQAF\",\"group\":\"gateway\",\"name\":\"egress_control\",\"title\":\"EGRESS_CONTROL\",\"unitPrice\":0.21,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ6zQAF\",\"group\":\"subnet\",\"name\":\"enable_domain_count\",\"title\":\"ENABLE_DOMAIN_COUNT\",\"unitPrice\":0.11,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ79QAF\",\"group\":\"gateway\",\"name\":\"gwlb_enabled\",\"title\":\"GWLB_ENABLED\",\"unitPrice\":0.18,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ7EQAV\",\"group\":\"gateway\",\"name\":\"high_perf\",\"title\":\"HIGH_PERF\",\"unitPrice\":0.18,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ7JQAV\",\"group\":\"subnet\",\"name\":\"ingress_routing\",\"title\":\"INGRESS_ROUTING\",\"unitPrice\":0.15,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ7OQAV\",\"group\":\"s2cConnection\",\"name\":\"inter_tunnels\",\"title\":\"S2C TUNNEL\",\"unitPrice\":0.7,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":true},{\"id\":\"01t1P00000FfQ7TQAV\",\"group\":\"s2cConnection\",\"name\":\"intra_tunnels\",\"title\":\"S2S TUNNEL\",\"unitPrice\":0.23,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":true},{\"id\":\"01t1P00000FfQ7YQAV\",\"group\":\"gateway\",\"name\":\"learned_cidrs_approval\",\"title\":\"LEARNED_CIDRS_APPROVAL\",\"unitPrice\":0.18,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ7dQAF\",\"group\":\"subnet\",\"name\":\"nat_enabled\",\"title\":\"NAT_ENABLED\",\"unitPrice\":0.41,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ7iQAF\",\"group\":\"vpc\",\"name\":\"nat_gw\",\"title\":\"NAT_GATEWAY\",\"unitPrice\":0.23,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ7nQAF\",\"group\":\"gateway\",\"name\":\"pbr_enabled\",\"title\":\"PBR_ENABLED\",\"unitPrice\":0.26,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ7sQAF\",\"group\":\"instance\",\"name\":\"private_s3\",\"title\":\"PRIVATE_S3\",\"unitPrice\":0.23,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ7xQAF\",\"group\":\"subnet\",\"name\":\"private_s3_gws\",\"title\":\"PRIVATE_S3_GWS\",\"unitPrice\":0.23,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ82QAF\",\"group\":\"s2cConnection\",\"name\":\"psf_guard_gw\",\"title\":\"PSF_GUARD_GW\",\"unitPrice\":0.23,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ87QAF\",\"group\":\"s2cConnection\",\"name\":\"psf_noguard_gw\",\"title\":\"PSF_NOGUARD_GW\",\"unitPrice\":0.23,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ8CQAV\",\"group\":\"gateway\",\"name\":\"segmentation_2_0\",\"title\":\"SEGMENTATION_2_0\",\"unitPrice\":0.18,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ8HQAV\",\"group\":\"subnet\",\"name\":\"service_nodes\",\"title\":\"SERVICE_NODES\",\"unitPrice\":0.21,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ8MQAV\",\"group\":\"gateway\",\"name\":\"stateful_fw\",\"title\":\"STATEFUL_FW\",\"unitPrice\":0.32,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ8RQAV\",\"group\":\"gateway\",\"name\":\"tgw_enabled\",\"title\":\"TGW_ENABLED\",\"unitPrice\":0.18,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ8WQAV\",\"group\":\"vpc\",\"name\":\"transit_vpc\",\"title\":\"TRANSIT_VPC\",\"unitPrice\":0.18,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfQ8bQAF\",\"group\":\"instance\",\"name\":\"usercount\",\"title\":\"VPN USER LICENSES\",\"unitPrice\":0.045,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":true},{\"id\":\"01t1P00000FfQ8gQAF\",\"group\":\"gateway\",\"name\":\"vpn_gateways\",\"title\":\"VPN_GATEWAYS\",\"unitPrice\":0.21,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false},{\"id\":\"01t1P00000FfTmHQAV\",\"group\":\"gateway\",\"name\":\"security\",\"title\":\"SECURITY SERVICES\",\"unitPrice\":0.23,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":true},{\"id\":\"01t1P00000FfQ74QAF\",\"group\":\"gateway\",\"name\":\"fqdn_gw\",\"title\":\"FQDN\",\"unitPrice\":0.2123,\"unit\":\"Per Hour\",\"total\":0,\"usage\":0,\"checked\":false}]},\"message\":\"\"}\r\n\r\nconst PlanCreator = ()=>{\r\n\r\n    const qParams = useParams();\r\n    const history = useHistory();\r\n    const {id,acid,opid,byModel,bModel} = qParams;\r\n\r\n    const [InfoData,setInfoData] = useState<any|null>(null);\r\n    \r\n    const [Dashboard,setDashboard] = useState<any>({\r\n        Total:10,\r\n        Groups:groups,\r\n        Parameters: [],\r\n    });\r\n    const [BillingModel,setBillingModel] = useState<any|null>(null);\r\n\r\n    const [ShowDialogParameterSelector,setShowDialogParameterSelector] = useState<boolean>(false);\r\n    const [ShowDialogBillingModelSelector,setShowDialogBillingModelSelector] = useState<boolean>(false);\r\n    const [ShowDialogBillingModelComparaison,setShowDialogBillingModelComparaison] = useState<boolean>(false);\r\n    const [ShowDialogSave,setShowDialogSave] = useState<boolean>(false);\r\n    //const [ShowDialogBillingSplitter,setShowDialogBillingSplitter] = useState<boolean>(false);\r\n    \r\n    const updateBillingModel = (id:string|null,name:string|null='')=> {\r\n        if(id)\r\n            setBillingModel({id:id,name:name});\r\n        else\r\n            setBillingModel(null);\r\n    }\r\n    \r\n    //const [StartDate, setStartDate] = React.useState<Date | null>(new Date());\r\n    //const [EndDate, setEndDate] = React.useState<Date | null>(new Date());\r\n\r\n    const [loading,setloading] = useState<boolean>(false);\r\n    \r\n    const recalculate = (param:any)=>{\r\n        let total = 0;\r\n        let _params:any = null;\r\n        // from param-popup-selector\r\n        if(Array.isArray(param)){ \r\n            _params = param;\r\n            _params.forEach((p)=>{\r\n                p.total = parseInt(p.usage)*parseFloat(p.unitPrice);\r\n                if(p.checked){\r\n                    total += p.total;\r\n                }\r\n            });\r\n        }else{\r\n            // update one param change\r\n            _params= Dashboard.Parameters;\r\n            _params.forEach((p)=>{\r\n                if(p.name === param.name){\r\n                    p.checked = param.checked;\r\n                    p.unitPrice = param.unitPrice;\r\n                    p.total = parseInt(p.usage)*parseFloat(param.unitPrice);\r\n                }\r\n                if(p.checked){\r\n                    total += p.total;\r\n                }\r\n            });\r\n        }\r\n        \r\n        // re-recalculate groups\r\n        let _groups = groups;\r\n        _groups.forEach((group)=>{\r\n            let gCount = _params.filter((p)=>{\r\n                return (p.group == group.name && p.checked==true);\r\n            }).length;\r\n           \r\n            group.count = gCount\r\n        })\r\n        \r\n        setDashboard({...Dashboard,Total:total,Groups:_groups,Parameters:_params});\r\n    }\r\n\r\n    const handlerOnCheckParam = (param:any,isChecked:boolean)=>{\r\n        recalculate({...param,checked:isChecked});\r\n    }\r\n\r\n    /*function checkUnitPrice(evt:any) {\r\n        evt = (evt) ? evt : window.event;\r\n        var charCode = (evt.which) ? evt.which : evt.keyCode;\r\n        console.log(charCode)\r\n        if((charCode >= 48 && charCode <= 57) || charCode==190 || charCode==46 || charCode==8 || charCode==9 || charCode==38|| charCode==40  ){\r\n            return true;\r\n        }else{\r\n            evt.preventDefault();\r\n            return false;\r\n        }\r\n    }*/\r\n   \r\n    // merge plan params with usage otherwise return any which are available\r\n    const getMergePlanUsageParams = ()=>{\r\n        \r\n        let params = [];\r\n        let infoParams:any = [];\r\n        if(InfoData && InfoData.plan && InfoData.plan.params && Object.keys(InfoData.plan.params).length > 0){\r\n            infoParams = InfoData.plan.params;\r\n        }\r\n        let usageParams:any = [];\r\n        if(InfoData && InfoData.billing && InfoData.billing.usageParams && Object.keys(InfoData.billing.usageParams).length > 0){\r\n            usageParams = InfoData.billing.usageParams;\r\n        }\r\n         // merge (usage)\r\n        if(infoParams.length > 0 && usageParams.length > 0){\r\n            infoParams.forEach((p:any)=>{\r\n                let uP = usageParams.filter((up)=>up.name === p.name);\r\n                if(uP.length > 0){\r\n                    p.usage = uP[0].usage;\r\n                }\r\n            })\r\n            params = infoParams;\r\n        }\r\n        else if(infoParams.length > 0) params = infoParams;\r\n        else if(usageParams.length > 0) params =usageParams;\r\n\r\n        return params;\r\n    }\r\n\r\n    const handlerOnBlurParam = (param:any,val)=>{\r\n        let unitPrice = parseFloat(val) || 0;\r\n        if(unitPrice == NaN) unitPrice = 0;\r\n\r\n        let _param = Dashboard.Parameters.filter((p)=>{\r\n            return p.name == param.name;\r\n        })\r\n        if(_param && parseFloat(_param[0].unitPrice) != unitPrice){ // check state of amount\r\n            recalculate({...param,unitPrice:unitPrice});\r\n        } \r\n    }\r\n\r\n    const loadInfoData = async()=>{\r\n        setloading(true);\r\n        let res:any = await billingConfigurator.loadInfo({id,acid,opid,byModel,bModel});\r\n        if(res && res.success){\r\n            setInfoData(res.data);\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        setloading(false);\r\n    }\r\n\r\n    // render billing model / custom params\r\n    useEffect(()=>{\r\n        console.log(InfoData)\r\n        if(InfoData){\r\n            if(InfoData.plan && Object.keys(InfoData.plan).length > 0){\r\n                // edit\r\n                let currentParams = getMergePlanUsageParams();\r\n                recalculate(currentParams);\r\n                updateBillingModel(InfoData.plan.BillingModelID,InfoData.plan.BillingModelName)\r\n            }else{\r\n                // new \r\n                if(byModel==0){ // billing model\r\n                    setShowDialogParameterSelector(true);\r\n                }else{ // custom params popup\r\n                    let _selectedModel:any = sampleModels.filter((model)=>{\r\n                        return model.id == bModel;\r\n                    });\r\n                    if(_selectedModel.length > 0){\r\n                        // map usage           \r\n                        let currentParams = getMergePlanUsageParams();\r\n                        _selectedModel[0].params.forEach((p:any)=>{\r\n                            let cBP = currentParams.filter((cP:any)=> cP.name === p.name)\r\n                            if(cBP.length > 0) p.usage = cBP[0].usage;\r\n                        });\r\n    \r\n                        updateBillingModel(_selectedModel[0].id,_selectedModel[0].name);\r\n                        recalculate(_selectedModel[0].params);\r\n                    }  \r\n                }\r\n            }\r\n        }\r\n    },[InfoData])\r\n\r\n    useEffect(() => {\r\n        loadInfoData();\r\n        ////recalculate({});\r\n    }, [])\r\n\r\n\r\n    const handlerAddParamDialog = ()=> setShowDialogParameterSelector(true);\r\n    const handlerShowBillingModel = ()=> setShowDialogBillingModelSelector(true);\r\n\r\n    const handlerOnClickSaveParam = (selectedParameters:any)=>{\r\n        recalculate(selectedParameters);\r\n        setShowDialogParameterSelector(false);\r\n        \r\n        // remove chosen model \r\n        updateBillingModel(null);\r\n    }\r\n\r\n    const handlerOnBillingModelSelect = (billingModel:any)=>{\r\n        updateBillingModel(billingModel.id,billingModel.name);\r\n        //setBillingModel({id:billingModel.id,name:billingModel.name});\r\n        recalculate(billingModel.params);\r\n        \r\n        setShowDialogBillingModelSelector(false);\r\n    }\r\n\r\n    const handlerCompareModels = ()=> setShowDialogBillingModelComparaison(true);\r\n    const handlerClickSave = ()=> setShowDialogSave(true);\r\n    //const handlerShowSplitBilling = ()=> setShowDialogBillingSplitter(true);\r\n\r\n    // save split billing\r\n    /*const handlerSaveSplitBilling = (data:any)=>{\r\n        setInfoData({...InfoData,splitBilling:[...data]});\r\n        setShowDialogBillingSplitter(false);\r\n    }*/\r\n\r\n    return (\r\n        <>  \r\n            {loading && <div>\r\n                <LinearProgress className=\"\"/><br/>\r\n                <Stack justifyContent=\"center\" direction=\"row\">\r\n                    Loading account billing information ....\r\n                </Stack>\r\n            </div>}\r\n            \r\n\r\n            {InfoData!=null && \r\n            <div className=\"page-content\">\r\n                \r\n                <Grid container spacing={2}>\r\n                    <Grid item md={4} lg={4} xs={12}>\r\n                        <h2>Aviatrix Billing Configurator<span> Create New Billing Plan for {InfoData && InfoData.account.Name} </span></h2>\r\n                    </Grid>\r\n                    <Grid item md={8} lg={8} xs={12}>\r\n                        <Grid container direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\">\r\n                            <Grid>\r\n                                {Dashboard && Dashboard.Parameters.length>0 && \r\n                                    <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={handlerClickSave}>Save Billing Plan</Button>\r\n                                }\r\n                                &nbsp;<Button variant=\"contained\" color=\"secondary\"  size=\"small\" onClick={handlerShowBillingModel}>Create From Billing Model</Button>&nbsp;\r\n                                <Button variant=\"contained\" color=\"secondary\"  size=\"small\" onClick={handlerAddParamDialog}>Create On Your Own</Button> \r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n                {Dashboard && Dashboard.Parameters.length>0 && \r\n\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    <Grid container spacing={2}>\r\n                        <Grid item md={4}>\r\n                            <h4 className='account'>{InfoData.account.Name}</h4>\r\n                            <div className='groups border-right'>\r\n                                {Dashboard.Groups && Dashboard.Groups.map((g:any,index:number)=>(\r\n                                    <>\r\n                                    <div className={`group`} key={index}>\r\n                                        <div className={`icon ${g.name}`}></div>\r\n                                        <span className='name'>{g.title}</span>\r\n                                        <span className='count'>{g.count} resources</span>\r\n                                    </div>\r\n                                    </>\r\n                                ))}\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item md={8}>\r\n                            {BillingModel && \r\n                                <div style={{fontSize:'12px',paddingBottom:'6px'}}>\r\n                                    Selected Model: <strong>{BillingModel.name}</strong>&nbsp;- <Link onClick={handlerCompareModels} >Compare Models</Link>\r\n                                </div>\r\n                            }\r\n                            <div className='param-checklist'>\r\n                                {Dashboard.Parameters && Dashboard.Parameters.map((p:any,index:number)=>(\r\n                                    <ParameterField p={p} key={index} onBlur={handlerOnBlurParam} onCheck={handlerOnCheckParam} />\r\n                                ))}\r\n                            </div>\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n                    \r\n                    <br/><Divider/><br/>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item md={2}>\r\n                            <div className='num-box ' style={{backgroundColor:'#c43465',color:'#fff'}}>\r\n                                <strong>Yearly bill</strong>\r\n                                <h3><AnimatedNumber value={Dashboard.Total*12} duration={800} formatValue={n => u.format.currency(n) }/></h3>\r\n                            </div>\r\n                            <div className='num-box ' style={{backgroundColor:'#00a8ce',color:'#fff'}}>\r\n                                <strong>Total monthly bill</strong>\r\n                                <h3><AnimatedNumber value={Dashboard.Total} duration={800} formatValue={n => u.format.currency(n) }/></h3>\r\n                            </div>\r\n                            {Dashboard.Parameters && Dashboard.Parameters.map((p:any,index:number)=>(\r\n                                <>\r\n                                {p.checked &&\r\n                                <div className='num-box' key={index}>\r\n                                    <strong>{p.title}</strong>\r\n                                    <h3><AnimatedNumber value={p.total} duration={800} formatValue={n => u.format.currency(n) }/></h3>\r\n                                </div>\r\n                                }\r\n                                </>\r\n                            ))}\r\n                        </Grid>\r\n                        <Grid item md={10}>\r\n                            <Grid container spacing={1}>\r\n                                <Grid item md={6}>\r\n                                    <Grid container spacing={1}>\r\n                                        <Grid item md={12}>\r\n                                            <div className='graph-title'>Billing by Parameters</div>\r\n                                            \r\n                                                <GraphParameters parameters={Dashboard.Parameters}/>\r\n                                            \r\n                                            <Divider/>\r\n                                        </Grid>\r\n                                        <Grid item md={6}>\r\n                                            <div className='graph-title'>New vs. Old Billing</div>\r\n                                            \r\n                                                <InvoiceGraph dashboard={Dashboard} invoicedAmount={InfoData?InfoData.billing.lastMonthInvoice.amount:0}/>\r\n                                            \r\n                                            <Divider/>\r\n                                        </Grid>\r\n                                        <Grid item md={6}>\r\n                                            <div className='graph-title'>Increased Billing Percentage</div>\r\n                                            \r\n                                                <GraphGuage dashboard={Dashboard} invoicedAmount={InfoData?InfoData.billing.lastMonthInvoice.amount:0}/>\r\n                                            \r\n                                            <Divider/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item md={6}>\r\n                                    <div className='graph-title'>Billing by Resource Groups</div>\r\n                                    \r\n                                        <GraphGroupParametersPie dashboard={Dashboard} groups={groups}/>\r\n                                    \r\n                                    <Divider/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n                }\r\n               \r\n            </div>\r\n            }\r\n            \r\n            <ModalDialog \r\n                title=\"Add New Billing Parameters\"\r\n                component={<ParameterSelector \r\n                                planParams={getMergePlanUsageParams()}    \r\n                                parameters = {InfoData?InfoData.parameters:[]}\r\n                                //selectedParams={(Dashboard && Dashboard.Parameters.length > 0)?Dashboard.Parameters:[]}\r\n                                onClickSaveParam={handlerOnClickSaveParam}  \r\n                            />}\r\n                open={ShowDialogParameterSelector} \r\n                onClose={()=>{setShowDialogParameterSelector(false)}}\r\n            />\r\n            \r\n            <ModalDialog \r\n                title=\"Select Billing Model\"\r\n                fullScreen={false}\r\n                component={<BillingModelSelector \r\n                                planParams={getMergePlanUsageParams()}    \r\n                                onBillingModelSelect={handlerOnBillingModelSelect}  \r\n                            />}\r\n                open={ShowDialogBillingModelSelector} \r\n                onClose={()=>{setShowDialogBillingModelSelector(false)}}\r\n            />\r\n            \r\n            <ModalDialog \r\n                title=\"Billing Model Comparison\"\r\n                component={<BillingModelComparison\r\n                                planParams={getMergePlanUsageParams()}    \r\n                                //onBillingModelSelect={handlerOnBillingModelSelect}  \r\n                            />}\r\n                open={ShowDialogBillingModelComparaison} \r\n                onClose={()=>{setShowDialogBillingModelComparaison(false)}}\r\n            />\r\n            \r\n            <ModalDialog \r\n                fullScreen={false}\r\n                maxWidth=\"sm\"\r\n                title=\"Save Billing Plan\"\r\n                component={<DialogSavePlan\r\n                                data = {{\r\n                                    id,    \r\n                                    params:Dashboard.Parameters,\r\n                                    account:InfoData?InfoData.account:null,\r\n                                    //opportunity:InfoData?InfoData.opportunity:null,\r\n                                    billingModel:BillingModel,\r\n                                    plan:InfoData?InfoData.plan:null,\r\n                                    splitBilling:InfoData?InfoData.splitBilling:null\r\n                                }}\r\n                                //onSave={handlerOnSavePlan}  \r\n                            />}\r\n                open={ShowDialogSave} \r\n                onClose={()=>{setShowDialogSave(false)}}\r\n            />\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst ParameterField = ({p,onCheck,onBlur})=>{\r\n    return (\r\n        <div className='param'>\r\n            <Checkbox \r\n                checked={p.checked} \r\n                disableRipple={true} \r\n                onChange={(event: React.ChangeEvent<HTMLInputElement>)=>{\r\n                    onCheck(p,event.target.checked)\r\n                    //handlerOnCheckParam(p,event.target.checked)\r\n                }} \r\n            />\r\n            <input className='sm-text'\r\n                type=\"number\" \r\n                min={0}\r\n                max={0.2100}\r\n                step={0.0001}\r\n                maxLength={6}\r\n                placeholder={u.format.unitPrice(p.unitPrice)} \r\n                onBlur={(e:any)=>{\r\n                    //handlerOnBlurParam(p,e.target.value);\r\n                    onBlur(p,e.target.value)\r\n                    e.target.value = '';\r\n                }}\r\n                onFocus={(e:any)=>{\r\n                    e.target.value = p.unitPrice;\r\n                }}\r\n            /> {p.title}\r\n        </div>\r\n    )\r\n}\r\n  \r\n\r\nexport default PlanCreator;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\standardPlan\\index.tsx",["1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363","1364","1365"],"import React,{useState,useEffect} from 'react';\r\nimport { Grid, Paper,Stack,Button, Icon, Tooltip, IconButton, LinearProgress, Checkbox, Divider } from '@mui/material';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport ModalDialog from '../../../../components/ModalDialog';\r\nimport billingConfigurator from '../../../../services/billingConfigurator';\r\nimport u from '../../../../services/util';\r\nimport '../planCreator/assets/style.css';\r\nimport GridView from '../../../../components/GridView';\r\n\r\nconst StandardBillingPlan = ()=>{\r\n    \r\n    const [StandardPlan,setStandardPlan] = useState<any|null>(null);\r\n    const [GridData,setGridData] = useState<any|null>(null);\r\n    const [Parameters,setParameters] = useState<any|null>(null);\r\n    const [loading,setloading] = useState<boolean>(false);\r\n\r\n    const load = async()=>{\r\n        setloading(true);\r\n\r\n        let res:any = await billingConfigurator.getStandardPlan();\r\n        if(res.success){   \r\n            let _params = sortByName(res.data.parameters);\r\n            setParameters(_params);\r\n            setStandardPlan(res.data.standardPlan);\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        setloading(false);\r\n    } \r\n\r\n    \r\n    const getParamTitle = (params,name)=>{\r\n        if(params){\r\n            let _p = params.filter((param)=>param.name===name);\r\n            if(_p && _p.length > 0) return _p[0].title;    \r\n        }\r\n        return '';\r\n    }\r\n    const getParamUnit = (params,name)=>{\r\n        if(params){\r\n            let _p = params.filter((param)=>param.name===name);\r\n            if(_p && _p.length > 0) return _p[0].unit;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const recalculate = (param:any)=>{\r\n        //let total = 0;\r\n        let _params:any = null;\r\n        // update one param change\r\n        _params = [...Parameters];\r\n        _params.forEach((p)=>{\r\n            if(p.name === param.name){\r\n                p.checked = param.checked;\r\n                p.unitPrice = param.unitPrice;\r\n                //p.total = parseInt(p.usage)*parseFloat(param.unitPrice);\r\n            }\r\n            //if(p.checked){\r\n            //    total += p.total;\r\n            //}\r\n        });\r\n    \r\n        setParameters(_params);\r\n    }\r\n\r\n    const handlerOnCheckParam = (param:any,isChecked:boolean)=>{\r\n        recalculate({...param,checked:isChecked});\r\n    }\r\n\r\n    const handlerOnBlurParam = (param:any,val)=>{\r\n        let unitPrice = parseFloat(val) || 0;\r\n        if(unitPrice == NaN) unitPrice = 0;\r\n\r\n        let _param = Parameters.filter((p)=>{\r\n            return p.name == param.name;\r\n        })\r\n        if(_param && parseFloat(_param[0].unitPrice) != unitPrice){ // check state of amount\r\n            recalculate({...param,unitPrice:unitPrice});\r\n        } \r\n    }\r\n\r\n    const getSelectedParameters = ()=>{\r\n        let params:any = {};\r\n        if(Parameters){\r\n            for(let param of Parameters){\r\n                if(param.checked){\r\n                    params[param.name] = param.unitPrice;\r\n                }\r\n            }\r\n        }\r\n        return params;\r\n    }\r\n\r\n    const sortByName = (params)=>{\r\n        params.sort((a:any,b:any)=>{\r\n            return (a.name.toLowerCase() > b.name.toLowerCase())?1:-1;\r\n        });\r\n        return params; \r\n    }\r\n\r\n    useEffect(() => {\r\n        load();\r\n    }, [])\r\n\r\n    // load grid data \r\n    useEffect(()=>{\r\n        if(StandardPlan){\r\n            let plan = StandardPlan;\r\n            // set gridview data\r\n            if(plan && plan.JsonData && Object.keys(plan.JsonData).length > 0){\r\n                let _gridRows:any = [];\r\n                let index = 1;\r\n                \r\n                let _params = sortObject(plan.JsonData);\r\n                for(let k in _params){\r\n                    _gridRows.push({\r\n                        no:index,\r\n                        name:k,\r\n                        title:getParamTitle(Parameters,k),\r\n                        //unit:getParamUnit(Parameters,k),\r\n                        price:_params[k]\r\n                    });\r\n                    index++;\r\n                }\r\n                setGridData({\r\n                    columns:[{key:'no',label:'No.'},{key:'name',label:'Name'},{key:'price',label:'Price'}],\r\n                    rows:_gridRows,\r\n                })\r\n            }\r\n\r\n        }\r\n    },[StandardPlan])\r\n\r\n    function sortObject(obj) {\r\n        return Object.keys(obj).sort().reduce(function (result, key) {\r\n            result[key] = obj[key];\r\n            return result;\r\n        }, {});\r\n    }\r\n  \r\n    const handlerSave = async()=>{\r\n        let selectedParams = getSelectedParameters();\r\n        if(selectedParams.length == 0){\r\n            window.snakAlert.warning(\"Please select atleast one parameter\");\r\n            return;\r\n        }\r\n\r\n        setloading(true);\r\n        let res:any = await billingConfigurator.saveStandardPlan({parameters:selectedParams});\r\n        if(res.success){\r\n            setStandardPlan(res.data.standardPlan);\r\n            window.snakAlert.success(res.data.message);\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        setloading(false);\r\n    }\r\n\r\n    const handlerSyncBillingEngine = async()=>{\r\n        setloading(true);\r\n        let res:any = await billingConfigurator.syncStandardPlan();\r\n        if(res.success){\r\n            window.snakAlert.success(res.data);\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        setloading(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loading && <LinearProgress />}\r\n            <div className=\"page-content\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={5} lg={6} xs={12}>\r\n                        <h2>Billing Configurator (Standard Billing Plan) <span>Update Standard Billing Plan</span></h2>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n                <Grid container spacing={3}>\r\n                    <Grid item md={12}>\r\n                        <h4>Current Plan</h4>\r\n                        <Paper elevation={1} className=\"section mt-10\">\r\n                            {StandardPlan === null && <>No Plan exists</>}\r\n                            <GridView data={GridData} />\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item md={12}>\r\n                        <h4>Modify Plan</h4>\r\n                        <Paper elevation={1} className=\"section mt-10\">\r\n                            {!Parameters && <>Billing parameters not available</>}\r\n                            {Parameters && \r\n                            <>\r\n                            <div className='param-checklist'>\r\n                                {Parameters && Parameters.map((p:any,index:number)=>(\r\n                                    <div key={index} className='param'>\r\n                                        <Checkbox \r\n                                            checked={p.checked} \r\n                                            disableRipple={true} \r\n                                            disabled={true}\r\n                                            onChange={(event: React.ChangeEvent<HTMLInputElement>)=>{\r\n                                                handlerOnCheckParam(p,event.target.checked)\r\n                                            }} \r\n                                        />\r\n                                        <input className='sm-text' \r\n                                            type=\"number\" \r\n                                            min={0}\r\n                                            max={0.21}\r\n                                            step={0.01}\r\n                                            maxLength={6}\r\n                                            placeholder={u.format.currency(p.unitPrice)} \r\n                                            onBlur={(e:any)=>{\r\n                                                handlerOnBlurParam(p,e.target.value);\r\n                                                e.target.value = '';\r\n                                            }}\r\n                                            onFocus={(e:any)=>{\r\n                                                e.target.value = p.unitPrice;\r\n                                            }}\r\n                                        /> <span style={{fontSize:'12px'}}>{p.title}</span> \r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <Divider/>\r\n                            <Stack justifyContent=\"right\" direction=\"row\" className='mt-10'>\r\n                                <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={handlerSave} disabled={loading} > Save</Button> &nbsp;\r\n                                {StandardPlan && \r\n                                <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={handlerSyncBillingEngine} disabled={loading} > Update Billing Engine</Button>\r\n                                }\r\n                            </Stack>\r\n                            </>\r\n                            }\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n         \r\n        </>\r\n    )\r\n}\r\n\r\nexport default StandardBillingPlan;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\util.ts",["1366"],"import moment from 'moment';\r\nimport numeral from 'numeral';\r\n//import 'numeral/locales/en-gb';\r\n//numeral.locale('en-gb');\r\n\r\nconst util = {\r\n    format:{\r\n        date:(date:any)=>{\r\n            return moment(date).format('DD-MM-YYYY');\r\n        },\r\n        datetime:(date:any)=>{\r\n            return moment(date).format('DD MMM, YYYY h:mm:ss a');\r\n        },\r\n        durationUntilNow:(seconds:any)=>{\r\n            let year = Math.floor(seconds/31536000);\r\n            seconds = seconds % 31536000;\r\n            let minute = Math.floor(seconds / 60);\r\n            seconds = seconds % 60;\r\n            let hour = Math.floor(minute / 60);\r\n            minute = minute % 60;\r\n            let day = Math.floor(hour / 24);\r\n            hour = hour % 24;\r\n            let str = '';\r\n            str += (year>0)?year.toString().padStart(2,'0')+'Y ':'';\r\n            str += (day>0)?day.toString().padStart(2,'0')+'D ':'';\r\n            str += (hour>0)?hour.toString().padStart(2,'0')+':':'00:';\r\n            str += (minute>0)?minute.toString().padStart(2,'0')+':':'00:';\r\n            str += (seconds>0)?seconds.toString().padStart(2,'0')+'':'00';\r\n            return str\r\n        },\r\n        seconds:(seconds:any)=>{\r\n            let year = Math.floor(seconds/31536000);\r\n            seconds = seconds % 31536000;\r\n            let minute = Math.floor(seconds / 60);\r\n            seconds = seconds % 60;\r\n            let hour = Math.floor(minute / 60);\r\n            minute = minute % 60;\r\n            let day = Math.floor(hour / 24);\r\n            hour = hour % 24;\r\n            let str = '';\r\n            str += (year>0)?year.toString().padStart(2,'0')+'Y ':'';\r\n            str += (day>0)?day.toString().padStart(2,'0')+'D ':'';\r\n            str += (hour>0)?hour.toString().padStart(2,'0')+':':'00:';\r\n            str += (minute>0)?minute.toString().padStart(2,'0')+':':'00:';\r\n            str += (seconds>0)?seconds.toString().padStart(2,'0')+'':'00';\r\n            return str\r\n        },\r\n        time:(date:any)=>{\r\n            return moment(date).format('h:mm:ss a');\r\n        },\r\n        MM_YYYY:(date:any)=>{\r\n            return  moment(date).format('MMMM, YYYY');\r\n        },\r\n        currency:(val:any)=>{\r\n            return numeral( val ).format('$0,0.00');\r\n        },\r\n        unitPrice:(val:any)=>{\r\n            return numeral( val ).format('$0,0.0000');\r\n        }\r\n    },\r\n    date:{\r\n        today:()=>{\r\n            return moment().format('YYYY-MM-DD');\r\n        },\r\n        oneMonthAhead:()=>{\r\n            return moment().add(30, 'days').format('YYYY-MM-DD');\r\n        }\r\n    },\r\n    ifNull:(val:string,dval:string='')=>{\r\n        return (val==null || val == undefined)?(dval?dval:''):val;\r\n    }\r\n}\r\n\r\nexport default util;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\ABU.ts",["1367"],"/**\r\n * ABU billing unit \r\n*/\r\nimport client from './client';\r\nconst getReport = async(params)=>{\r\n     \r\n    let res:any = await client.get('/billing/report/abu',params);\r\n    if(res.success){\r\n        return res;\r\n    }\r\n    return {success:true,data:[]};\r\n}\r\n\r\nconst getBreakdown = async(params)=>{\r\n     \r\n    let res:any = await client.get('/billing/report/abu/breakdown',params);\r\n    if(res.success){\r\n        return res;\r\n    }\r\n    return {success:true,data:[]};\r\n}\r\n\r\n\r\nexport default {\r\n    getReport,getBreakdown\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\CDateRangePicker.tsx",["1368","1369"],"import React,{useEffect, useState} from 'react';\r\nimport { DateRangePicker, DateRange } from \"@matharumanpreet00/react-daterange-picker\";\r\nimport { Button, Divider, Grid, Icon, IconButton, Stack,Box } from '@mui/material';\r\nimport ModalDialog from './ModalDialog';\r\nimport moment from 'moment';\r\nimport {\r\n\taddDays,\r\n\tstartOfWeek,\r\n\tendOfWeek,\r\n\taddWeeks,\r\n\tstartOfMonth,\r\n\tendOfMonth,\r\n\taddMonths\r\n} from \"date-fns\"; \r\n\r\nconst date = new Date();\r\nconst customDefineRange = [\r\n    {\r\n\t\tlabel: \"Today\",\r\n\t\tstartDate: date,\r\n\t\tendDate: date\r\n\t},\r\n\t{\r\n\t\tlabel: \"Yesterday\",\r\n\t\tstartDate: addDays(date, -1),\r\n\t\tendDate: addDays(date, -1)\r\n\t},\r\n\t{\r\n\t\tlabel: \"This Week\",\r\n\t\tstartDate: startOfWeek(date),\r\n\t\tendDate: endOfWeek(date)\r\n\t},\r\n\t{\r\n\t\tlabel: \"Last Week\",\r\n\t\tstartDate: startOfWeek(addWeeks(date, -1)),\r\n\t\tendDate: endOfWeek(addWeeks(date, -1))\r\n\t},\r\n\t{\r\n\t\tlabel: \"Last 7 Days\",\r\n\t\tstartDate: addWeeks(date, -1),\r\n\t\tendDate: date\r\n\t},\r\n\t{\r\n\t\tlabel: \"This Month\",\r\n\t\tstartDate: startOfMonth(date),\r\n\t\tendDate: endOfMonth(date)\r\n\t},\r\n\t{\r\n\t\tlabel: \"Last Month\",\r\n\t\tstartDate: startOfMonth(addMonths(date, -1)),\r\n\t\tendDate: endOfMonth(addMonths(date, -1))\r\n\t}\r\n];\r\n\r\n\r\nconst CDateRangePicker = (props:any)=>{\r\n\r\n    const {initialDateRange,initialCustomDefineRange} = props;\r\n    const [dateRange, setDateRange] = useState<DateRange>({});\r\n    const [UpdatedDateRange, setUpdatedDateRange] = useState<any>({});\r\n\r\n    const [Open,setOpen] = useState(false);\r\n\r\n    const handlerChageDate = ()=>{\r\n        const localDate = {\r\n            startDate: moment(dateRange.startDate).local().format('YYYY/MM/DD'),\r\n            endDate: moment(dateRange.endDate).local().format('YYYY/MM/DD')\r\n        }\r\n        setUpdatedDateRange(localDate)\r\n        props.onSetDate(localDate);\r\n        setOpen(false)\r\n    }\r\n\r\n    const geInitialRange = (customDefineRange:any,label:string)=>{\r\n        if(customDefineRange){\r\n            let range = customDefineRange.filter((range)=>range.label == label)\r\n            if(range && range.length > 0){\r\n                return range[0]\r\n            }\r\n        }\r\n        return {}\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        const initialRange = geInitialRange(initialCustomDefineRange?initialCustomDefineRange:customDefineRange,initialDateRange);\r\n        if(initialRange){\r\n            setDateRange({startDate:initialRange.startDate,endDate:initialRange.endDate})\r\n            const localDate = {\r\n                startDate: moment(initialRange.startDate).local().format('YYYY/MM/DD'),\r\n                endDate: moment(initialRange.endDate).local().format('YYYY/MM/DD')\r\n            }\r\n            setUpdatedDateRange(localDate)\r\n            props.onSetDate(localDate);\r\n        }\r\n    },[])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <Grid item md={12}>\r\n                    <Box sx={{borderBottom:'1px solid #cfcfcf'}}>\r\n                        {}\r\n                        <Stack justifyContent=\"right\" direction=\"row\">\r\n                            <span style={{paddingTop:'8px'}}>{UpdatedDateRange.startDate} &nbsp;-&nbsp; {UpdatedDateRange.endDate}</span>\r\n                            &nbsp; &nbsp; <IconButton onClick={()=>{setOpen(true)}}>\r\n                                <Icon>date_range</Icon>\r\n                            </IconButton>\r\n                        </Stack>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <ModalDialog  className='daterange'\r\n                title=\"Select date range\"\r\n                fullScreen={false}\r\n                fullWidth={false}\r\n                open={Open}\r\n                onClose={()=>{setOpen(false)}}\r\n                component={\r\n                    <>\r\n                    <DateRangePicker\r\n                        //minDate={addDays(dateRange.endDate, -30)}\r\n                        maxDate={new Date()}\r\n                        open={true}\r\n                        onChange={range => setDateRange(range)}\r\n                        definedRanges={customDefineRange}\r\n                        initialDateRange={ geInitialRange(initialCustomDefineRange?initialCustomDefineRange:customDefineRange,initialDateRange) }\r\n                    />\r\n                    <Divider/>\r\n                    <Stack justifyContent=\"right\" direction=\"row\" className='mt-10'>\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={handlerChageDate}>Ok</Button>\r\n                    </Stack>\r\n                    \r\n                    </>\r\n            }\r\n            />\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default CDateRangePicker;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\SearchableDropdown.tsx",["1370","1371","1372","1373"],"/**\r\n * common searchable dropdown\r\n * data = [{text:'',id:''}]\r\n * props: \r\n * - onSelect,clear,action = (service/common fn)\r\n*/\r\n\r\nimport React,{memo,useEffect,useState,useCallback,useRef } from 'react';\r\nimport { Autocomplete,CircularProgress, TextField } from '@mui/material';\r\n\r\nimport commonSearchService from '../services/common';\r\n\r\nconst SearchableDropdown:React.FC<any> = (props:any)=>{\r\n    const {action,params,label} = props;\r\n    \r\n    const autoC = useRef<HTMLDivElement>(null);\r\n    \r\n    const [open, setOpen] = useState(false);\r\n    const [options, setOptions]:any = useState([]);\r\n    \r\n    let loading = open && options.length === 0;\r\n    let interval = null;\r\n    \r\n    const doSearch = async(term:string='')=>{  \r\n      //setOpen(true);\r\n      if(term.trim().length < 2) return;\r\n      if(action){\r\n          if(interval) clearInterval(interval);\r\n          \r\n          interval = setTimeout(async() => {\r\n              loading = open && options.length === 0;\r\n              \r\n              let res:any|null = null;\r\n              if(params){\r\n                res = await commonSearchService[action](term,params);\r\n              }else{\r\n                res = await commonSearchService[action](term);\r\n              }\r\n              \r\n              if(res)\r\n                setOptions(res);  \r\n          }, 300);\r\n        }        \r\n    }\r\n\r\n    useEffect(() => {\r\n      let active = true;\r\n      if (!loading) {\r\n        return undefined;\r\n      }\r\n\r\n      if (open) {\r\n        //doSearch();\r\n      }\r\n      return () => {\r\n        active = false;\r\n      };\r\n    }, [loading]);\r\n\r\n    useEffect(() => {\r\n      if (!open) {\r\n        setOptions([]);\r\n      }\r\n    }, [open]);\r\n    \r\n    // clear selection\r\n    useEffect(() => {\r\n        if(props.clear === true){\r\n          if(autoC && autoC.current){\r\n            const ele:any = autoC.current.getElementsByClassName('MuiAutocomplete-clearIndicatorDirty')[0];\r\n            if(ele) ele.click();\r\n          }\r\n        }\r\n    }, [props.clear])\r\n    \r\n\r\n    return (\r\n    <Autocomplete ref={autoC}\r\n      id=\"combo-search-auto\"\r\n      size=\"small\"\r\n      className=\"autocomplete\"\r\n      //searchText={props.value}\r\n      open={open}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      autoComplete={false}\r\n      fullWidth\r\n      isOptionEqualToValue={(option:any, value:any) => option.id === value.id}\r\n      getOptionLabel={(option:any) => option.text}\r\n      defaultValue= {props.value?props.value:null}\r\n      //inputValue=\"AvidXchange\"\r\n      options={options}\r\n      loading={open && options.length}\r\n      clearOnEscape\r\n      onChange={(event, newValue:any) => {\r\n        setOptions(newValue ? [newValue, ...options] : options);\r\n        props.onSelect(newValue?newValue:'');\r\n      }}\r\n      onInputChange={(event, newInputValue) => {\r\n        doSearch(newInputValue);\r\n      }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label= {label?label:\"Select Account\"} \r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          margin=\"normal\"\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <>\r\n                {loading ? <CircularProgress color=\"inherit\" sx={{margin:'0px 11px 0 0 '}} size={20} />:null}\r\n                {params.InputProps.endAdornment}\r\n              </>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n    )\r\n}\r\n\r\nexport default SearchableDropdown;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\ModalDialog.tsx",["1374","1375","1376","1377","1378","1379","1380","1381","1382"],"/**\r\n * Full width dialog\r\n * props\r\n    {\r\n        title:string\r\n        component:<Component/>\r\n        open,\r\n        onClose\r\n    }\r\n */\r\nimport {AppBar,Stack, Dialog, DialogTitle, Divider, Icon, IconButton, Paper, TableRow, Toolbar, Typography } from \"@mui/material\";\r\nimport React,{useState,useMemo,useEffect} from \"react\";\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n    \r\nconst ModalDialog = (props:any)=>{\r\n    const {title,component,onClose,open,fullScreen,maxWidth,fullWidth,className} = props;\r\n    \r\n    return (\r\n        <>\r\n            <Dialog\r\n                fullScreen={fullScreen==null?true:fullScreen}\r\n                fullWidth={fullWidth==null?true:fullWidth}\r\n                maxWidth={maxWidth==null?\"md\":maxWidth}\r\n                open={open}\r\n                className={className?className:''}\r\n                //onClose={onClose}\r\n                //TransitionComponent={Transition}\r\n            >\r\n                {(fullScreen==null || fullScreen==true) &&\r\n                <AppBar color=\"secondary\">\r\n                    <Toolbar>\r\n                        <Typography sx={{ ml: 2, flex: 1 }} variant=\"h6\" component=\"div\"> {title}</Typography>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            onClick={onClose}\r\n                            aria-label=\"close\"\r\n                        >\r\n                        <CloseIcon />\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                }   \r\n                {fullScreen==false && \r\n                <>\r\n                <DialogTitle className=\"dialog-title\" >{title}</DialogTitle>\r\n                <div style={{position:'absolute',right:'10px',top:'10px'}}>\r\n                    <IconButton\r\n                        \r\n                        color=\"inherit\"\r\n                        onClick={onClose}\r\n                        aria-label=\"close\"\r\n                    ><CloseIcon /></IconButton>\r\n                </div>\r\n                <Divider/>\r\n                </>\r\n                }\r\n                <Paper elevation={0} className=\"section\" style={{overflow:'auto',paddingTop:(fullScreen==null||fullScreen==true)?'38px':'0'}}>\r\n                    {component}\r\n                </Paper>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ModalDialog;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\assets\\sampleModels.js",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\assets\\groups.js",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\tags.ts",["1383"],"/**\r\n * Salesforce Service\r\n */\r\n\r\n import client from './client';\r\n\r\n const listing = async(params)=>{\r\n     let res:any = await client.get(\"/tags/list\",params);\r\n     return res;\r\n }\r\n const update = async(params)=>{\r\n     let res:any = await client.post(\"/tags/update\",params);\r\n     return res;\r\n }\r\n \r\n const getAccounts = async(params)=>{\r\n     \r\n    let res:any = await client.get('/tags/getAccounts',params);\r\n   return res\r\n}\r\nconst getTagsbyAccoutIDs = async(params)=>{\r\n     \r\n    let res:any = await client.put('/tags/getTagsbyAccoutIDs',params);\r\n   return res\r\n}\r\n \r\n export default {\r\n     listing, update,getAccounts,getTagsbyAccoutIDs\r\n }","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\orders.ts",["1384"],"\r\nimport client from '../client';\r\n\r\nconst listing = async (params) => {\r\n    let res: any = await client.get(\"/supplierportal/orders/listOrder\", params);\r\n    return res;\r\n}\r\n\r\nconst vendorOrderlisting = async (params) => {\r\n    let res: any = await client.get(\"/supplierportal/orders/listVendorOrder\", params);\r\n    return res;\r\n}\r\n\r\nconst remove = async (params) => {\r\n    let res: any = await client.delete(\"/supplierportal/orders/remove\", params);\r\n    return res;\r\n}\r\n\r\nconst update = async (params) => {\r\n    let res: any = await client.post(\"/supplierportal/orders/update\", params);\r\n    return res;\r\n}\r\n\r\nconst create = async (params) => {\r\n    let res: any = await client.post(\"/supplierportal/orders/create\", params);\r\n    return res;\r\n}\r\n\r\nconst createOrder = async (params) => {\r\n    let res: any = await client.post(\"/supplierportal/orders/create-order\", params);\r\n    return res;\r\n}\r\n\r\nconst getOrderDetails = async (params) => {\r\n    let res: any = await client.get(\"/supplierportal/orders/getOrder\", params);\r\n    return res;\r\n}\r\n\r\nconst getOrderTracking = async (params) => {\r\n    let res: any = await client.get(\"/supplierportal/orders/get-tracking\", params);\r\n    return res;\r\n}\r\n\r\nconst updateOrderTracking = async (params) => {\r\n    let res: any = await client.put(\"/supplierportal/orders/update-tracking\", params);\r\n    return res;\r\n}\r\n\r\nconst updateOrderTrackingstatusModal = async (params) => {\r\n    let res: any = await client.post(\"/supplierportal/orders/update-tracking-status-modal\", params);\r\n    return res;\r\n}\r\n\r\nconst createOrderTracking = async (params) => {\r\n    let res: any = await client.get(\"/supplierportal/orders/create-tracking\", params);\r\n    return res;\r\n}\r\nconst activate = async (params) => {\r\n    let res: any = await client.post(\"/supplierportal/orders/activate\", params);\r\n    return res;\r\n}\r\nconst sendOrderEmail = async (params) => {\r\n    let res: any = await client.post(\"/supplierportal/orders/create-email\", params);\r\n    return res;\r\n}\r\nconst uploadImage = async (params) => {\r\n    let res: any = await client.put(\"/supplierportal/orders/create-image\", params);\r\n    return res;\r\n}\r\nconst deleteInvoices = async (params) => {\r\n    let res: any = await client.delete(\"/supplierportal/orders/remove-invoices\", params);\r\n    return res;\r\n}\r\nconst getFileObject = async (params) => {\r\n    let res: any = await client.get(\"/supplierportal/orders/get-file\", params);\r\n    return res;\r\n}\r\nexport default {\r\n    listing, remove, update, create, getOrderDetails, vendorOrderlisting, getOrderTracking, updateOrderTracking, createOrderTracking, activate, createOrder, sendOrderEmail,\r\n    uploadImage,updateOrderTrackingstatusModal, deleteInvoices, getFileObject\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\index.ts",["1385"],"/**\r\n * Salesforce Service\r\n */\r\n\r\n import products from './products'\r\n import vendors from './vendors'\r\n import orders from './orders'\r\n import ordershipping from './order_shipping'\r\n import orderappliance from './order_appliance'\r\n import orderoptional from './order_optional'\r\n export default {\r\n     products,\r\n     vendors,\r\n     orders,\r\n     ordershipping,\r\n     orderappliance,\r\n     orderoptional\r\n }","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\billingConfigurator.ts",["1386"],"import client from './client';\r\n \r\nconst planList = async(params)=>{\r\n     \r\n    let res:any = await client.post('/billing/Configurator/planlist',params);\r\n    if(res.success){\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\n\r\nconst loadInfo = async(params)=>{\r\n    let res:any = await client.get('/billing/Configurator/loadInfo',params);     \r\n    return res;\r\n}\r\n\r\nconst savePlan = async(params)=>{\r\n    let res:any = await client.post('/billing/Configurator/savePlan',params);     \r\n    return res;\r\n}\r\n\r\nconst loadPlanDetail = async(params)=>{\r\n    let res:any = await client.get('/billing/Configurator/loadPlanDetail',params);     \r\n    return res;\r\n}\r\nconst submitBillingPlan = async(params)=>{\r\n    let res:any = await client.post('/billing/Configurator/submitPlan',params);     \r\n    return res;\r\n}\r\n\r\nconst getStandardPlan = async(params)=>{\r\n    let res:any = await client.get('/billing/Configurator/getStandardPlan',params);     \r\n    return res;\r\n}\r\nconst saveStandardPlan = async(params)=>{\r\n    let res:any = await client.post('/billing/Configurator/saveStandardPlan',params);     \r\n    return res;\r\n}\r\nconst syncStandardPlan = async(params)=>{\r\n    let res:any = await client.post('/billing/Configurator/syncStandardPlan',params);     \r\n    return res;\r\n}\r\nconst syncCustomPlan = async(params)=>{\r\n    let res:any = await client.post('/billing/Configurator/syncCustomPlan',params);     \r\n    return res;\r\n}\r\nexport default {\r\n    planList,loadInfo,savePlan,loadPlanDetail,\r\n    submitBillingPlan,\r\n    getStandardPlan,saveStandardPlan,\r\n    \r\n    syncStandardPlan,syncCustomPlan\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\helper.ts",["1387"],"const helper = {\r\n    isEmpty: (val: any) => {\r\n        if (typeof val === 'object' && val !== null) {\r\n            if (Array.isArray(val)) {\r\n                return val.length === 0 ? true : false;\r\n            } else {\r\n                return Object.keys(val).length === 0 ? true : false;\r\n            }\r\n        }\r\n        if (val == null) return true;\r\n        else if (val.toString().trim().length == 0) return true;\r\n        else return false;\r\n    },\r\n    SVGToJPEG: (svgData, renderWidth, renderHeight) => {\r\n        const id = 'test';\r\n        const canvas = document.createElement('canvas')\r\n        canvas.setAttribute('id', id)\r\n        canvas.setAttribute('style', 'display: none');\r\n        document.body.appendChild(canvas);\r\n\r\n        canvas.width = renderWidth;\r\n        canvas.height = renderHeight;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        if (!ctx) {\r\n            throw new Error('no canvas 2d context')\r\n        }\r\n\r\n        const img = document.createElement('img');\r\n        img.setAttribute('src', svgData);\r\n\r\n        return new Promise((res) => {\r\n            img.onload = function load() {\r\n                ctx.drawImage(img, 0, 0);\r\n                const url = canvas.toDataURL('image/jpeg', 1.0);\r\n                const el = document.getElementById(id);\r\n                if (el) el.remove();\r\n\r\n                res(url)\r\n            };\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default helper;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\DialogSavePlan.tsx",["1388","1389","1390","1391","1392","1393","1394","1395","1396","1397"],"import { Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, InputLabel, LinearProgress, ListItem, MenuItem, Select, Stack, TextField } from '@mui/material';\r\nimport React,{useEffect, useState} from 'react';\r\nimport {useParams,useHistory} from 'react-router-dom';\r\nimport { CSP_TYPE } from '../../../../const';\r\nimport billingConfigurator from '../../../../services/billingConfigurator';\r\n\r\nconst DialogSavePlan = (props:any)=>{\r\n    const history = useHistory();\r\n    const {data} = props;\r\n\r\n    const [Title,setTitle] = useState<string>('');\r\n    /*const [CspType,setCspType] = useState<string>(CSP_TYPE.AWS);\r\n    const [CspID,setCspID] = useState<string>('');\r\n    const [Domain,setDomain] = useState<string>('');\r\n    const [CustomerPrimaryEmail,setCustomerPrimaryEmail] = useState<string>('');\r\n    */\r\n    const [loading,setloading] = useState<boolean>(false);\r\n\r\n    const handlerChangeTitle = (e:any)=>setTitle(e.target.value);\r\n    //const handlerChangeCspID = (e:any)=>setCspID(e.target.value);\r\n    //const handlerChangeCspType = (e:any)=>setCspType(e.target.value);\r\n    //const handlerChangeDomain = (e:any)=>setDomain(e.target.value);\r\n    //const handlerChangeCustomerPrimaryEmail = (e:any)=>setCustomerPrimaryEmail(e.target.value);\r\n    \r\n    const handlerOnClick = async()=>{\r\n        setloading(true);\r\n        let res:any = await billingConfigurator.savePlan({\r\n                ...data,\r\n                Title,/*CspType,CspID,CustomerPrimaryEmail,Domain*/\r\n            });\r\n        if(res.success){\r\n            window.snakAlert.success(res.data);\r\n            history.push('/billing/configurator/plans');\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        setloading(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(data){\r\n            if(data.plan){\r\n                setTitle(data.plan.Title);\r\n                /*if(data.plan.SfdcAccountCspType)\r\n                    setCspType(data.plan.SfdcAccountCspType);\r\n\r\n                setCspID(data.plan.SfdcAccountCspID);\r\n                setDomain(data.plan.SfdcDomain?data.plan.SfdcDomain:data.account.Domain);\r\n                setCustomerPrimaryEmail(data.plan.SfdcContactEmail);\r\n                */\r\n            }\r\n        }\r\n    },[data])\r\n\r\n    return (\r\n        <>     \r\n            <br/>\r\n            <Grid container spacing={3}>\r\n                <Grid item md={12}>\r\n                    <TextField fullWidth label=\"Billing Plan Title\" size=\"small\"\r\n                        value={Title}\r\n                        onChange={handlerChangeTitle}\r\n                    ></TextField>\r\n                </Grid>\r\n                \r\n                <Grid item md={12}>\r\n                    <Stack justifyContent=\"right\" direction=\"row\">\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={handlerOnClick}>Save Billing Plan</Button>\r\n                    </Stack>\r\n                </Grid>\r\n            </Grid>\r\n            {loading && <LinearProgress/>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DialogSavePlan;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\BillingSpliter.tsx",["1398"],"import { Button, Divider, Grid, Stack, TextField } from '@mui/material';\r\nimport React, { useCallback, useState } from 'react';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Switch from '@mui/material/Switch';\r\nimport Slider from '@mui/material/Slider';\r\nimport { CSP_TYPE } from '../../../../const';\r\nimport CSPImage from '../../../../components/CSPImage';\r\n\r\nfunction BillingSpliter(props) {\r\n    const {data} = props;\r\n\r\n    let initState:any = [];\r\n    if(CSP_TYPE){\r\n        Object.keys(CSP_TYPE).forEach((k)=>{\r\n            //if(k != 'OCI'){\r\n                let selectedCSP:any;\r\n                if(data && data.length > 0){\r\n                    selectedCSP = data.filter((csp:any)=>csp.name === k);\r\n                    if(selectedCSP && selectedCSP.length > 0)\r\n                        selectedCSP = selectedCSP[0];\r\n                    else\r\n                        selectedCSP = null;\r\n                }\r\n                initState.push({\r\n                    name:k,\r\n                    percentage:selectedCSP? parseFloat(selectedCSP.percentage) :0,\r\n                    enabled:selectedCSP?selectedCSP.enabled:false\r\n                })\r\n            //} \r\n        })\r\n    }\r\n    \r\n    const [Data,setData] = useState<any|null>(initState);\r\n    \r\n    const setCspPercentage = useCallback((name,percentage)=>{\r\n        let _data = [...Data];\r\n        for(let csp of _data){\r\n            if(csp.name === name){\r\n                csp.percentage = percentage;\r\n            }\r\n        }\r\n        calculate(_data);\r\n    },[Data])\r\n\r\n    const handlerChangeCSP = (name,checked)=>{\r\n        let _data = [...Data];\r\n        for(let csp of _data){\r\n            if(csp.name === name){\r\n                csp.percentage = 0;\r\n                csp.enabled = checked;\r\n            }\r\n        }\r\n        calculate(_data);\r\n    }\r\n\r\n    // auto-calculate percentage \r\n    const calculate = (data)=>{\r\n        let _data = [...data];\r\n        setData(_data);\r\n    }\r\n\r\n    const getTotal = ()=>{\r\n        return Data.reduce((n,csp)=>{\r\n            n = n + csp.percentage\r\n            return n\r\n        },0)  \r\n    }\r\n\r\n    const handlerSave = ()=>{\r\n        let total = getTotal();\r\n        if(total === 100 || total === 0){\r\n            let enabledCSP:any = Data.filter((csp)=>csp.percentage > 0);\r\n            props.onSave(enabledCSP);\r\n        }else{\r\n            window.snakAlert.error(\"Percentage should be not less or greater then 100%\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <><br/>\r\n        <Grid container spacing={6} sx={{padding:'0 40px 0 0px'}}>\r\n            {Data && Data.map((csp:any)=>(\r\n                <>\r\n                    <Grid item md={2} sx={{textAlign:'right'}}>\r\n                        <CSPImage name={csp.name}/>\r\n                    </Grid>\r\n                    <Grid item md={1}>\r\n                        <FormGroup>\r\n                            <FormControlLabel control={<Switch checked={csp.enabled} color=\"secondary\" onChange={(e:any)=>{handlerChangeCSP(csp.name,e.target.checked)}}  />} label=\"\" />\r\n                        </FormGroup>\r\n                    </Grid>\r\n                    <Grid item md={8}>\r\n                        <Slider\r\n                            aria-label=\"Always visible\"\r\n                            defaultValue={0}\r\n                            value={csp.percentage}\r\n                            disabled={!csp.enabled}\r\n                            step={1}\r\n                            valueLabelDisplay=\"off\"\r\n                            onChange={(e:any)=>{setCspPercentage(csp.name,e.target.value)}}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1}>\r\n                        <div style={{float:\"right\"}}>\r\n                            <strong>{csp.percentage}%</strong>\r\n                        </div>\r\n                    </Grid>\r\n                </>\r\n            ))}\r\n        </Grid>\r\n        <br/>\r\n        <Divider/>\r\n        <div style={{textAlign:\"right\",padding:'10px 40px'}}>\r\n            <strong>{getTotal()}%</strong>\r\n        </div>\r\n        <Divider/>\r\n        <br/>\r\n        \r\n        <Grid container spacing={4}>\r\n            <Grid item md={12}>\r\n                <Stack justifyContent=\"right\" direction=\"row\">\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={handlerSave}>Save</Button>\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BillingSpliter;",["1399","1400"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\GridView.tsx",["1401","1402","1403"],"/**\r\n * *** will add sorting option later\r\n * props\r\n    {\r\n        columns:[{key:'',label:''}]\r\n        rows:[{key:value}],\r\n        actions:[{icon:'',onClick={},className:optional}],\r\n        enable:true,\r\n            totalRecords:1000,\r\n            currentPage:1,\r\n            onChange:(page)=>{\r\n                console.log(page)\r\n            }\r\n        }\r\n */\r\nimport {Icon, IconButton, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow,Pagination, Stack, Tooltip } from \"@mui/material\";\r\nimport React,{useState,useMemo,useEffect} from \"react\";\r\nimport { styled } from '@mui/material/styles';\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n    // hide last border\r\n    '&:last-child td, &:last-child th': {\r\n      border: 0,\r\n    },\r\n  }));\r\n\r\n  \r\nconst GridView = (props:any)=>{\r\n    const {data} = props;\r\n    \r\n    return (\r\n        <>\r\n            {data && \r\n            <>\r\n            <TableContainer component={Paper}>\r\n                <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {data.columns && data.columns.map((col:any,index:number)=>(\r\n                                <TableCell key={index}>{col.label}</TableCell>\r\n                            ))}\r\n                            {data.actions && data.actions.length > 0 && <TableCell></TableCell>}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.rows.map((row:any,index:number) => (\r\n                            <StyledTableRow key={index} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\r\n                            {data.columns && data.columns.map((col:any,colIndex)=>(\r\n                                <TableCell key={`${index}${colIndex}`}>{row[col.key]}</TableCell>\r\n                            ))}\r\n                            \r\n                            {data.actions && data.actions.length > 0 && \r\n                                <TableCell>\r\n                                    {data.actions.map((action:any,index:number)=>(\r\n                                        <Tooltip title={action.title}>\r\n                                            <IconButton size=\"small\" key={index} \r\n                                                onClick={()=>{action.onClick(row)}}>\r\n                                                    <Icon className={action.className?action.className:''} >{action.icon}</Icon>\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    ))}\r\n                                </TableCell>\r\n                            }\r\n                        </StyledTableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n            </TableContainer>\r\n            {data.paging && data.paging.enable && \r\n            <Stack direction=\"row\" justifyContent=\"right\" sx={{paddingTop:'10px'}}>\r\n                <Pagination \r\n                    count={ Math.ceil(data.paging.totalRecords/data.rows.length)  } page={data.paging.currentPage} \r\n                    onChange={(event: React.ChangeEvent<unknown>, page: number)=>{data.paging.onChange(page)}}\r\n                />\r\n            </Stack>\r\n            }\r\n            </>\r\n            }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GridView;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\BillingModelComparison.tsx",["1404","1405","1406","1407"],"import { Divider, Grid, Paper } from '@mui/material';\r\nimport React,{Suspense, useEffect,useState} from 'react';\r\n\r\nimport sampleModels from './assets/sampleModels';\r\n\r\nimport u from '../../../../services/util'\r\nimport AnimatedNumber from 'react-animated-number';\r\nimport { StackBarGraph,GraphSkeleton } from '../../../../components/graphs/billingConfigurator';\r\n\r\nconst BillingModelComparison = (props:any)=>{\r\n    const {planParams} = props;\r\n    const [Dashboard,setDashboard]:any = useState<any|null>({\r\n        Models:[],\r\n        UniqueParams:[]\r\n    });\r\n    \r\n    useEffect(()=>{\r\n        let uniqParams = new Set();\r\n        // map usage and cal total\r\n        sampleModels.forEach((bModel:any)=>{\r\n            let total:number = 0;\r\n            bModel.params.forEach((p:any)=>{\r\n                let cBP = planParams.filter((cP:any)=>{\r\n                    return cP.name === p.name;\r\n                })\r\n                if(cBP.length > 0){\r\n                    p.usage = cBP[0].usage;\r\n                }\r\n                p.total = (parseInt(p.usage)*parseFloat(p.unitPrice)).toFixed(2);\r\n                total = total + parseFloat(p.total);\r\n                uniqParams.add(p.name);\r\n            });\r\n            bModel.total = total.toFixed(2);\r\n        });\r\n        \r\n        setDashboard({\r\n            Models:sampleModels,\r\n            UniqueParams:Array.from(uniqParams)\r\n        });\r\n    },[]);\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Grid container spacing={0}>\r\n                <Grid item md={12}>\r\n                    \r\n                        <StackBarGraph Dashboard={Dashboard}/>\r\n                    \r\n                </Grid>\r\n            </Grid>\r\n            <Divider/><br/>\r\n            \r\n            <Grid container spacing={3} justifyContent=\"center\">\r\n                <Grid item md={12} sx={{textAlign:'center'}}>\r\n                    <strong style={{fontSize:'13px'}}>Monthly Bill</strong>\r\n                </Grid>\r\n                {Dashboard && Dashboard.Models.map((model:any,index:number)=>(\r\n                <Grid item md={2} key={index}>\r\n                    <div className='num-box' style={{backgroundColor:'#b4b4b4',color:'#fff'}}>\r\n                        <strong>{model.title}</strong>\r\n                        <h3 style={{padding:'0'}}><AnimatedNumber value={model.total} duration={800} formatValue={n => u.format.currency(n) }/></h3>\r\n                    </div>\r\n                </Grid>\r\n                ))}\r\n            </Grid>\r\n            \r\n            <Grid container spacing={3} justifyContent=\"center\">\r\n                <Grid item md={12} sx={{textAlign:'center'}}>\r\n                    <strong style={{fontSize:'13px'}}>Yearly Bill</strong>\r\n                </Grid>\r\n                {Dashboard && Dashboard.Models.map((model:any,index:number)=>(\r\n                <Grid item md={2} key={index}>\r\n                    <div className='num-box ' style={{backgroundColor:'#b4b4b4',color:'#fff'}}>\r\n                        <strong>{model.title}</strong>\r\n                        <h3 style={{padding:'0'}}><AnimatedNumber value={model.total*12} duration={800} formatValue={n => u.format.currency(n) }/></h3>\r\n                    </div>\r\n                </Grid>\r\n                ))}\r\n            </Grid>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default BillingModelComparison;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\DialogBillingModelSelector.tsx",["1408","1409","1410","1411","1412","1413","1414"],"import { Button, FormControl, Grid, InputLabel, ListItem, MenuItem, Select, TextField } from '@mui/material';\r\nimport React,{useState} from 'react';\r\nimport sampleModels from './assets/sampleModels';\r\nimport BillingModelSelector from './BillingModelSelector';\r\n\r\nconst DialogBillingModelSelector = (props)=>{\r\n    const {planParams} = props;\r\n    \r\n    const [CurrentModel,setCurrentModel] = useState(sampleModels[0].id);\r\n    \r\n    const handlerOnClick = ()=>{\r\n        let _selectedModel:any = sampleModels.filter((model)=>{\r\n            return model.id == CurrentModel;\r\n        });\r\n        if(_selectedModel){\r\n            // map usage\r\n            _selectedModel[0].params.forEach((p:any)=>{\r\n                p.checked = true;\r\n                let cBP = planParams.filter((cP:any)=>{\r\n                    return cP.name === p.name;\r\n                })\r\n                if(cBP.length > 0){\r\n                    p.usage = cBP[0].usage;\r\n                }\r\n            });\r\n            props.onBillingModelSelect(_selectedModel[0]);\r\n        }  \r\n    }\r\n\r\n    const handlerChangeModel = (val)=> setCurrentModel(val);\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Grid container spacing={3}>\r\n                <Grid item md={9}>\r\n                    <BillingModelSelector onChange={handlerChangeModel} />\r\n                </Grid>\r\n                <Grid item md={3}>\r\n                    <Button variant=\"contained\" color=\"primary\" fullWidth onClick={handlerOnClick} >Select</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DialogBillingModelSelector;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\common.ts",["1415"],"/**\r\n * common search service\r\n * normally use for dropdown search\r\n */\r\nimport client from './client';\r\nimport metronome from './motronome';\r\n\r\nconst map = (records:any,key:string,value:string)=>{\r\n    let data:any = [];\r\n    for(let r of records){\r\n        data.push({\r\n            id:r[key],\r\n            text: r[value],            \r\n        })\r\n    }\r\n    return data;\r\n}\r\n\r\nconst searchAccount = async(term:string)=>{\r\n    let res:any = await client.get('/sfdc/account/search',{term:term});\r\n    if(res.success){\r\n        return map(res.data,\"Id\",\"Name\");\r\n    }\r\n    return null;\r\n}\r\n\r\nconst searchSfdcLiveAccount = async(term:string)=>{\r\n    let res:any = await client.get('/sfdc/live/account/search',{term:term});\r\n    if(res.success){\r\n        return map(res.data,\"Id\",\"Name\");\r\n    }\r\n    return null;\r\n}\r\nconst searchSfdcLiveOpportunity = async(term:string,param:any)=>{\r\n    let res:any = await client.get('/sfdc/live/opportunity/search',{term:term,acid:param.acid});\r\n    if(res.success){\r\n        return map(res.data,\"Id\",\"Name\");\r\n    }\r\n    return null;\r\n}\r\n\r\n// \r\nconst metronomeCustomer = async(term:string)=>{\r\n    \r\n    let res:any = await metronome.getCustomer(term);\r\n    if(res.success){\r\n        return map(res.data,\"id\",\"name\");\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport default {\r\n    searchAccount,searchSfdcLiveAccount,searchSfdcLiveOpportunity,\r\n    metronomeCustomer\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\ParameterSelector.tsx",["1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426","1427","1428","1429","1430","1431","1432","1433","1434","1435","1436","1437","1438","1439"],"import { Button, Checkbox, Divider, FormControlLabel, FormGroup, Grid, Icon, IconButton, List, ListItem, ListItemButton, ListItemIcon, ListItemText, Stack, TextField, Tooltip } from '@mui/material';\r\nimport React,{useState,useEffect,useCallback} from 'react';\r\n\r\nimport u from '../../../../services/util';\r\n\r\nimport gateway from './assets/icons/gateway.png';\r\nimport vpc from './assets/icons/vpc.png';\r\nimport subnet from './assets/icons/subnet.png';\r\nimport s2cConnection from './assets/icons/s2cConnection.png';\r\nimport instance from './assets/icons/instance.png';\r\n//import parameters from './assets/paraameters';\r\nimport groups from './assets/groups';\r\nimport {SECURITY_SERVICES_PARAMS} from '../../../../const';\r\n\r\nconst groupIcon = (icon)=>{\r\n    if(icon == \"gateway\") return gateway;\r\n    else if(icon == \"vpc\") return vpc;\r\n    else if(icon == \"subnet\") return subnet;\r\n    else if(icon == \"s2cConnection\") return s2cConnection;\r\n    else if(icon == \"instance\") return instance;\r\n}\r\n\r\nconst paramDescription = (param:any)=>{  \r\n   return param.usage? `usage: ${param.usage}, unit-price: ${u.format.unitPrice(param.unitPrice)}`: `unit-price: ${u.format.unitPrice(param.unitPrice)}`\r\n}\r\n\r\nconst ParameterSelector = (props:any)=>{\r\n    const {planParams,parameters} = props;\r\n    \r\n    const sortByName = (params)=>{\r\n        params.sort((a:any,b:any)=>{\r\n            return (a.name.toLowerCase() > b.name.toLowerCase())?1:-1;\r\n        });\r\n        return params; \r\n    }\r\n    \r\n    const [Groups,setGroups] = useState<any>(groups); \r\n    const [Parameters,setParameters] = useState<any>(parameters);  // main list\r\n    const [SelectedParameters,setSelectedParameters] = useState<any>([]); // selected list\r\n    \r\n    const [SearchTerm,setSearchTerm] = useState<string>(''); \r\n    \r\n    const [PreferredOnly,setPreferredOnly] = useState<boolean>(false); // check filter\r\n    const [AvailableUsageOnly,setAvailableUsageOnly] = useState<boolean>(false);  // check filter\r\n    \r\n    // move to selected list\r\n    const handlerSelectParameter = (param:any)=>{\r\n        let _params:any = [...SelectedParameters] || [];\r\n        _params.push({...param,checked:true});\r\n        \r\n        // if security added then remove all security sub-params\r\n        if ( _params.filter((p)=>p.name=='security').length > 0){\r\n            //_params = _params.filter((p)=> SECURITY_SERVICES_PARAMS.indexOf(p.name) ==-1 );\r\n            \r\n            for(let sParam of SECURITY_SERVICES_PARAMS){\r\n                let index = _params.findIndex((p)=>p.name == sParam)    \r\n                if(index >=0){\r\n                    _params.splice(index,1);\r\n                }\r\n            }\r\n        }\r\n\r\n        _params = sortByName(_params);\r\n        setSelectedParameters(_params);\r\n        \r\n        // remove from param\r\n        //if(removeFromParamsList){\r\n            /*let filterParams = Parameters.filter((p:any)=>{\r\n                return p.name != param.name;\r\n            });\r\n            console.log(filterParams)*/\r\n            //filterParams = sortByName(filterParams);\r\n            //setParameters(filterParams);\r\n        filterParameter(SearchTerm,_params);\r\n        //}\r\n    }\r\n    // remove from selected list\r\n    const handlerRemoveParameter = (param)=>{\r\n        // remove from selected param list\r\n        let filterParams = SelectedParameters.filter((p:any)=>{\r\n            return p.name != param.name;\r\n        });\r\n        filterParams = sortByName(filterParams);\r\n        setSelectedParameters(filterParams);\r\n\r\n        // add back to parameters list\r\n        //let _params:any = Parameters || [];\r\n        //_params.push(param)\r\n        //_params = sortByName(_params);\r\n        //setParameters(_params);\r\n        filterParameter(SearchTerm,filterParams);\r\n    }\r\n\r\n    const handlerChangeFilterParam = (term:string)=>{\r\n        filterParameter(term);\r\n    }\r\n\r\n    const handlerFilterByGroup = (group:any)=>{\r\n        let _groups = Groups;\r\n        _groups.forEach((g:any)=>{\r\n            if(g.name == group.name){\r\n                g.active = !g.active;\r\n                return;\r\n            }\r\n        });\r\n        setGroups([..._groups]);\r\n    }\r\n\r\n    const handlerOnChangePreferred = (e:any)=>{\r\n        setPreferredOnly(e.target.checked);\r\n    }\r\n    const handlerOnChangeAvailableUsageOnly = (e:any)=>{\r\n        setAvailableUsageOnly(e.target.checked);\r\n    }\r\n    \r\n    // search param in main list\r\n    const filterParameter = (term,selectedParms:null|[])=>{\r\n        // filter by term and active group\r\n        let filterParams = parameters.filter((param:any)=>{\r\n            let reg = new RegExp(term,'ig')\r\n            let rtn = ( param.title.match(reg) || param.name.match(reg) ) && Groups.some(group=> group.active==true && group.name == param.group) ;\r\n            if(PreferredOnly && rtn){\r\n                rtn = param.preferred?param.preferred:false;\r\n            }\r\n            if(AvailableUsageOnly && rtn){\r\n                rtn = param.usage >0;\r\n            }\r\n            return rtn;\r\n        });\r\n\r\n        // remove selected params\r\n        filterParams = filterParams.filter(({name})=>{\r\n            if(selectedParms)\r\n                return !selectedParms.some(sParam=> sParam.name == name );\r\n            else\r\n                return !SelectedParameters.some(sParam=> sParam.name == name );\r\n        });    \r\n         \r\n        setParameters(sortByName(filterParams));\r\n\r\n        setSearchTerm(term);\r\n    }\r\n\r\n    // return group count\r\n    const getGroupParameterCount = (gName:string)=>{\r\n        return parameters.filter((param)=>{\r\n            return param.group == gName;\r\n        }).length;\r\n    }\r\n\r\n    useEffect(() => {\r\n        filterParameter(SearchTerm);\r\n    }, [Groups,PreferredOnly,AvailableUsageOnly])\r\n\r\n    useEffect(() => {\r\n        // merge account current params with params\r\n        let defaultSelectedParams:any = [];\r\n        parameters.forEach((param)=>{\r\n            let cParam = planParams.find(cp=>cp.name == param.name )\r\n            if(cParam){\r\n                param.usage = cParam.usage;\r\n                //param.unitPrice = cParam.unitPrice;\r\n                //param.checked = cParam.checked;\r\n            }\r\n            if(param.checked){\r\n                defaultSelectedParams.push(param);        \r\n            }\r\n        })\r\n        \r\n        setSelectedParameters(sortByName(defaultSelectedParams));\r\n        \r\n        // remove from param\r\n        let filterParams:any = parameters;\r\n        defaultSelectedParams.forEach((sP:any)=>{\r\n            filterParams = filterParams.filter((p:any)=>p.name != sP.name );\r\n        });\r\n        filterParams = sortByName(filterParams);\r\n        setParameters(filterParams);\r\n\r\n        //ilterParameter(SearchTerm);\r\n\r\n    }, [planParams]);\r\n    \r\n    const handlerSave = ()=>{\r\n        props.onClickSaveParam(SelectedParameters);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <div className='param-selector'>\r\n                <Grid container spacing={1}>\r\n                    <Grid item md={8} xs={12}>\r\n                        <div className='groups filter'>\r\n                                {Groups && Groups.map((g:any,index:number)=>(\r\n                                    <>\r\n                                    <div className={`group`} key={index} onClick={()=>{handlerFilterByGroup(g)}}>\r\n                                        <div className={`icon ${g.active?'active':''} ${g.name}`}></div>\r\n                                        <span className='name'>{g.title}</span>\r\n                                        <span className='count'><strong>{getGroupParameterCount(g.name)} params </strong></span>\r\n                                    </div>\r\n                                    </>\r\n                                ))}\r\n                            </div>\r\n                    </Grid>\r\n                    <Grid item md={4} xs={12}>\r\n                        <Stack justifyContent=\"right\" direction=\"row\">\r\n                            <Button color=\"primary\" variant=\"contained\" size=\"small\" onClick={handlerSave}><Icon>library_add_check</Icon> &nbsp; Add Billing Parameters</Button>\r\n                        </Stack>\r\n                    </Grid>\r\n                    <Grid item md={12}>\r\n                        <Divider/>\r\n                            <FormGroup row >\r\n                                <FormControlLabel style={{display:'none'}} control={<Checkbox checked={PreferredOnly} onChange={handlerOnChangePreferred} sx={{ '& .MuiSvgIcon-root': { fontSize: 16 } }} />} label=\"Preferred Parameters\" />\r\n                                <FormControlLabel control={<Checkbox checked={AvailableUsageOnly} onChange={handlerOnChangeAvailableUsageOnly} sx={{ '& .MuiSvgIcon-root': { fontSize: 16 } }} />} label=\"Available Usage Only\" />\r\n                            </FormGroup>    \r\n                        <Divider/>\r\n                    </Grid>\r\n                    <Grid item md={6} sm={6} xs={12}>\r\n                        <h3>\r\n                            Parameters &nbsp;  &nbsp; (Total: {Parameters.length})\r\n                            <input type=\"text\" placeholder='Search by parameter' className='searchParam' onChange={(e:any)=>{handlerChangeFilterParam(e.target.value)}}/>\r\n                        </h3> \r\n                        <div className='list'>\r\n                            <List dense={true}>\r\n                                {Parameters && Parameters.map((param:any,index:number)=>(\r\n                                    <ListItemButton onClick={()=>{handlerSelectParameter(param)}} className='list-item'>\r\n                                        <ListItemIcon><img src={groupIcon(param.group)} style={{width:'30px'}} /> </ListItemIcon>   \r\n                                        <ListItemText\r\n                                            primary={param.title}\r\n                                            secondary={paramDescription(param)}\r\n                                        /> \r\n                                        <Icon className='arrow'>arrow_forward_ios</Icon>\r\n                                        <Tooltip placement=\"top\" title={`Metering terminology: Tunnels across different cloud type or sites`}>\r\n                                            <Icon className='help'>lightbulb_outlined</Icon>\r\n                                        </Tooltip>\r\n                                    </ListItemButton> \r\n                                \r\n                                ))}   \r\n                            </List> \r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item md={6} sm={6} xs={12}>\r\n                        <h3>Selected Parameters</h3>\r\n                        <div className='list'>\r\n                            <List dense={true}>\r\n                                {SelectedParameters && SelectedParameters.map((param:any,index:number)=>(\r\n                                    <ListItemButton key={index} onClick={()=>{handlerRemoveParameter(param)}} className='list-item'>\r\n                                        <ListItemIcon><img src={groupIcon(param.group)} style={{width:'30px'}} /> </ListItemIcon>   \r\n                                        <ListItemText\r\n                                            primary={param.title}\r\n                                            secondary={paramDescription(param)}\r\n                                        /> \r\n                                        <Icon className='arrow'>arrow_back_ios</Icon>\r\n                                        <Tooltip placement=\"top\" title={`Metering terminology: Tunnels across different cloud type or sites`}>\r\n                                            <Icon className='help'>lightbulb_outlined</Icon>\r\n                                        </Tooltip>\r\n                                    </ListItemButton> \r\n                                ))}   \r\n                            </List> \r\n                        </div>\r\n                    </Grid>\r\n                </Grid>            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ParameterSelector;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planList\\DialogJsonFeed.tsx",["1440"],"import { LinearProgress } from '@mui/material';\r\nimport React,{useEffect,useState} from 'react';\r\nimport billingConfigurator from '../../../../services/billingConfigurator';\r\n\r\nimport ReactJson from 'react-json-view'\r\n\r\nconst DialogJsonFeed = (props:any)=>{\r\n    const {id} = props;\r\n\r\n    const [Data,setData] = useState<any|null>(null);\r\n    const [loading,setloading] = useState<boolean>(false);\r\n\r\n    const load = async()=>{\r\n        setloading(true);\r\n        let res:any = await billingConfigurator.loadPlanDetail({id});\r\n        if(res && res.success){\r\n            setData(res.data);\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        setloading(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(id) load();\r\n    },[id])\r\n\r\n\r\n    return (\r\n        <>\r\n            {loading && <LinearProgress className=\"mt-4\"/>}\r\n            <br/>\r\n            {Data && \r\n            <ReactJson src={Data} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DialogJsonFeed;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planList\\PlanDetailDialog.tsx",["1441","1442","1443","1444","1445","1446","1447"],"import React,{useState,lazy,Suspense, useEffect} from 'react';\r\nimport { LinearProgress,FormGroup,FormControlLabel,Switch, Grid, Divider, Button, Stack } from '@mui/material';\r\nimport u from '../../../../services/util';\r\nimport billingConfigurator from '../../../../services/billingConfigurator';\r\nimport { BILLING_PLAN_STATUS } from '../../../../const';\r\nimport helper from '../../../../helper';\r\nimport SearchableDropdown from '../../../../components/SearchableDropdown';\r\n\r\nconst PlanDetailDialog = (props:any)=>{\r\n    const {id} = props;\r\n\r\n    const [Data,setData] = useState<any|null>(null);\r\n    const [loading,setloading] = useState<boolean>(false);\r\n    \r\n    const [Opportunity,setOpportunity] = useState<string|null>(null);\r\n\r\n    const load = async()=>{\r\n        setloading(true);\r\n        let res:any = await billingConfigurator.loadPlanDetail({id});\r\n        if(res && res.success){\r\n            setData(res.data);\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        setloading(false);\r\n    }\r\n\r\n    const handlerSelectOpportunity = (opp:any)=>{\r\n        setOpportunity(opp.id);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(id) load();\r\n    },[id])\r\n\r\n\r\n    const handlerSubmitPlan = async()=>{\r\n        if(!Opportunity){\r\n            window.snakAlert.error('Please select opportunity');\r\n            return;\r\n        }\r\n\r\n        setloading(true);\r\n        if(Data && Data.plan){\r\n            let res:any = await billingConfigurator.submitBillingPlan({id:Data.plan.PlanID,opid:Opportunity});\r\n            if(res && res.success){\r\n                window.snakAlert.success(res.data);\r\n                props.onClose(true)\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }   \r\n        }\r\n        setloading(false);\r\n    }\r\n\r\n    const handlerSyncPlan = async()=>{\r\n        setloading(true);\r\n        if(Data && Data.plan){\r\n            let res:any = await billingConfigurator.syncCustomPlan({id:Data.plan.PlanID});\r\n            if(res && res.success){\r\n                window.snakAlert.success(res.data);\r\n                props.onClose(false)\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }   \r\n        }\r\n        setloading(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loading && <LinearProgress/>}\r\n            {Data && \r\n            <>\r\n            <Grid container spacing={3}>\r\n                <Grid item md={12}>\r\n                    <h3 style={{paddingLeft:'10px',margin:'8px 0 0 0'}}>{Data.plan.Title}</h3>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={1}>\r\n                <Grid item md={12}>\r\n                    <div className='grid-result-list'>\r\n                        <strong>Parameters</strong>\r\n                        <Grid container spacing={0}>\r\n                        {Data.parameters && Object.keys(Data.parameters).map((key:any,index:number)=>(\r\n                            <Grid item md={4}>\r\n                            <div className='field' key={index}>\r\n                                <div className='key' style={{width:'75%'}}>{key}</div>\r\n                                <div className='value' style={{width:'25%'}}>{ u.format.unitPrice(Data.parameters[key]) }</div>\r\n                            </div>\r\n                            </Grid>\r\n                        ))}\r\n                        </Grid>\r\n                    </div>\r\n                    <Divider sx={{marginBottom:'10px'}}/> \r\n                    <Grid container>\r\n                        <Grid item md={6}>\r\n                            {Data.plan.Status !== BILLING_PLAN_STATUS.APPROVED && \r\n                                <SearchableDropdown \r\n                                    label=\"Search Opportunity\" \r\n                                    action=\"searchSfdcLiveOpportunity\" \r\n                                    params={{acid:Data.plan.SfdcAccountID}} \r\n                                    onSelect={(value:any)=> handlerSelectOpportunity(value) } \r\n                                />\r\n                            }\r\n                        </Grid>\r\n                        <Grid item md={6}>\r\n                            <Stack direction=\"row\" justifyContent=\"right\">\r\n                                {Data.plan.Status !== BILLING_PLAN_STATUS.APPROVED && \r\n                                    <Button variant=\"contained\" size=\"medium\" color=\"secondary\" disabled={loading} onClick={handlerSubmitPlan}>\r\n                                        {loading?\"Processing...\":\"Submit to Salesforce\"}\r\n                                    </Button>\r\n                                }\r\n                                {Data.plan.Status === BILLING_PLAN_STATUS.APPROVED && \r\n                                    <Button variant=\"contained\" size=\"medium\" color=\"primary\" disabled={loading} onClick={handlerSyncPlan}>\r\n                                        {loading?\"Processing...\":\"Update Billing Engine\"}\r\n                                    </Button>\r\n                                }\r\n                            </Stack>        \r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            </>\r\n            }\r\n            <br/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlanDetailDialog;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planList\\ListFilter.tsx",["1448","1449"],"import { Button, FormControl, Grid, Icon, InputLabel, MenuItem, Paper, Select, Stack, TextField, Tooltip } from '@mui/material';\r\nimport React,{useState} from 'react';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport DialogAccountSelector from './DialogAccountSelector';\r\n\r\nimport {BILLING_PLAN_STATUS} from '../../../../const';\r\nimport ModalDialog from '../../../../components/ModalDialog';\r\n\r\nconst ListFilter = (props:any)=>{\r\n\r\n    const [Status,setStatus] = useState('')\r\n    const [Term,setTerm] = useState('')\r\n    const[ShowAccountSelector, setShowAccountSelector] = useState<boolean>(false);\r\n\r\n    const handlerChangeStatus = (e:any)=> setStatus(e.target.value);\r\n    const handlerChangeTerm = (e:any)=> setTerm(e.target.value)\r\n\r\n    const handlerClickSearch = ()=>{\r\n        props.onChangeFilter({page:1,status:Status,term:Term});\r\n    }\r\n\r\n    const handlerClickClear = ()=>{\r\n        props.onChangeFilter({status:'',page:1});\r\n        setTerm('');\r\n        setStatus('');\r\n    }\r\n\r\n\r\n    const handlerShowAccountSelector = ()=> setShowAccountSelector(true);\r\n    const handlerOnCloseAccountSelector = ()=> setShowAccountSelector(false);\r\n\r\n    \r\n    return (\r\n        <>\r\n            <Grid container spacing={3} >\r\n                <Grid item md={3} sm={6} xs={12}>\r\n                    <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search by Account / Domain\" value={Term} onChange={handlerChangeTerm} />\r\n                </Grid>\r\n                <Grid item md={2} sm={6} xs={12}>\r\n                    <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                        <InputLabel id=\"labelStatus\">Status</InputLabel>\r\n                        <Select \r\n                            labelId=\"labelStatus\"\r\n                            label=\"Status\"\r\n                            value={Status}\r\n                            onChange={handlerChangeStatus}\r\n                            >\r\n                            <MenuItem value=\"\" key=\"\">All</MenuItem>\r\n                            {Object.keys(BILLING_PLAN_STATUS).length && Object.keys(BILLING_PLAN_STATUS).map((key)=>(\r\n                                <MenuItem value={BILLING_PLAN_STATUS[key]} key={BILLING_PLAN_STATUS[key]}>{BILLING_PLAN_STATUS[key]}</MenuItem>\r\n                            ))} \r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item md={2} sm={6} xs={6}>\r\n                    <Tooltip title=\"Search\">\r\n                        <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={handlerClickSearch}>\r\n                            <Icon>search</Icon>\r\n                        </Button>\r\n                    </Tooltip>\r\n                    &nbsp;\r\n                    <Tooltip title=\"Clear Search\">\r\n                        <Button size=\"large\" variant=\"contained\" onClick={handlerClickClear}>\r\n                            <Icon>settings_backup_restore</Icon>\r\n                        </Button>\r\n                    </Tooltip>\r\n                </Grid> \r\n                <Grid item md={5} sm={6} xs={6}>\r\n                    <Stack direction=\"row\" justifyContent=\"right\" >        \r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={handlerShowAccountSelector}>\r\n                            <Icon>post_add</Icon> &nbsp; New Billing Plan\r\n                        </Button>\r\n                    </Stack>\r\n                </Grid> \r\n            </Grid>\r\n\r\n            <ModalDialog    \r\n                fullScreen={false}   \r\n                maxWidth=\"sm\"\r\n                title={`Create New Billing Plan`}\r\n                component={<DialogAccountSelector onClose={handlerOnCloseAccountSelector}/>}\r\n                open={ShowAccountSelector}\r\n                onClose={handlerOnCloseAccountSelector}\r\n            />\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListFilter;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\MatrixCSP.tsx",["1450","1451","1452","1453","1454","1455","1456","1457","1458","1459","1460","1461","1462","1463","1464","1465"],"import {\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  LinearProgress,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Stack,\r\n  Divider,\r\n  Button,\r\n  Icon,\r\n  Box,\r\n  Tabs,\r\n  Tab,\r\n} from \"@mui/material\";\r\nimport React, { useState, useMemo, useEffect, lazy, Suspense } from \"react\";\r\nimport ModalDialog from \"../../../components/ModalDialog\";\r\nimport billing from \"../../../services/billing\";\r\nimport Comparison from \"./Comparison\";\r\nimport MonthlyComparison from \"./MonthlyComparison\";\r\nimport MatrixOthers from \"./MatrixOthers\";\r\nimport DonutSmallIcon from \"@mui/icons-material/DonutSmall\";\r\n\r\nimport { ACCOUNT_DESCRIPTION } from \"../../../const\";\r\nconst AreaGraphSingleSeries = lazy(\r\n  () => import(\"../../../components/graphs/AreaGraphSingleSeries\")\r\n);\r\n\r\nconst ColumnChart = lazy(\r\n  () => import(\"../../../components/graphs/ColumnChart\")\r\n);\r\nconst AccumulatedPieChart = lazy(\r\n  () => import(\"../../../components/graphs/AccumulatedPieChart\")\r\n);\r\n\r\nconst MatrixCSP = (promps) => {\r\n  const { AccountID, Period, startDate, endDate } = promps;\r\n  const [loading, setloading] = useState<boolean>(false);\r\n  const [Data, setData] = useState<any>(null);\r\n  const [accountList, setAccountList] = useState<any>([]);\r\n  const [value, setValue] = useState<any>(0);\r\n  const [accumulatedData, setAccumulatedData] = useState<boolean>(false);\r\n  const [columnData, setColumnData] = useState<any>({});\r\n  const [pieData, setPieData] = useState<any>({});\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: string) => {\r\n    setValue(newValue);\r\n    if (newValue == \"overall\") setAccumulatedData(true);\r\n    else setAccumulatedData(false);\r\n  };\r\n\r\n  const load = async () => {\r\n    setloading(true);\r\n    let data: any = {};\r\n    let obj = {};\r\n    let pieObj = {};\r\n    let categories: any = [];\r\n\r\n    let series: any = [];\r\n    let count: number = 0;\r\n    let accounts: any = [];\r\n    let resMatrix = await billing.usageMetrixBreakdown({\r\n      id: AccountID,\r\n      period: Period,\r\n      breakdownBy: \"CSP\",\r\n      startDate,\r\n      endDate,\r\n    });\r\n    let resMatrixOther = await billing.usageMetrixOthersBreakdown({\r\n      id: AccountID,\r\n      period: Period,\r\n      breakdownBy: \"CSP\",\r\n      startDate,\r\n      endDate,\r\n    });\r\n    if (resMatrix.success) {\r\n      data = resMatrix.data;\r\n      if (resMatrixOther.success) {\r\n        for (let key in data) {\r\n          data[key].accumulated = {\r\n            ...data[key].accumulated,\r\n            ...resMatrixOther.data[key].accumulated,\r\n          };\r\n          accounts.push(key);\r\n          categories = Object.keys(data[key].accumulated);\r\n        }\r\n\r\n        // SETTING DATA FOR PIECHART AND COLUMN CHART\r\n        for (let key in data) {\r\n          series[count] = { name: key, data: [] };\r\n\r\n          for (let key2 in data[key].accumulated) {\r\n            series[count].data.push(data[key].accumulated[key2].total);\r\n            if (data[key].accumulated[key2].total > 0) {\r\n              if (pieObj[key2] == null) {\r\n                pieObj[key2] = { pieSeries: [] };\r\n              }\r\n              pieObj[key2].pieSeries.push({\r\n                name: key,\r\n                y: data[key].accumulated[key2].total,\r\n              });\r\n            }\r\n          }\r\n          count++;\r\n        }\r\n      }\r\n\r\n      if (Object.keys(data).length > 0) {\r\n        setPieData(pieObj);\r\n        setData(data);\r\n        setAccountList(accounts);\r\n        setValue(accounts[0]);\r\n        setAccumulatedData(false);\r\n        setColumnData({ series: series, categories: categories });\r\n      } else setData(null);\r\n    } else {\r\n      setData(null);\r\n    }\r\n    setloading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (AccountID) load();\r\n    return () => {};\r\n  }, [AccountID, Period, startDate, endDate]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {Data && Object.keys(Data).length ? (\r\n        <>\r\n          <h1>Cloud Platform</h1>\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            textColor=\"primary\"\r\n            indicatorColor=\"primary\"\r\n            aria-label=\"secondary tabs example\"\r\n          >\r\n            {accountList.map((ele, index) => (\r\n              <Tab key={index} value={ele} label={ele} />\r\n            ))}\r\n            <Tab value={\"overall\"} label={\"Accumulated Comparison\"} />\r\n          </Tabs>\r\n\r\n          {!accumulatedData ? (\r\n            <Grid container spacing={2}>\r\n              {Data[value]\r\n                ? Object.keys(Data[value].accumulated).map((key, index) => (\r\n                    <>\r\n                      {Data[value].accumulated[key].total > 0 && (\r\n                        <Grid item md={6} lg={6} xs={12}>\r\n                          <Paper\r\n                            key={index}\r\n                            elevation={1}\r\n                            className=\"section mt-10\"\r\n                          >\r\n                            <Suspense\r\n                              fallback={\r\n                                <Stack justifyContent=\"center\" direction=\"row\">\r\n                                  Loading...\r\n                                </Stack>\r\n                              }\r\n                            >\r\n                              <AreaGraphSingleSeries\r\n                                category={Data[value].accumulated[key].cat}\r\n                                series={Data[value].accumulated[key].series}\r\n                                title={key}\r\n                                description={ACCOUNT_DESCRIPTION}\r\n                              />\r\n                            </Suspense>\r\n                          </Paper>\r\n                        </Grid>\r\n                      )}\r\n                    </>\r\n                  ))\r\n                : \"\"}\r\n              <Divider />\r\n            </Grid>\r\n          ) : (\r\n            <>\r\n              <Grid container spacing={2}>\r\n                {Object.keys(pieData).length > 0 &&\r\n                  Object.keys(pieData).map((ele, index) => (\r\n                    <Grid item md={6} lg={6} xs={12}>\r\n                      <Paper\r\n                        key={index}\r\n                        elevation={1}\r\n                        className=\"section mt-10\"\r\n                      >\r\n                        <Suspense\r\n                          fallback={\r\n                            <Stack justifyContent=\"center\" direction=\"row\">\r\n                              Loading...\r\n                            </Stack>\r\n                          }\r\n                        >\r\n                          <AccumulatedPieChart\r\n                            data={pieData[ele].pieSeries}\r\n                            title={ele}\r\n                            description={ACCOUNT_DESCRIPTION}\r\n                          />\r\n                        </Suspense>\r\n                      </Paper>\r\n                    </Grid>\r\n                  ))}\r\n              </Grid>\r\n              <Grid container spacing={2}>\r\n                <Grid item md={12} lg={12} xs={12}>\r\n                  <Paper elevation={1} className=\"section mt-10\">\r\n                    <Suspense\r\n                      fallback={\r\n                        <Stack justifyContent=\"center\" direction=\"row\">\r\n                          Loading...\r\n                        </Stack>\r\n                      }\r\n                    >\r\n                      <ColumnChart\r\n                        category={columnData.categories}\r\n                        series={columnData.series}\r\n                        title={\"Accumulated Comparison\"}\r\n                        description={ACCOUNT_DESCRIPTION}\r\n                      />\r\n                    </Suspense>\r\n                  </Paper>\r\n                </Grid>\r\n              </Grid>\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            style={{ marginTop: \"100px\" }}\r\n          >\r\n            <strong>No Usage Analytics Found</strong>\r\n          </Stack>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MatrixCSP;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\Summary.tsx",["1466","1467","1468","1469","1470","1471","1472","1473","1474","1475","1476","1477","1478","1479","1480","1481","1482"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\TImeSeries.tsx",["1483","1484","1485","1486","1487","1488","1489","1490","1491","1492","1493","1494","1495","1496","1497","1498","1499"],"import {\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  LinearProgress,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Stack,\r\n  Divider,\r\n  Button,\r\n  Icon,\r\n  Box,\r\n} from \"@mui/material\";\r\nimport React, { useState, useMemo, useEffect, lazy, Suspense } from \"react\";\r\nimport ModalDialog from \"../../../components/ModalDialog\";\r\nimport billing from \"../../../services/billing\";\r\nimport Comparison from \"./Comparison\";\r\nimport MonthlyComparison from \"./MonthlyComparison\";\r\nimport MatrixOthers from \"./MatrixOthers\";\r\nimport DonutSmallIcon from \"@mui/icons-material/DonutSmall\";\r\nimport { ACCOUNT_DESCRIPTION } from \"../../../const\";\r\nimport Highcharts from \"highcharts\";\r\n\r\nconst AreaGraphSingleSeries = lazy(\r\n  () => import(\"../../../components/graphs/AreaGraphSingleSeries\")\r\n);\r\nconst SpiderChart = lazy(\r\n  () => import(\"../../../components/graphs/TimeSeriesChart\")\r\n);\r\n//domain-1mmcorp.com\r\nconst TimeSeries = (promps) => {\r\n\r\n\r\n  const { AccountID, Period, startDate, endDate } = promps;\r\n  const [loading, setloading] = useState<boolean>(false);\r\n  const [DataActual, setDataActual] = useState<any>(null);\r\n  const [DataPredicted, setDataPredicted] = useState<any>(null);\r\n  const load = async () => {\r\n    setloading(true);\r\n    let data: any = {};\r\n    let resMatrix = await billing.prediction({\r\n      id: AccountID,\r\n      period: Period,\r\n      startDate: startDate,\r\n      endDate: endDate,\r\n    });\r\n   \r\n    if (resMatrix.success) {\r\n         data = resMatrix.data;\r\n      if (Object.keys(data).length > 0) {\r\n        setDataActual(data.resActual);\r\n        setDataPredicted(data.resPredicted)\r\n      } else setDataActual(null);\r\n    } else {\r\n      setDataActual(null);\r\n    }\r\n    setloading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (AccountID) load();\r\n    return () => {};\r\n  }, [AccountID, Period, startDate, endDate]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {DataActual && DataPredicted && Object.keys(DataActual).length > 0 && Object.keys(DataPredicted).length > 0? (\r\n        <>\r\n          <Grid container spacing={2}>\r\n                            \r\n                {Object.keys(DataActual).map((key,index)=>(\r\n                    <>\r\n                        \r\n                         {DataActual[key].total>0 && <Grid item md={12} lg={12} xs={12}>\r\n                            <Paper key={index} elevation={1} className=\"section mt-10\">\r\n                                <Suspense fallback={<Stack justifyContent=\"center\" direction=\"row\">Loading...</Stack>}>\r\n                                    <SpiderChart \r\n                                        // category={data[key].categories}\r\n                                        series={[\r\n                                          {\r\n                                            name: `${key} actual Useage`,\r\n                                            data: DataActual[key].data,\r\n                                            color: \"#00a8ce\",\r\n                                            type: \"area\",\r\n                                            fillColor: {\r\n                                              linearGradient: {\r\n                                                x1: 0,\r\n                                                y1: 0,\r\n                                                x2: 0,\r\n                                                y2: 1,\r\n                                              },\r\n                                              stops: [\r\n                                                [0, \"#00a8ce\"],\r\n                                                [1, Highcharts.color(\"#00a8ce\").setOpacity(0).get(\"rgba\")],\r\n                                              ],\r\n                                            },\r\n                                          },\r\n                                          {\r\n                                            name: `${key} Predicted Useage`,\r\n                                            data: DataPredicted[key].data,\r\n                                            color: \"#00bbc4\",\r\n                                            type: \"area\",\r\n                                            fillColor: {\r\n                                              linearGradient: {\r\n                                                x1: 0,\r\n                                                y1: 0,\r\n                                                x2: 0,\r\n                                                y2: 1,\r\n                                              },\r\n                                              stops: [\r\n                                                [0, \"#00bbc4\"],\r\n                                                [1, Highcharts.color(\"#00bbc4\").setOpacity(0).get(\"rgba\")],\r\n                                              ],\r\n                                            },\r\n                                          },\r\n                                        ]}\r\n                                        title={`${key} predicted vs actual usage over time`}\r\n                                    />  \r\n                                </Suspense>\r\n                            </Paper>\r\n                        </Grid>}\r\n                        \r\n                    </>\r\n                ))}\r\n          </Grid>\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TimeSeries;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\MatrixAccountStacked.tsx",["1500","1501","1502","1503","1504","1505","1506","1507","1508","1509","1510","1511","1512","1513","1514","1515","1516"],"import {\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  LinearProgress,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Stack,\r\n  Divider,\r\n  Button,\r\n  Icon,\r\n  Box,\r\n} from \"@mui/material\";\r\nimport React, { useState, useMemo, useEffect, lazy, Suspense } from \"react\";\r\nimport ModalDialog from \"../../../components/ModalDialog\";\r\nimport billing from \"../../../services/billing\";\r\nimport Comparison from \"./Comparison\";\r\nimport MonthlyComparison from \"./MonthlyComparison\";\r\nimport MatrixOthers from \"./MatrixOthers\";\r\nimport DonutSmallIcon from \"@mui/icons-material/DonutSmall\";\r\nimport { ACCOUNT_DESCRIPTION } from \"../../../const\";\r\n\r\nconst AreaStacked = lazy(\r\n  () => import(\"../../../components/graphs/AreaStackedAccount\")\r\n);\r\n\r\nconst MatrixAccountStacked = (promps) => {\r\n  const { AccountID, Period, startDate, endDate } = promps;\r\n  const [loading, setloading] = useState<boolean>(false);\r\n  const [Data, setData] = useState<any>(null);\r\n  const load = async () => {\r\n    setloading(true);\r\n    let data: any = {};\r\n    let series: any = [];\r\n    let len: number = 0;\r\n    let obj = {};\r\n    let resMatrix = await billing.usageMetrixBreakdown({\r\n      id: AccountID,\r\n      period: Period,\r\n      breakdownBy: \"ACCOUNT\",\r\n      startDate,\r\n      endDate,\r\n    });\r\n    let resMatrixOther = await billing.usageMetrixOthersBreakdown({\r\n      id: AccountID,\r\n      period: Period,\r\n      breakdownBy: \"ACCOUNT\",\r\n      startDate,\r\n      endDate,\r\n    });\r\n    let resMatrixAdditional = await billing.usageMetrixAdditionalBreakdown({\r\n      id: AccountID,\r\n      period: Period,\r\n      breakdownBy: \"ACCOUNT\",\r\n      startDate,\r\n      endDate,\r\n    });\r\n    if (resMatrix.success) {\r\n      data = resMatrix.data;\r\n      if (resMatrixOther.success) {\r\n        for (let key in data) {\r\n          data[key].accumulated = {\r\n            ...data[key].accumulated,\r\n            ...resMatrixOther.data[key].accumulated,\r\n          };\r\n        }\r\n        if (\r\n          resMatrixAdditional.success &&\r\n          Object.keys(resMatrixAdditional.data).length > 0\r\n        ) {\r\n          for (let key in data) {\r\n            data[key].accumulated = {\r\n              ...data[key].accumulated,\r\n              ...resMatrixAdditional.data[key].accumulated,\r\n            };\r\n          }\r\n        }\r\n        for (let key in data) {\r\n          for (let key2 in data[key].accumulated) {\r\n            if (obj[key2] == null) {\r\n              obj[key2] = { series: [], cat: data[key].accumulated[key2].cat };\r\n            }\r\n            const sum = data[key].accumulated[key2].series.reduce(\r\n              (partialSum, a) => partialSum + a,\r\n              0\r\n            );\r\n            if (sum > 0) {\r\n              obj[key2].series.push({\r\n                name: key,\r\n                data: data[key].accumulated[key2].series,\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (Object.keys(data).length > 0) setData(obj);\r\n      else setData(null);\r\n    } else {\r\n      setData(null);\r\n    }\r\n    setloading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (AccountID) load();\r\n    return () => {};\r\n  }, [AccountID, Period, startDate, endDate]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {Data && Object.keys(Data).length ? (\r\n        <>\r\n          <Grid container spacing={2}>\r\n            {Object.keys(Data).map((key, index) => (\r\n              <>\r\n                {Data[key].series.length > 0 && (\r\n                  <Grid item md={6} lg={6} xs={12}>\r\n                    <Paper key={index} elevation={1} className=\"section mt-10\">\r\n                      <Suspense\r\n                        fallback={\r\n                          <Stack justifyContent=\"center\" direction=\"row\">\r\n                            Loading...\r\n                          </Stack>\r\n                        }\r\n                      >\r\n                        <AreaStacked\r\n                          series={Data[key].series}\r\n                          category={Data[key].cat}\r\n                          title={key}\r\n                          description={ACCOUNT_DESCRIPTION}\r\n                        />\r\n                      </Suspense>\r\n                    </Paper>\r\n                  </Grid>\r\n                )}\r\n              </>\r\n            ))}\r\n          </Grid>\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MatrixAccountStacked;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\MatrixTags.tsx",["1517","1518","1519","1520","1521","1522","1523","1524","1525","1526","1527","1528","1529","1530","1531","1532","1533"],"import {\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  LinearProgress,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Stack,\r\n  Divider,\r\n  Button,\r\n  Icon,\r\n  Box,\r\n  Tabs,\r\n  Tab,\r\n} from \"@mui/material\";\r\nimport React, { useState, useMemo, useEffect, lazy, Suspense } from \"react\";\r\nimport ModalDialog from \"../../../components/ModalDialog\";\r\nimport billing from \"../../../services/billing\";\r\nimport tagService from \"../../../services/tags\";\r\nimport Comparison from \"./Comparison\";\r\nimport MonthlyComparison from \"./MonthlyComparison\";\r\nimport MatrixOthers from \"./MatrixOthers\";\r\nimport DonutSmallIcon from \"@mui/icons-material/DonutSmall\";\r\n\r\nimport { ACCOUNT_DESCRIPTION } from \"../../../const\";\r\nconst AreaGraphSingleSeries = lazy(\r\n  () => import(\"../../../components/graphs/AreaGraphSingleSeries\")\r\n);\r\n\r\n// const tags = [\"Finance\", \"IT\", \"Operations\",\"Product\",\"Marketing\",\"App1\",\"App2\",\"App3\",\"App4\",\"App5\",\"App6\",\"App7\",\"App8\"]\r\nconst MatrixTags = (promps) => {\r\n  const { AccountID, Period, startDate, endDate } = promps;\r\n  const [loading, setloading] = useState<boolean>(false);\r\n  const [Data, setData] = useState<any>(null);\r\n  const [accountList, setAccountList] = useState<any>([]);\r\n  const [accountTags, setAccountTags] = useState<any>({});\r\n  const [value, setValue] = useState<any>();\r\n  const [tags, setTag] = useState<any>({});\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: string) => {\r\n    setValue(newValue);\r\n  };\r\n  const loadTags = async (data, accounts) => {\r\n    let taggedAccounts = {};\r\n    const res = await tagService.getTagsbyAccoutIDs({ ids: Object.keys(data) });\r\n    if (res.success && res.data.length > 0) {\r\n      for (let row of res.data) {\r\n        if (row.TagName != \"\") {\r\n          taggedAccounts[row.AccountID] = row.TagName;\r\n        } else {\r\n          taggedAccounts[row.AccountID] = row.AccountID;\r\n        }\r\n      }\r\n    } else {\r\n      for (let acc of accounts) {\r\n        taggedAccounts[acc] = acc;\r\n      }\r\n    }\r\n    setAccountTags(taggedAccounts);\r\n  };\r\n  const load = async () => {\r\n    setloading(true);\r\n    let data: any = {};\r\n    let accounts: any = [];\r\n\r\n    let resMatrix = await billing.usageMetrixBreakdown({\r\n      id: AccountID,\r\n      period: Period,\r\n      breakdownBy: \"ACCOUNT\",\r\n      startDate,\r\n      endDate,\r\n    });\r\n    let resMatrixOther = await billing.usageMetrixOthersBreakdown({\r\n      id: AccountID,\r\n      period: Period,\r\n      breakdownBy: \"ACCOUNT\",\r\n      startDate,\r\n      endDate,\r\n    });\r\n    let resMatrixAdditional = await billing.usageMetrixAdditionalBreakdown({\r\n      id: AccountID,\r\n      period: Period,\r\n      breakdownBy: \"ACCOUNT\",\r\n      startDate,\r\n      endDate,\r\n    });\r\n    if (resMatrix.success) {\r\n      data = resMatrix.data;\r\n      if (resMatrixOther.success) {\r\n        for (let key in data) {\r\n          data[key].accumulated = {\r\n            ...data[key].accumulated,\r\n            ...resMatrixOther.data[key].accumulated,\r\n          };\r\n          accounts.push(key);\r\n        }\r\n      }\r\n      if (\r\n        resMatrixAdditional.success &&\r\n        Object.keys(resMatrixAdditional.data).length > 0\r\n      ) {\r\n        for (let key in data) {\r\n          data[key].accumulated = {\r\n            ...data[key].accumulated,\r\n            ...resMatrixAdditional.data[key].accumulated,\r\n          };\r\n          // accounts.push(key)\r\n        }\r\n      }\r\n      if (Object.keys(data).length > 0) {\r\n        setData(data);\r\n        setAccountList(accounts);\r\n        loadTags(data, accounts);\r\n        setValue(accounts[0]);\r\n      } else setData(null);\r\n    } else {\r\n      setData(null);\r\n    }\r\n    setloading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (AccountID) load();\r\n    return () => {};\r\n  }, [AccountID, Period, startDate, endDate]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {Data && Object.keys(Data).length ? (\r\n        <>\r\n          <h1>Tags</h1>\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            textColor=\"primary\"\r\n            indicatorColor=\"primary\"\r\n            aria-label=\"secondary tabs example\"\r\n          >\r\n            {accountList.map((ele, index) => (\r\n              <Tab key={index} value={ele} label={accountTags[ele]} />\r\n            ))}\r\n          </Tabs>\r\n\r\n          <Grid container spacing={2}>\r\n            {Data[value]\r\n              ? Object.keys(Data[value].accumulated).map((key, index) => (\r\n                  <>\r\n                    {Data[value].accumulated[key].total > 0 && (\r\n                      <Grid item md={6} lg={6} xs={12}>\r\n                        <Paper\r\n                          key={index}\r\n                          elevation={1}\r\n                          className=\"section mt-10\"\r\n                        >\r\n                          <Suspense\r\n                            fallback={\r\n                              <Stack justifyContent=\"center\" direction=\"row\">\r\n                                Loading...\r\n                              </Stack>\r\n                            }\r\n                          >\r\n                            <AreaGraphSingleSeries\r\n                              category={Data[value].accumulated[key].cat}\r\n                              series={Data[value].accumulated[key].series}\r\n                              title={key}\r\n                              description={ACCOUNT_DESCRIPTION}\r\n                            />\r\n                          </Suspense>\r\n                        </Paper>\r\n                      </Grid>\r\n                    )}\r\n                  </>\r\n                ))\r\n              : \"\"}\r\n            <Divider />\r\n          </Grid>\r\n        </>\r\n      ) : (\r\n        <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            style={{ marginTop: \"100px\" }}\r\n          >\r\n            <strong>No Usage Analytics Found</strong>\r\n          </Stack>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MatrixTags;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\Spider.tsx",["1534","1535","1536","1537","1538","1539","1540","1541","1542","1543","1544","1545","1546","1547","1548","1549"],"import {\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  LinearProgress,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Stack,\r\n  Divider,\r\n  Button,\r\n  Icon,\r\n  Box,\r\n  Typography,\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n} from \"@mui/material\";\r\nimport React, { useState, useMemo, useEffect, lazy, Suspense } from \"react\";\r\nimport ModalDialog from \"../../../components/ModalDialog\";\r\nimport billing from \"../../../services/billing\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\r\nimport img1 from \"../../../assets/images/icon-check.jpg\";\r\nimport img2 from \"../../../assets/images/icon-cross.jpg\";\r\n\r\nconst AreaGraphSingleSeries = lazy(\r\n  () => import(\"../../../components/graphs/AreaGraphSingleSeries\")\r\n);\r\nconst SpiderChart = lazy(\r\n  () => import(\"../../../components/graphs/SpiderChart\")\r\n);\r\n\r\nconst Spider = (promps) => {\r\n  const data = {\r\n    security: {\r\n      values: {\r\n        fqdn_gw: 12,\r\n        inter_tunnels: 8,\r\n        intra_tunnels: 7,\r\n        VPN_User_Count: 11,\r\n        firenet_firewall_inst: 0,\r\n        firenet_vpc: 0,\r\n        tgw_attachments: 0,\r\n        psf_guard_gw: 11,\r\n      },\r\n      percentage: Math.ceil((5 / 8) * 100),\r\n    },\r\n    networkOptimization: {\r\n      values: {\r\n        fqdn_gw: 12,\r\n        inter_tunnels: 8,\r\n        intra_tunnels: 7,\r\n        VPN_User_Count: 11,\r\n        nat_gw: 12,\r\n        tgw_attachments: 0,\r\n        transit_gw: 6,\r\n      },\r\n      percentage: Math.ceil((6 / 7) * 100),\r\n    },\r\n    regularityCompliance: {\r\n      values: {\r\n        fqdn_gw: 12,\r\n        inter_tunnels: 8,\r\n        intra_tunnels: 7,\r\n        VPN_User_Count: 11,\r\n        firenet_firewall_inst: 0,\r\n        firenet_vpc: 0,\r\n        psf_guard_gw: 11,\r\n      },\r\n      percentage: Math.ceil((5 / 7) * 100),\r\n    },\r\n    networkTrafficVisualization: {\r\n      values: {\r\n        fqdn_gw: 12,\r\n        inter_tunnels: 8,\r\n        intra_tunnels: 7,\r\n        VPN_User_Count: 11,\r\n      },\r\n      percentage: Math.ceil((4 / 4) * 100),\r\n    },\r\n    businessContinuity: {\r\n      values: {\r\n        fqdn_gw: 12,\r\n        inter_tunnels: 8,\r\n        intra_tunnels: 7,\r\n        VPN_User_Count: 11,\r\n        firenet_firewall_inst: 0,\r\n        firenet_vpc: 0,\r\n        tgw_attachments: 0,\r\n        psf_guard_gw: 0,\r\n      },\r\n      percentage: Math.ceil((4 / 8) * 100),\r\n    },\r\n  };\r\n\r\n  //   const  usageFootPrint= {\r\n  //         categories:[\"Security\", \"Network Optimization\",\"Regularity Compliance\",\"Network Traffic Visualization\",\"Business Continuity\"],\r\n  //         series:[{name:'Parameters Reporting Status', data:[data.security.percentage, data.networkOptimization.percentage, data.regularityCompliance.percentage, data.networkTrafficVisualization.percentage, data.businessContinuity.percentage],\r\n  //         pointPlacement: 'on', color:'#00bbc4'}],\r\n  //         title:\"Customer Usage Footprint\"\r\n  //     }\r\n\r\n  const { AccountID, Period, startDate, endDate } = promps;\r\n  const [usageFootPrint, setUsageFootPrint] = useState<any>(null);\r\n  const [loading, setloading] = useState<boolean>(false);\r\n  const [Data, setData] = useState<any>(null);\r\n  const [spiderData, setSpiderData] = useState<any>({});\r\n  const [expanded, setExpanded] = React.useState<string | false>(false);\r\n\r\n  const handleChange = (panel: string) => (event: any, isExpanded: boolean) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n  const handleDataPoint = (panel) => {\r\n    setExpanded((prev) => (prev === panel ? false : panel));\r\n  };\r\n  const load = async () => {\r\n    setloading(true);\r\n    let data: any = {};\r\n    let res = await billing.spider({\r\n      id: AccountID,\r\n      period: Period,\r\n      startDate: startDate,\r\n      endDate: endDate,\r\n    });\r\n    //   let  resMatrixOther = await billing.usageMetrixOthers({id:AccountID,period:Period, startDate:startDate, endDate:endDate});\r\n    if (res.success) {\r\n      data = res.data;\r\n      if (Object.keys(data).length > 0) {\r\n        // SETTING DATA FOR SPIDER CHART\r\n        setUsageFootPrint(data.usageFootPrint);\r\n        setSpiderData(data.spiderData);\r\n      } else setData(null);\r\n    } else {\r\n      setData(null);\r\n    }\r\n    setloading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (AccountID) load();\r\n    return () => {};\r\n  }, [AccountID, Period, startDate, endDate]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {spiderData && Object.keys(spiderData).length ? (\r\n        <>\r\n          <Paper elevation={1}>\r\n            <h2 className=\"section mt-22\">\r\n              {\" \"}\r\n              <Typography\r\n                sx={{ color: \"text.secondary\" }}\r\n                variant=\"h2\"\r\n                fontWeight=\"bold\"\r\n                fontSize=\"large\"\r\n              >\r\n                {usageFootPrint.title}\r\n              </Typography>\r\n            </h2>\r\n            <Divider sx={{ marginBottom: \"8px\" }} />\r\n            <Grid container spacing={2}>\r\n              <Grid item md={8} lg={8} xs={12}>\r\n                <Paper elevation={1}>\r\n                  <Suspense\r\n                    fallback={\r\n                      <Stack justifyContent=\"center\" direction=\"row\">\r\n                        Loading...\r\n                      </Stack>\r\n                    }\r\n                  >\r\n                    <SpiderChart\r\n                      category={usageFootPrint.categories}\r\n                      series={usageFootPrint.series}\r\n                      title={usageFootPrint.title}\r\n                      handlepoint={handleDataPoint}\r\n                    />\r\n                  </Suspense>\r\n                </Paper>\r\n              </Grid>\r\n              <Grid item md={4} lg={4} xs={12}>\r\n                <div>\r\n                  <Accordion\r\n                    expanded={expanded === \"Security\"}\r\n                    onChange={handleChange(\"Security\")}\r\n                  >\r\n                    <AccordionSummary\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                      aria-controls=\"panel1bh-content\"\r\n                      id=\"panel1bh-header\"\r\n                    >\r\n                      <Typography sx={{ width: \"33%\", flexShrink: 0 }}>\r\n                        Security\r\n                      </Typography>\r\n                      <Typography sx={{ color: \"text.secondary\" }}>\r\n                        {\" \"}\r\n                        Security parameter which prevents attack from outside\r\n                        networks\r\n                      </Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                      <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item md={11} lg={11} xs={11}>\r\n                          <LinearProgress\r\n                            color=\"warning\"\r\n                            variant=\"determinate\"\r\n                            value={spiderData.security.percentage}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item md={1} lg={1} xs={1} mt={1}>\r\n                          {spiderData.security.percentage}%\r\n                        </Grid>\r\n                      </Grid>\r\n                      <List>\r\n                        {Object.keys(spiderData.security.values).map(\r\n                          (value) => {\r\n                            const labelId = `checkbox-list-secondary-label-${value}`;\r\n                            return (\r\n                              <>\r\n                                <ListItem key={value}>\r\n                                  <ListItemText id={labelId} primary={value} />\r\n                                  <ListItemIcon>\r\n                                    {spiderData.security.values[value] > 0 ? (\r\n                                      <CheckCircleIcon\r\n                                        color=\"success\"\r\n                                        fontSize=\"large\"\r\n                                      />\r\n                                    ) : (\r\n                                      <CancelIcon\r\n                                        color=\"error\"\r\n                                        fontSize=\"large\"\r\n                                      />\r\n                                    )}\r\n                                  </ListItemIcon>\r\n                                </ListItem>\r\n                                <Divider />\r\n                              </>\r\n                            );\r\n                          }\r\n                        )}\r\n                      </List>\r\n                    </AccordionDetails>\r\n                  </Accordion>\r\n                  <Accordion\r\n                    expanded={expanded === \"Network Optimization\"}\r\n                    onChange={handleChange(\"Network Optimization\")}\r\n                  >\r\n                    <AccordionSummary\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                      aria-controls=\"panel2bh-content\"\r\n                      id=\"panel2bh-header\"\r\n                    >\r\n                      <Typography sx={{ width: \"33%\", flexShrink: 0 }}>\r\n                        Network Optimization\r\n                      </Typography>\r\n                      <Typography sx={{ color: \"text.secondary\" }}>\r\n                        Parameters help in enhancing and monitoring network\r\n                        performance\r\n                      </Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                      <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item md={11} lg={11} xs={11}>\r\n                          <LinearProgress\r\n                            color=\"warning\"\r\n                            variant=\"determinate\"\r\n                            value={spiderData.networkOptimization.percentage}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item md={1} lg={1} xs={1} mt={1}>\r\n                          {spiderData.networkOptimization.percentage}%\r\n                        </Grid>\r\n                      </Grid>\r\n                      <List>\r\n                        {Object.keys(spiderData.networkOptimization.values).map(\r\n                          (value) => {\r\n                            const labelId = `checkbox-list-secondary-label-${value}`;\r\n                            return (\r\n                              <>\r\n                                <ListItem key={value}>\r\n                                  <ListItemText id={labelId} primary={value} />\r\n                                  <ListItemIcon>\r\n                                    {spiderData.networkOptimization.values[\r\n                                      value\r\n                                    ] > 0 ? (\r\n                                      <CheckCircleIcon\r\n                                        color=\"success\"\r\n                                        fontSize=\"large\"\r\n                                      />\r\n                                    ) : (\r\n                                      <CancelIcon\r\n                                        color=\"error\"\r\n                                        fontSize=\"large\"\r\n                                      />\r\n                                    )}\r\n                                  </ListItemIcon>\r\n                                </ListItem>\r\n                                <Divider />\r\n                              </>\r\n                            );\r\n                          }\r\n                        )}\r\n                      </List>\r\n                    </AccordionDetails>\r\n                  </Accordion>\r\n                  <Accordion\r\n                    expanded={expanded === \"Regulatory Compliance\"}\r\n                    onChange={handleChange(\"Regulatory Compliance\")}\r\n                  >\r\n                    <AccordionSummary\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                      aria-controls=\"panel3bh-content\"\r\n                      id=\"panel3bh-header\"\r\n                    >\r\n                      <Typography sx={{ width: \"33%\", flexShrink: 0 }}>\r\n                        Regulatory Compliance\r\n                      </Typography>\r\n                      <Typography sx={{ color: \"text.secondary\" }}>\r\n                        Parameters which help in achieving organization's goal.\r\n                      </Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                      <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item md={11} lg={11} xs={11}>\r\n                          <LinearProgress\r\n                            color=\"warning\"\r\n                            variant=\"determinate\"\r\n                            value={spiderData.regularityCompliance.percentage}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item md={1} lg={1} xs={1} mt={1}>\r\n                          {spiderData.regularityCompliance.percentage}%\r\n                        </Grid>\r\n                      </Grid>\r\n                      <List>\r\n                        {Object.keys(\r\n                          spiderData.regularityCompliance.values\r\n                        ).map((value) => {\r\n                          const labelId = `checkbox-list-secondary-label-${value}`;\r\n                          return (\r\n                            <>\r\n                              <ListItem key={value}>\r\n                                <ListItemText id={labelId} primary={value} />\r\n                                <ListItemIcon>\r\n                                  {spiderData.regularityCompliance.values[\r\n                                    value\r\n                                  ] > 0 ? (\r\n                                    <CheckCircleIcon\r\n                                      color=\"success\"\r\n                                      fontSize=\"large\"\r\n                                    />\r\n                                  ) : (\r\n                                    <CancelIcon\r\n                                      color=\"error\"\r\n                                      fontSize=\"large\"\r\n                                    />\r\n                                  )}\r\n                                </ListItemIcon>\r\n                              </ListItem>\r\n                              <Divider />\r\n                            </>\r\n                          );\r\n                        })}\r\n                      </List>\r\n                    </AccordionDetails>\r\n                  </Accordion>\r\n                  <Accordion\r\n                    expanded={expanded === \"Business Continuity\"}\r\n                    onChange={handleChange(\"Business Continuity\")}\r\n                  >\r\n                    <AccordionSummary\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                      aria-controls=\"panel3bh-content\"\r\n                      id=\"panel3bh-header\"\r\n                    >\r\n                      <Typography sx={{ width: \"33%\", flexShrink: 0 }}>\r\n                        Business Continuity\r\n                      </Typography>\r\n                      <Typography sx={{ color: \"text.secondary\" }}>\r\n                        Business continuity parameters ensure mission-critical\r\n                        operations proceed during a disruption.\r\n                      </Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                      <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item md={11} lg={11} xs={11}>\r\n                          <LinearProgress\r\n                            color=\"warning\"\r\n                            variant=\"determinate\"\r\n                            value={spiderData.businessContinuity.percentage}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item md={1} lg={1} xs={1} mt={1}>\r\n                          {spiderData.businessContinuity.percentage}%\r\n                        </Grid>\r\n                      </Grid>\r\n                      <List>\r\n                        {Object.keys(spiderData.businessContinuity.values).map(\r\n                          (value) => {\r\n                            const labelId = `checkbox-list-secondary-label-${value}`;\r\n                            return (\r\n                              <>\r\n                                <ListItem key={value}>\r\n                                  <ListItemText id={labelId} primary={value} />\r\n                                  <ListItemIcon>\r\n                                    {spiderData.businessContinuity.values[\r\n                                      value\r\n                                    ] > 0 ? (\r\n                                      <CheckCircleIcon\r\n                                        color=\"success\"\r\n                                        fontSize=\"large\"\r\n                                      />\r\n                                    ) : (\r\n                                      <CancelIcon\r\n                                        color=\"error\"\r\n                                        fontSize=\"large\"\r\n                                      />\r\n                                    )}\r\n                                  </ListItemIcon>\r\n                                </ListItem>\r\n                                <Divider />\r\n                              </>\r\n                            );\r\n                          }\r\n                        )}\r\n                      </List>\r\n                    </AccordionDetails>\r\n                  </Accordion>\r\n                  <Accordion\r\n                    expanded={expanded === \"Network Traffic Visualization\"}\r\n                    onChange={handleChange(\"Network Traffic Visualization\")}\r\n                  >\r\n                    <AccordionSummary\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                      aria-controls=\"panel3bh-content\"\r\n                      id=\"panel3bh-header\"\r\n                    >\r\n                      <Typography sx={{ width: \"33%\", flexShrink: 0 }}>\r\n                        Network Traffic Visualization\r\n                      </Typography>\r\n                      <Typography sx={{ color: \"text.secondary\" }}>\r\n                        Network Traffic Visualization parameters help to\r\n                        visualize traffic patterns to and from your VMs.\r\n                      </Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                      <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item md={11} lg={11} xs={11}>\r\n                          <LinearProgress\r\n                            color=\"warning\"\r\n                            variant=\"determinate\"\r\n                            value={\r\n                              spiderData.networkTrafficVisualization.percentage\r\n                            }\r\n                          />\r\n                        </Grid>\r\n                        <Grid item md={1} lg={1} xs={1} mt={1}>\r\n                          {spiderData.networkTrafficVisualization.percentage}%\r\n                        </Grid>\r\n                      </Grid>\r\n                      <List>\r\n                        {Object.keys(\r\n                          spiderData.networkTrafficVisualization.values\r\n                        ).map((value) => {\r\n                          const labelId = `checkbox-list-secondary-label-${value}`;\r\n                          return (\r\n                            <>\r\n                              <ListItem key={value}>\r\n                                <ListItemText id={labelId} primary={value} />\r\n                                <ListItemIcon>\r\n                                  {spiderData.security.values[value] > 0 ? (\r\n                                    <CheckCircleIcon\r\n                                      color=\"success\"\r\n                                      fontSize=\"large\"\r\n                                    />\r\n                                  ) : (\r\n                                    <CancelIcon\r\n                                      color=\"error\"\r\n                                      fontSize=\"large\"\r\n                                    />\r\n                                  )}\r\n                                </ListItemIcon>\r\n                              </ListItem>\r\n                              <Divider />\r\n                            </>\r\n                          );\r\n                        })}\r\n                      </List>\r\n                    </AccordionDetails>\r\n                  </Accordion>\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </>\r\n      ) : (\r\n        <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            style={{ marginTop: \"100px\" }}\r\n          >\r\n            <strong>No Usage Analytics Found</strong>\r\n          </Stack>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Spider;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\admin\\index.ts",["1550"],"/**\r\n * Salesforce Service\r\n */\r\n\r\nimport users from './users'\r\n\r\n\r\n\r\nexport default {\r\n    users\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\order_optional.ts",["1551"],"\r\nimport client from '../client';\r\n\r\nconst listing = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/orderoptional/list\",params);\r\n    return res;\r\n}\r\nconst remove = async(params)=>{\r\n    let res:any = await client.delete(\"/supplierportal/orderoptional/remove\",params);\r\n    return res;\r\n}\r\n\r\nconst update = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/orderoptional/update\",params);\r\n    return res;\r\n}\r\n\r\nconst create = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/orderoptional/create\",params);\r\n    return res;\r\n}\r\n\r\nconst get = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/orderoptional/get\",params);\r\n    return res;\r\n}\r\nexport default {\r\n    listing,remove,update,create,get\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\motronome.ts",["1552"],"import client from './client';\r\n\r\nconst getCustomer = async(params)=>{\r\n    let res:any = await client.get('/metronome/customer/search',{});\r\n    if(res.success){\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\n\r\nconst getMetrix = async(params)=>{\r\n     \r\n    let res:any = await client.post('/metronome/metrix',params);\r\n    if(res.success){\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\n\r\n\r\n\r\n\r\nexport default {\r\n    getCustomer,getMetrix\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\billingConfigurator\\index.tsx",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\order_appliance.ts",["1553"],"\r\nimport client from '../client';\r\n\r\nconst listing = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/orderappliance/list\",params);\r\n    return res;\r\n}\r\nconst remove = async(params)=>{\r\n    let res:any = await client.delete(\"/supplierportal/orderappliance/remove\",params);\r\n    return res;\r\n}\r\n\r\nconst update = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/orderappliance/update\",params);\r\n    return res;\r\n}\r\n\r\nconst create = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/orderappliance/create\",params);\r\n    return res;\r\n}\r\n\r\nconst get = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/orderappliance/get\",params);\r\n    return res;\r\n}\r\nexport default {\r\n    listing,remove,update,create,get\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\order_shipping.ts",["1554"],"\r\nimport client from '../client';\r\n\r\nconst listing = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/ordershipping/list\",params);\r\n    return res;\r\n}\r\nconst remove = async(params)=>{\r\n    let res:any = await client.delete(\"/supplierportal/ordershipping/remove\",params);\r\n    return res;\r\n}\r\n\r\nconst update = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/ordershipping/update\",params);\r\n    return res;\r\n}\r\n\r\nconst create = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/ordershipping/create\",params);\r\n    return res;\r\n}\r\n\r\nconst get = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/ordershipping/get\",params);\r\n    return res;\r\n}\r\nexport default {\r\n    listing,remove,update,create,get\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planCreator\\BillingModelSelector.tsx",["1555","1556","1557","1558","1559","1560","1561"],"import { Button, FormControl, Grid, InputLabel, ListItem, MenuItem, Select, TextField } from '@mui/material';\r\nimport React,{useEffect, useState} from 'react';\r\nimport sampleModels from './assets/sampleModels';\r\n\r\nconst BillingModelSelector = (props:any)=>{\r\n    const [Value,setValue] = useState(sampleModels[0].id);\r\n\r\n    const handlerChangeModel = (e:any)=> {\r\n        setValue(e.target.value);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(Value){\r\n            props.onChange(Value);\r\n        }\r\n    },[Value])\r\n\r\n\r\n    return (\r\n        <>\r\n            <TextField select fullWidth className=\"cbo\" label=\"Billing Model\" size=\"small\"\r\n                onChange={handlerChangeModel}\r\n                value={Value}\r\n                >\r\n                {sampleModels && sampleModels.map((row:any,index:number)=>(\r\n                    <MenuItem key={row.id} value={row.id}>{row.name}</MenuItem>    \r\n                ))}\r\n            </TextField>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BillingModelSelector;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\vendors.ts",["1562"],"\r\nimport client from '../client';\r\n\r\nconst listing = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/vendors/list\",params);\r\n    return res;\r\n}\r\n\r\nconst listSearch = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/vendors/list-search\",params);\r\n    return res;\r\n}\r\n\r\nconst listVendorUser = async (params) => {\r\n    let res:any = await client.get(\"/supplierportal/vendors/list-user-vendor\",params);\r\n    return res;\r\n}\r\n\r\nconst remove = async(params)=>{\r\n    let res:any = await client.delete(\"/supplierportal/vendors/remove\",params);\r\n    return res;\r\n}\r\n\r\nconst update = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/vendors/update\",params);\r\n    return res;\r\n}\r\n\r\nconst create = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/vendors/create\",params);\r\n    return res;\r\n}\r\n\r\nconst get = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/vendors/get\",params);\r\n    return res;\r\n}\r\n\r\nconst getCurrentVendor = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/vendors/get-user-vendor\",params);\r\n    return res;\r\n}\r\nconst activate = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/vendors/activate\",params);\r\n    return res;\r\n}\r\nexport default {\r\n    listing,remove,update,create,get, listSearch, listVendorUser, getCurrentVendor,activate\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supplierportal\\products.ts",["1563"],"\r\nimport client from '../client';\r\n\r\nconst listing = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/products/list\",params);\r\n    return res;\r\n}\r\n\r\nconst vendorProductlisting = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/products/vendor-list\",params);\r\n    return res;\r\n}\r\nconst remove = async(params)=>{\r\n    let res:any = await client.delete(\"/supplierportal/products/remove\",params);\r\n    return res;\r\n}\r\n\r\nconst removeVendorProduct = async(params)=>{\r\n    let res:any = await client.delete(\"/supplierportal/products/vendor-remove\",params);\r\n    return res;\r\n}\r\n\r\nconst update = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/products/update\",params);\r\n    return res;\r\n}\r\n\r\nconst updateVendorProduct = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/products/vendor-update\",params);\r\n    return res;\r\n}\r\n\r\nconst createVendorProduct = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/products/vendor-create\",params);\r\n    return res;\r\n}\r\n\r\nconst create = async(params)=>{\r\n    let res:any = await client.post(\"/supplierportal/products/create\",params);\r\n    return res;\r\n}\r\n\r\nconst get = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/products/get\",params);\r\n    return res;\r\n}\r\nconst getVendorProduct = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/products/vendor-get\",params);\r\n    return res;\r\n}\r\n\r\nconst getVendorUser = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/products/vendoruser-get\",params);\r\n    return res;\r\n}\r\n\r\nconst getVendorByProductId = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/products/vendor-get-id\",params);\r\n    return res;\r\n}\r\n\r\nconst listProductsByVendorId = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/products/list-products\",params);\r\n    return res;\r\n}\r\n\r\nconst listProductsSearch = async(params)=>{\r\n    let res:any = await client.get(\"/supplierportal/products/list-products-search\",params);\r\n    return res;\r\n}\r\nexport default {\r\n    listing,remove,update,create,get, vendorProductlisting, createVendorProduct, removeVendorProduct, updateVendorProduct, getVendorProduct, getVendorByProductId, listProductsByVendorId, listProductsSearch,getVendorUser\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\AccumulatedPieChart.tsx",["1564","1565","1566","1567","1568","1569","1570","1571","1572"],"import React, { useEffect, useState } from \"react\";\r\nimport { LinearProgress, Paper } from \"@mui/material\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { COLOR_SERIES } from \"../../const\";\r\n\r\nconst AccumulatedPieChart = (props: any) => {\r\n  const { data, title, description } = props;\r\n  let subTitle = description && description[title] ? description[title] : \"\";\r\n\r\n  const options: any = {\r\n    chart: {\r\n      plotBackgroundColor: null,\r\n      plotBorderWidth: null,\r\n      plotShadow: false,\r\n      type: \"pie\",\r\n    },\r\n    title: {\r\n      text: title,\r\n    },\r\n    subtitle: {\r\n      text: subTitle,\r\n    },\r\n    colors: COLOR_SERIES,\r\n    tooltip: {\r\n      pointFormat:\r\n        \"{series.name}: <b>{point.percentage:.1f}% </b>\" +\r\n        \"<br><b>value: {point.y}</b>\",\r\n    },\r\n    accessibility: {\r\n      point: {\r\n        valueSuffix: \"%\",\r\n      },\r\n    },\r\n    plotOptions: {\r\n      pie: {\r\n        allowPointSelect: true,\r\n        cursor: \"pointer\",\r\n        dataLabels: {\r\n          enabled: true,\r\n          format: \"<b>{point.name}</b>: {point.percentage:.1f} %\",\r\n        },\r\n      },\r\n    },\r\n\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    showInLegend: false,\r\n    series: [\r\n      {\r\n        name: title,\r\n        colorByPoint: true,\r\n        data: data,\r\n      },\r\n    ],\r\n  };\r\n  const [option, setOption] = useState<any>(options);\r\n  const [loading, setloading] = useState(true);\r\n  const [total, setTotal] = useState<any>(null);\r\n  const [total1, setTotal1] = useState<any>(null);\r\n  const [total2, seTotal2] = useState<any>(null);\r\n  const [ShowGraph, setShowGraph] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // let series = option.series\r\n    // if (data != undefined){\r\n    //     for(let i=0;i<data.length;i++){\r\n    //         series[0].data.push({name:category[i], y:data[i]})\r\n    //     }\r\n    // }\r\n\r\n    // setOption(prevState => ({\r\n    //     ...prevState,\r\n    //     series: series ,\r\n    //   }))\r\n\r\n    setloading(false);\r\n    setShowGraph(true);\r\n    return () => {};\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {!loading && ShowGraph && (\r\n        <HighchartsReact highcharts={Highcharts} options={options} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AccumulatedPieChart;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\configurator\\planList\\DialogAccountSelector.tsx",["1573","1574","1575","1576","1577","1578","1579","1580"],"import React,{useState} from 'react';\r\nimport { Grid, Paper,Stack,Button, Icon, Dialog, DialogTitle, DialogContent, DialogActions, Divider } from '@mui/material';\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\n\r\nimport SearchableDropdown from '../../../../components/SearchableDropdown';\r\nimport {useHistory} from 'react-router-dom';\r\nimport BillingModelSelector from '../planCreator/BillingModelSelector';\r\n\r\nconst DialogAccountSelector = (props:any)=>{\r\n\r\n    const history = useHistory();\r\n\r\n    const [Account,setAccount] = useState<string|null>(null);\r\n    //const [Opportunity,setOpportunity] = useState<string|null>(null);\r\n    const [CreateFromModel,setCreateFromModel] = useState<number>(0);\r\n    const [BillingModel,setBillingModel] = useState<string>(\"\");\r\n\r\n    const handlerSelectAccount = (account:any)=>{\r\n        setAccount(account.id);\r\n    }\r\n\r\n    /*const handlerSelectOpportunity = (opp:any)=>{\r\n        setOpportunity(opp.id);\r\n    }*/\r\n\r\n    const handleChangeCreateFromModel = (e)=> setCreateFromModel(e.target.value) \r\n    const handlerChangeBillingModel = (bModelName)=> setBillingModel(bModelName);\r\n\r\n    const handlerClickNewPlan = ()=>{\r\n        if(!Account){\r\n            window.snakAlert.error(\"Please select account\");\r\n            return;\r\n        }\r\n        /*if(!Opportunity){\r\n            window.snakAlert.error(\"Please select opportunity\");\r\n            return;\r\n        }*/\r\n        \r\n        if(Account){\r\n            history.push(`/billing/configurator/plan/create/${Account}/${CreateFromModel}/${BillingModel}`);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <br/>\r\n            <Grid container spacing={4}>\r\n                <Grid item md={12}>\r\n                    <SearchableDropdown \r\n                        label=\"Search Account\" \r\n                        action=\"searchSfdcLiveAccount\" \r\n                        onSelect={(value:any)=> handlerSelectAccount(value) } \r\n                    />\r\n                </Grid>\r\n                {Account && \r\n                <>\r\n                    <Grid item md={12}>\r\n                        <FormControl>\r\n                            <RadioGroup\r\n                                row\r\n                                aria-labelledby=\"type\"\r\n                                name=\"type\"\r\n                                value={CreateFromModel}\r\n                                onChange={handleChangeCreateFromModel}\r\n                            >   <FormControlLabel value=\"1\" control={<Radio />} label=\"Create From Billing Model\" />\r\n                                <FormControlLabel value=\"0\" control={<Radio />} label=\"Create On Your Own\" />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    {CreateFromModel==1 && \r\n                    <Grid item md={12}>\r\n                        <BillingModelSelector onChange={handlerChangeBillingModel}/>\r\n                    </Grid>\r\n                    }\r\n                    <Grid item md={12}>\r\n                        <Stack justifyContent=\"right\" direction=\"row\">\r\n                            <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={handlerClickNewPlan} autoFocus>Submit</Button>\r\n                        </Stack>\r\n                    </Grid>\r\n                </>\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DialogAccountSelector;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\SummaryTreeMap.tsx",["1581","1582","1583","1584","1585","1586","1587","1588","1589","1590"],"import React, { useEffect, useState } from \"react\";\r\nimport { LinearProgress, Paper } from \"@mui/material\";\r\nimport { COLOR_SERIES } from \"../../const\";\r\n\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport HC_more from \"highcharts/highcharts-more\";\r\n// import Tree from 'highcharts/modules/treemap';\r\n\r\nHC_more(Highcharts);\r\n// Tree(Highcharts);\r\n\r\nconst SummarySpiderChart = (props: any) => {\r\n  const { series } = props;\r\n\r\n  const options: any = {\r\n    chart: {\r\n      type: \"packedbubble\",\r\n      height: \"300\",\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    title: {\r\n      text: \"Usage By Account\",\r\n    },\r\n    tooltip: {\r\n      useHTML: true,\r\n      pointFormat: \"<b>{point.name}:</b> {point.value}\",\r\n    },\r\n    colors: [\"#167c88\", \"#56c8d6\"],\r\n    plotOptions: {\r\n      packedbubble: {\r\n        minSize: \"10%\",\r\n        maxSize: \"50%\",\r\n        zMin: 0,\r\n        zMax: 1000,\r\n        layoutAlgorithm: {\r\n          bubblePadding: 30,\r\n          gravitationalConstant: 0.1,\r\n\r\n          splitSeries: true,\r\n          seriesInteraction: false,\r\n          dragBetweenSeries: true,\r\n          parentNodeLimit: true,\r\n        },\r\n        dataLabels: {\r\n          enabled: true,\r\n          // format: '{point.name.substring(0,12)}',\r\n          formatter() {\r\n            let t: any = this || {};\r\n            return t.point?.name?.substring(0, 12);\r\n          },\r\n          filter: {\r\n            property: \"y\",\r\n            operator: \">\",\r\n            value: 250,\r\n          },\r\n          style: {\r\n            color: \"black\",\r\n            textOutline: \"none\",\r\n            fontWeight: \"normal\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    series: series,\r\n  };\r\n  const [option, setOption] = useState<any>(options);\r\n  const [loading, setloading] = useState(true);\r\n  const [total, setTotal] = useState<any>(null);\r\n  const [total1, setTotal1] = useState<any>(null);\r\n  const [total2, seTotal2] = useState<any>(null);\r\n  const [ShowGraph, setShowGraph] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // let series = option.series\r\n    // if (data != undefined){\r\n    //     for(let i=0;i<data.length;i++){\r\n    //         series[0].data.push(data[i])\r\n    //     }\r\n    // }\r\n\r\n    // setOption(prevState => ({\r\n    //     ...prevState,\r\n    //     series: series ,\r\n    //   }))\r\n\r\n    setloading(false);\r\n    setShowGraph(true);\r\n    return () => {};\r\n  }, [series]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {!loading && ShowGraph && (\r\n        <HighchartsReact highcharts={Highcharts} options={options} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SummarySpiderChart;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\TimeSeriesChart.tsx",["1591","1592","1593","1594","1595","1596","1597","1598","1599","1600"],"import React, { useEffect, useState } from \"react\";\r\nimport { LinearProgress, Paper } from \"@mui/material\";\r\nimport { COLOR_SERIES } from \"../../const\";\r\n\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport HC_more from \"highcharts/highcharts-more\";\r\nHC_more(Highcharts);\r\n\r\nconst TimeSeriesChart = (props: any) => {\r\n  const { series, title } = props;\r\n\r\n  const options: any = {\r\n    chart: {\r\n      zoomType: \"x\",\r\n      height: \"40%\",\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    //   zoneAxis: 'x',\r\n    //   zones: [{\r\n    //       value: Date.UTC(2021, 8),\r\n    //       color: \"#008fcd\"\r\n    //   }, {\r\n    //       value: Date.UTC(2022, 3),\r\n    //       color: \"#00bbc4\"\r\n    //   }],\r\n    title: {\r\n      text: title,\r\n    },\r\n    // subtitle: {\r\n    //     text: document.ontouchstart === undefined ?\r\n    //         'Click and drag in the plot area to zoom in' : 'Pinch the chart to zoom in'\r\n    // },\r\n    xAxis: {\r\n      type: \"datetime\",\r\n      labels: {\r\n        format: \"{value:%Y-%b}\",\r\n      },\r\n    },\r\n    yAxis: {\r\n      title: title,\r\n    },\r\n    // colors: COLOR_SERIES,\r\n    // legend: {\r\n    //     enabled: false\r\n    // },\r\n\r\n    // plotOptions: {\r\n    //     area: {\r\n    //         fillColor: {\r\n    //             linearGradient: {\r\n    //                 x1: 0,\r\n    //                 y1: 0,\r\n    //                 x2: 0,\r\n    //                 y2: 1\r\n    //             },\r\n    //              stops: [\r\n    //                     [0, '#008fcd'],\r\n    //                     [1, Highcharts.color('#008fcd').setOpacity(0).get('rgba')],\r\n    //                 ]\r\n    //         },\r\n\r\n    //     }\r\n    // },\r\n\r\n    series: series,\r\n  };\r\n  const [option, setOption] = useState<any>(options);\r\n  const [loading, setloading] = useState(true);\r\n  const [total, setTotal] = useState<any>(null);\r\n  const [total1, setTotal1] = useState<any>(null);\r\n  const [total2, seTotal2] = useState<any>(null);\r\n  const [ShowGraph, setShowGraph] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n\r\n    // let series = option.series\r\n    // if (data != undefined){\r\n    //     for(let i=0;i<data.length;i++){\r\n    //         series[0].data.push(data[i])\r\n    //     }\r\n    // }\r\n\r\n    // setOption(prevState => ({\r\n    //     ...prevState,\r\n    //     series: series ,\r\n    //   }))\r\n\r\n    setloading(false);\r\n    setShowGraph(true);\r\n    return () => {};\r\n  }, [series]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {!loading && ShowGraph && (\r\n        <HighchartsReact highcharts={Highcharts} options={options} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TimeSeriesChart;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\SummarySpiderChart.tsx",["1601","1602","1603","1604","1605","1606","1607","1608","1609","1610","1611"],"import React, { useEffect, useState } from \"react\";\r\nimport { LinearProgress, Paper } from \"@mui/material\";\r\nimport { COLOR_SERIES } from \"../../const\";\r\n\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport HC_more from \"highcharts/highcharts-more\";\r\nHC_more(Highcharts);\r\n\r\nconst SummarySpiderChart = (props: any) => {\r\n  const { series, category, title } = props;\r\n\r\n  const options: any = {\r\n    chart: {\r\n      polar: true,\r\n      type: \"area\",\r\n      // height:'80%'\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    accessibility: {\r\n      description:\r\n        \"A spiderweb chart compares the allocated budget against actual spending within an organization. The spider chart has six spokes. Each spoke represents one of the 6 departments within the organization: sales, marketing, development, customer support, information technology and administration. The chart is interactive, and each data point is displayed upon hovering. The chart clearly shows that 4 of the 6 departments have overspent their budget with Marketing responsible for the greatest overspend of $20,000. The allocated budget and actual spending data points for each department are as follows: Sales. Budget equals $43,000; spending equals $50,000. Marketing. Budget equals $19,000; spending equals $39,000. Development. Budget equals $60,000; spending equals $42,000. Customer support. Budget equals $35,000; spending equals $31,000. Information technology. Budget equals $17,000; spending equals $26,000. Administration. Budget equals $10,000; spending equals $14,000.\",\r\n    },\r\n\r\n    title: {\r\n      text: \"Usage Footprint\",\r\n      // style: {\r\n      //     fontSize: '12px'\r\n      //  }\r\n      // x: -80\r\n    },\r\n    // colors: COLOR_SERIES,\r\n\r\n    pane: {\r\n      size: \"100%\",\r\n    },\r\n\r\n    xAxis: {\r\n      categories: category,\r\n      tickmarkPlacement: \"on\",\r\n      lineWidth: 0,\r\n      labels: {\r\n        style: {\r\n          fontWeight: \"bold\",\r\n          color: \"#56c8d6\",\r\n        },\r\n      },\r\n    },\r\n\r\n    yAxis: {\r\n      gridLineInterpolation: \"polygon\",\r\n      lineWidth: 0,\r\n      min: 0,\r\n      max: 100,\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        fillOpacity: 0.5,\r\n        cursor: \"pointer\",\r\n        // point: {\r\n        //     events: {\r\n        //         click: function (e) {\r\n        //             handlepoint(e.point.category)\r\n        //         }\r\n        //     }\r\n        // }\r\n      },\r\n    },\r\n    tooltip: {\r\n      shared: true,\r\n      pointFormat:\r\n        '<span style=\"color:{series.color}\">{series.name}: <b>{point.y:,.0f}%</b><br/>',\r\n    },\r\n\r\n    legend: {\r\n      // align: 'right',\r\n      verticalAlign: \"bottom\",\r\n      layout: \"horizontal\",\r\n    },\r\n\r\n    series: series,\r\n\r\n    responsive: {\r\n      rules: [\r\n        {\r\n          condition: {\r\n            maxWidth: 500,\r\n          },\r\n          chartOptions: {\r\n            legend: {\r\n              align: \"center\",\r\n              verticalAlign: \"bottom\",\r\n              layout: \"horizontal\",\r\n            },\r\n            pane: {\r\n              size: \"70%\",\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  const [option, setOption] = useState<any>(options);\r\n  const [loading, setloading] = useState(true);\r\n  const [total, setTotal] = useState<any>(null);\r\n  const [total1, setTotal1] = useState<any>(null);\r\n  const [total2, seTotal2] = useState<any>(null);\r\n  const [ShowGraph, setShowGraph] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // let series = option.series\r\n    // if (data != undefined){\r\n    //     for(let i=0;i<data.length;i++){\r\n    //         series[0].data.push(data[i])\r\n    //     }\r\n    // }\r\n\r\n    // setOption(prevState => ({\r\n    //     ...prevState,\r\n    //     series: series ,\r\n    //   }))\r\n\r\n    setloading(false);\r\n    setShowGraph(true);\r\n    return () => {};\r\n  }, [series, category]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {!loading && ShowGraph && (\r\n        <HighchartsReact highcharts={Highcharts} options={options} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SummarySpiderChart;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\AreaStackedAccount.tsx",["1612","1613","1614","1615"],"import React, { useEffect, useState } from \"react\";\r\nimport { LinearProgress, Paper } from \"@mui/material\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { COLOR_SERIES } from \"../../const\";\r\n\r\nconst AreaStackedAccount = (props: any) => {\r\n  const { series, category, title, description } = props;\r\n  let subTitle = description && description[title] ? description[title] : \"\";\r\n  const options = {\r\n    chart: {\r\n      type: \"area\",\r\n    },\r\n    colors: COLOR_SERIES,\r\n    title: {\r\n      text: title,\r\n    },\r\n    subtitle: {\r\n      text: subTitle,\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: title,\r\n      },\r\n      labels: {},\r\n    },\r\n    xAxis: {\r\n      title: {\r\n        text: \"Date\",\r\n      },\r\n      categories: category,\r\n      crosshair: true,\r\n    },\r\n    tooltip: {\r\n      pointFormat: '<span style=\"color:{series.color}\">\\u25CF</span> {series.name} <b>{point.y:.2f}</b>',\r\n      split: true,\r\n    },\r\n    // tooltip: {\r\n    //     split: true,\r\n    // },\r\n    plotOptions: {\r\n      area: {\r\n        stacking: \"normal\",\r\n        lineWidth: 1,\r\n        //fillColor:'#e244060f',\r\n      },\r\n      column: {\r\n        pointPadding: 0.2,\r\n        borderWidth: 0,\r\n      },\r\n    },\r\n    series: series,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AreaStackedAccount;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\billing.ts",["1616"],"import client from './client';\r\n\r\nconst usageMetrix = async (params) => {\r\n\r\n    let res: any = await client.get('/billing/usageMetrix', params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\nconst usageMetrixAdditional = async (params) => {\r\n\r\n    let res: any = await client.get('/billing/usageMetrixAdditional', params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\n\r\nconst spider = async (params) => {\r\n    let res: any = await client.get('/billing/spider', params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\nconst prediction = async (params) => {\r\n    let res: any = await client.get('/billing/prediction', params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\nconst getDashboardData = async (params) => {\r\n\r\n    let res: any = await client.get('/billing/usageDashboard', params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\n\r\nconst usageMetrixOthers = async (params) => {\r\n\r\n    let res: any = await client.get('/billing/usageMetrixOthers', params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\n\r\nconst getInvoicedData = async (params) => {\r\n\r\n    let res: any = await client.get('/billing/invoicedData', params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\n\r\nconst getBillingParameters = async (params) => {\r\n\r\n    let res: any = await client.get('/billing/getParameters', params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\n\r\n\r\nconst usageMetrixBreakdown = async (params) => {\r\n\r\n    let res: any = await client.get('/billing/usageMetrixBreakdown', params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\nconst usageMetrixAdditionalBreakdown = async (params) => {\r\n\r\n    let res: any = await client.get('/billing/usageMetrixAdditionalBreakdown', params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\nconst usageMetrixOthersBreakdown = async (params) => {\r\n\r\n    let res: any = await client.get('/billing/usageMetrixOthersBreakdown', params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport default {\r\n    usageMetrix,\r\n    usageMetrixOthers,\r\n    usageMetrixBreakdown,\r\n    usageMetrixOthersBreakdown,\r\n    getInvoicedData, getBillingParameters,\r\n    getDashboardData, spider, usageMetrixAdditional, usageMetrixAdditionalBreakdown, prediction\r\n\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\admin\\users.ts",["1617"],"/**\r\n * Salesforce Service\r\n */\r\n\r\nimport client from '../client';\r\n\r\nconst listing = async(params)=>{\r\n    let res:any = await client.get(\"/admin/users/list\",params);\r\n    return res;\r\n}\r\nconst remove = async(params)=>{\r\n    let res:any = await client.post(\"/admin/users/remove\",params);\r\n    return res;\r\n}\r\nconst activate = async(params)=>{\r\n    let res:any = await client.post(\"/admin/users/activate\",params);\r\n    return res;\r\n}\r\nconst get = async(params)=>{\r\n    let res:any = await client.get(\"/admin/users/get\",params);\r\n    return res;\r\n}\r\n\r\n\r\nconst update = async(params)=>{\r\n    let res:any = await client.post(\"/admin/users/update\",params);\r\n    return res;\r\n}\r\n\r\n\r\nconst create = async(params)=>{\r\n    let res:any = await client.post(\"/admin/users/create\",params);\r\n    return res;\r\n}\r\n\r\nexport default {\r\n    listing,remove,activate,get,update,create\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\AreaGraphSingleSeries.tsx",["1618"],"import React from 'react';\r\nimport { Paper } from \"@mui/material\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nimport {COLOR_SERIES} from '../../const';\r\n\r\nconst AreaGraphSingleSeries = (props:any)=>{\r\n    const {series,category,title,description} = props;\r\n    \r\n    let subTitle = (description && description[title])?description[title]:'';\r\n    \r\n    const options = {\r\n      credits: {\r\n        enabled: false\r\n      },\r\n      chart: {\r\n        type: 'area'\r\n      },\r\n      title: {\r\n        text: title,\r\n      },\r\n      subtitle: {\r\n        text: subTitle,\r\n      },\r\n      xAxis: {\r\n        title: {\r\n          text: \"Date\",\r\n        },\r\n        categories: category,\r\n        crosshair: true,\r\n      },\r\n      yAxis: {\r\n        min: 0,\r\n        title: {\r\n          text: title,\r\n        },\r\n      },\r\n      tooltip: {\r\n        headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n        pointFormat:\r\n          '<tr><td style=\"color:{series.color};padding:0\">'+title+': </td>' +\r\n          '<td style=\"padding:0\"><b>{point.y}  </b></td></tr>',\r\n        footerFormat: \"</table>\",\r\n        shared: true,\r\n        useHTML: true,\r\n      },\r\n      plotOptions: {\r\n        area: {\r\n          fillColor:COLOR_SERIES[0]+'61',\r\n        },\r\n        series: {\r\n                  colorByPoint: true,\r\n                  colors: [COLOR_SERIES[0]]\r\n              },\r\n        column: {\r\n          pointPadding: 0.2,\r\n          borderWidth: 0,\r\n        },\r\n      },\r\n      series: [\r\n        {\r\n          showInLegend:false,\r\n          data: series,\r\n        },\r\n      ],\r\n    };\r\n    \r\n    return(\r\n      \r\n        <HighchartsReact highcharts={Highcharts} options={options} />\r\n       \r\n    )\r\n  }\r\n  \r\n  export default AreaGraphSingleSeries;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\SpiderChart.tsx",["1619","1620","1621","1622","1623","1624","1625","1626","1627","1628","1629"],"import React, { useEffect, useState } from \"react\";\r\nimport { LinearProgress, Paper } from \"@mui/material\";\r\nimport { COLOR_SERIES } from \"../../const\";\r\n\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport HC_more from \"highcharts/highcharts-more\";\r\nHC_more(Highcharts);\r\n\r\nconst SpiderChart = (props: any) => {\r\n  const { series, category, title, handlepoint } = props;\r\n\r\n  const options: any = {\r\n    chart: {\r\n      polar: true,\r\n      type: \"area\",\r\n      height: \"60%\",\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    accessibility: {\r\n      description:\r\n        \"A spiderweb chart compares the allocated budget against actual spending within an organization. The spider chart has six spokes. Each spoke represents one of the 6 departments within the organization: sales, marketing, development, customer support, information technology and administration. The chart is interactive, and each data point is displayed upon hovering. The chart clearly shows that 4 of the 6 departments have overspent their budget with Marketing responsible for the greatest overspend of $20,000. The allocated budget and actual spending data points for each department are as follows: Sales. Budget equals $43,000; spending equals $50,000. Marketing. Budget equals $19,000; spending equals $39,000. Development. Budget equals $60,000; spending equals $42,000. Customer support. Budget equals $35,000; spending equals $31,000. Information technology. Budget equals $17,000; spending equals $26,000. Administration. Budget equals $10,000; spending equals $14,000.\",\r\n    },\r\n\r\n    title: {\r\n      text: \"\",\r\n      // x: -80\r\n    },\r\n    // colors: COLOR_SERIES,\r\n\r\n    pane: {\r\n      size: \"96%\",\r\n    },\r\n\r\n    xAxis: {\r\n      categories: category,\r\n      tickmarkPlacement: \"on\",\r\n      lineWidth: 0,\r\n      labels: {\r\n        style: {\r\n          fontWeight: \"bold\",\r\n          color: \"#11417f\",\r\n        },\r\n      },\r\n    },\r\n\r\n    yAxis: {\r\n      gridLineInterpolation: \"polygon\",\r\n      lineWidth: 0,\r\n      min: 0,\r\n      max: 100,\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        fillOpacity: 0.1,\r\n        cursor: \"pointer\",\r\n        point: {\r\n          events: {\r\n            click: function (e) {\r\n              handlepoint(e.point.category);\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    tooltip: {\r\n      shared: true,\r\n      pointFormat:\r\n        '<span style=\"color:{series.color}\">{series.name}: <b>{point.y:,.0f}%</b><br/>',\r\n    },\r\n\r\n    legend: {\r\n      // align: 'right',\r\n      verticalAlign: \"bottom\",\r\n      layout: \"horizontal\",\r\n    },\r\n\r\n    series: series,\r\n\r\n    responsive: {\r\n      rules: [\r\n        {\r\n          condition: {\r\n            maxWidth: 500,\r\n          },\r\n          chartOptions: {\r\n            legend: {\r\n              align: \"center\",\r\n              verticalAlign: \"bottom\",\r\n              layout: \"horizontal\",\r\n            },\r\n            pane: {\r\n              size: \"70%\",\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  const [option, setOption] = useState<any>(options);\r\n  const [loading, setloading] = useState(true);\r\n  const [total, setTotal] = useState<any>(null);\r\n  const [total1, setTotal1] = useState<any>(null);\r\n  const [total2, seTotal2] = useState<any>(null);\r\n  const [ShowGraph, setShowGraph] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // let series = option.series\r\n    // if (data != undefined){\r\n    //     for(let i=0;i<data.length;i++){\r\n    //         series[0].data.push(data[i])\r\n    //     }\r\n    // }\r\n\r\n    // setOption(prevState => ({\r\n    //     ...prevState,\r\n    //     series: series ,\r\n    //   }))\r\n\r\n    setloading(false);\r\n    setShowGraph(true);\r\n    return () => {};\r\n  }, [series, category]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {!loading && ShowGraph && (\r\n        <HighchartsReact highcharts={Highcharts} options={options} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpiderChart;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\billingConfigurator\\GraphGuage.tsx",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\billingConfigurator\\StackBarGraph.tsx",["1630"],"import Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Boost  from 'highcharts/modules/boost'; \r\n\r\nimport {COLOR_SERIES} from '../../../const'\r\n\r\nBoost(Highcharts);\r\n\r\nconst StackBarGraph = ({Dashboard})=>{\r\n    let series:any = [];\r\n    let categories:any = [];\r\n\r\n    Dashboard.Models.forEach((model:any)=>{\r\n        categories.push(model.name);\r\n    });\r\n\r\n    Dashboard.UniqueParams.forEach((pName:string,index:number)=>{\r\n        let data:any = [];\r\n        Dashboard.Models.forEach((model:any)=>{\r\n            let mp:any = model.params.filter((p:any)=>{\r\n                return p.name == pName;\r\n            });\r\n            if(mp.length > 0){\r\n                data.push(parseFloat(mp[0].total));\r\n            }else{\r\n                data.push(0);\r\n            }    \r\n        });\r\n        series.push({\r\n            color:COLOR_SERIES[index]?COLOR_SERIES[index]:null,\r\n            name:pName,\r\n            data:data\r\n        })\r\n    });\r\n     \r\n    \r\n    let options = {\r\n        credits: {enabled: false},\r\n        chart: {\r\n            type: 'bar',\r\n            //height:'180px'\r\n        },\r\n        title: {\r\n            text: ''\r\n        },\r\n        subtitle: {\r\n            text: ''\r\n        },\r\n        xAxis: {\r\n            categories: categories\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            title: {\r\n                text: ''\r\n            }\r\n        },\r\n        legend: {\r\n            reversed: true\r\n        },\r\n        plotOptions: {\r\n            series: {\r\n                stacking: 'normal'\r\n            }\r\n        },\r\n        series: series\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            <HighchartsReact highcharts={Highcharts} options={options} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StackBarGraph;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\billingConfigurator\\GraphGroupParametersPie.tsx",["1631","1632","1633","1634"],"import Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Boost  from 'highcharts/modules/boost'; \r\n\r\nimport u from '../../../services/util'\r\nimport {COLOR_SERIES} from '../../../const'\r\n\r\nBoost(Highcharts);\r\n\r\nconst GraphGroupParametersPie = (props:any)=>{\r\n    const {dashboard,groups} = props;\r\n    \r\n    let series:any = [];\r\n    let categories:any = [];\r\n    let data:any = [];\r\n\r\n\r\n    groups.forEach((group:any,index:number)=>{\r\n        let total = 0;\r\n        let subCategories:any = [];\r\n        let subData:any = [];\r\n        \r\n        categories.push(group.title);\r\n\r\n        let params = dashboard.Parameters.filter(p => p.group == group.name);\r\n        params.forEach((p)=>{\r\n            if(p.checked){\r\n                total += parseFloat(p.total);\r\n                subCategories.push(p.title);\r\n                subData.push(p.total)\r\n            }\r\n        });\r\n\r\n        data.push({\r\n            y: total,\r\n            color: COLOR_SERIES[index],\r\n            drilldown: {\r\n                name: group.title,\r\n                categories: subCategories,\r\n                data: subData\r\n            }\r\n        });\r\n    });\r\n\r\n    let groupData:any = [],\r\n    paramsData:any = [],\r\n    i:any,\r\n    j:any,\r\n    dataLen = data.length,\r\n    drillDataLen,\r\n    brightness;\r\n\r\n\r\n    for (i = 0; i < dataLen; i += 1) {\r\n        // add group\r\n        groupData.push({\r\n            name: categories[i],\r\n            y: data[i].y,\r\n            color: data[i].color\r\n        });\r\n    \r\n        // parameter\r\n        drillDataLen = data[i].drilldown.data.length;\r\n        for (j = 0; j < drillDataLen; j += 1) {\r\n            brightness = 0.2 - (j / drillDataLen) / 5;\r\n            paramsData.push({\r\n                name: data[i].drilldown.categories[j],\r\n                y: parseFloat( data[i].drilldown.data[j]),\r\n                color: COLOR_SERIES[i]\r\n                //Highcharts.color(data[i].color).brighten(brightness).get()\r\n            });\r\n        }\r\n    }\r\n    \r\n\r\n    let options = {\r\n        credits: {enabled: false},\r\n        chart: {\r\n            type: 'pie',\r\n            \r\n        },\r\n        title: {\r\n            text: ''\r\n        },\r\n        subtitle: {\r\n            text: ''\r\n        },\r\n        plotOptions: {\r\n            pie: {\r\n                shadow: false,\r\n                center: ['50%', '50%']\r\n            }\r\n        },\r\n        tooltip: {\r\n            headerFormat: '',\r\n            pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: <b> ${point.y:.2f}</b><br/>'\r\n        },\r\n        series: [{\r\n            //name: 'groups',\r\n            data: groupData,\r\n            size: '60%',\r\n            dataLabels: {\r\n                formatter(){\r\n                    let t:any = this || {};\r\n                    return t.y > 5 ? t.point.name : null;\r\n                },\r\n                color: '#ffffff',\r\n                distance: -30\r\n            }\r\n        }, {\r\n            //name: 'parameters',\r\n            data: paramsData,\r\n            size: '80%',\r\n            innerSize: '60%',\r\n            dataLabels: {\r\n                formatter(){\r\n                    // display only if larger than 1\r\n                    let t:any = this || {};\r\n                    return t.y > 1 ? '<b>' + t.point.name + ':</b> ' +\r\n                        u.format.currency(t.y) : null;\r\n                }\r\n            },\r\n            //id: 'versions'\r\n        }],\r\n        responsive: {\r\n            rules: [{\r\n                condition: {\r\n                    maxWidth: 400\r\n                },\r\n                chartOptions: {\r\n                    series: [{\r\n                    }, {\r\n                        //id: 'versions',\r\n                        dataLabels: {\r\n                            enabled: false\r\n                        }\r\n                    }]\r\n                }\r\n            }]\r\n        }\r\n    }\r\n    \r\n\r\n    return(\r\n        <>\r\n            <HighchartsReact highcharts={Highcharts} options={options} />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GraphGroupParametersPie;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\billingConfigurator\\InvoiceGraph.tsx",["1635","1636","1637"],"import Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Boost  from 'highcharts/modules/boost'; \r\n\r\nimport {COLOR_SERIES} from '../../../const'\r\n\r\nBoost(Highcharts);\r\n\r\nconst InvoiceGraph = (props:any)=>{\r\n    const {dashboard,invoicedAmount} = props;\r\n  \r\n    let title = '';\r\n    let series:any = [];\r\n    \r\n    series.push({\r\n      color:COLOR_SERIES[0],\r\n      name:'Last Month Billing',\r\n      data:[invoicedAmount]\r\n    });\r\n  \r\n    series.push({\r\n      color:COLOR_SERIES[1],\r\n      name:'Simulated Billing',\r\n      data:[dashboard.Total]\r\n    });\r\n    \r\n    const options = {\r\n      credits: {\r\n        enabled: false\r\n      },\r\n      chart: {\r\n        type: 'bar',\r\n        height:'180px'\r\n      },\r\n      title: {\r\n          text: ''\r\n      },\r\n      subtitle: {\r\n          text: ''\r\n      },\r\n      accessibility: {\r\n          announceNewData: {\r\n              enabled: true\r\n          }\r\n      },\r\n      xAxis: {\r\n          type: 'category'\r\n      },\r\n      yAxis: {\r\n          title: {\r\n              text: 'Total Billing'\r\n          }\r\n  \r\n      },\r\n      legend: {\r\n        layout: 'horizontal',\r\n        align: 'center',\r\n        verticalAlign: 'bottom',\r\n        itemStyle:{fontSize:'8px'}\r\n      },\r\n      plotOptions: {\r\n          series: {\r\n              borderWidth: 0,\r\n              dataLabels: {\r\n                  enabled: true,\r\n                  format: '${point.y:,.2f}'\r\n              }\r\n          }\r\n      },\r\n      tooltip: {\r\n          headerFormat: '<span style=\"font-size:11px\">{series.name}</span><br>',\r\n          pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: <b>${point.y:.2f}</b><br/>'\r\n      },\r\n      series: series\r\n    };\r\n    \r\n    return(\r\n      \r\n        <HighchartsReact highcharts={Highcharts} options={options} />\r\n      \r\n    )     \r\n}\r\n\r\n\r\nexport default InvoiceGraph;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\billingConfigurator\\GraphParameters.tsx",["1638"],"import Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Boost  from 'highcharts/modules/boost'; \r\n\r\nimport {COLOR_SERIES} from '../../../const'\r\n\r\nBoost(Highcharts);\r\n\r\nconst GraphParameters = (props:any)=>{\r\n    const {parameters} = props;\r\n    let series:any = [];\r\n    parameters.forEach((param:any,index:number)=>{\r\n        if(param.checked){\r\n            series.push({\r\n                name:param.title,\r\n                y:param.unitPrice,\r\n                color:COLOR_SERIES[index]?COLOR_SERIES[index]:null\r\n            })\r\n        }\r\n    })\r\n\r\n    let options = {\r\n        credits: {enabled: false},\r\n        chart: {\r\n            type: 'column',\r\n            height:'180px'\r\n        },\r\n        title: {\r\n            text: ''\r\n        },\r\n        subtitle: {\r\n            text: ''\r\n        },\r\n        accessibility: {\r\n            announceNewData: {\r\n                enabled: true\r\n            }\r\n        },\r\n        xAxis: {\r\n            type: 'Parameters'\r\n        },\r\n        yAxis: {\r\n            title: {\r\n                text: 'Total Cost'\r\n            }\r\n    \r\n        },\r\n        legend: {\r\n            enabled: false\r\n        },\r\n        plotOptions: {\r\n            series: {\r\n                borderWidth: 0,\r\n                dataLabels: {\r\n                    enabled: true,\r\n                    format: '{point.y:.1f}'\r\n                }\r\n            }\r\n        },\r\n    \r\n        tooltip: {\r\n            headerFormat: '',\r\n            pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: cost: <b> ${point.y:.2f}</b><br/>'\r\n        },\r\n    \r\n        series: [\r\n            {\r\n                name: \"\",\r\n                colorByPoint: true,\r\n                data: series\r\n            }\r\n        ] \r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            <HighchartsReact highcharts={Highcharts} options={options} />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GraphParameters;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\SummaryPie.tsx",["1639","1640","1641","1642","1643","1644","1645","1646","1647","1648","1649"],"import React, { useEffect, useState } from \"react\";\r\nimport { LinearProgress, Paper } from \"@mui/material\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { COLOR_SERIES } from \"../../const\";\r\n\r\nconst SummaryPie = (props: any) => {\r\n  const { data, title, description } = props;\r\n  let subTitle = description && description[title] ? description[title] : \"\";\r\n\r\n  const options: any = {\r\n    chart: {\r\n      height: \"300\",\r\n      plotBackgroundColor: null,\r\n      plotBorderWidth: null,\r\n      plotShadow: false,\r\n      type: \"pie\",\r\n    },\r\n    title: {\r\n      text: title,\r\n    },\r\n    // subtitle: {\r\n    //     text: subTitle,\r\n    //   },\r\n    colors: [\"#e24406\", \"#ff834a\"],\r\n    tooltip: {\r\n      pointFormat:\r\n        \"{series.name}: <b>{point.percentage:.1f}% </b>\" +\r\n        \"<br><b>value: {point.y}</b>\",\r\n    },\r\n    accessibility: {\r\n      point: {\r\n        valueSuffix: \"%\",\r\n      },\r\n    },\r\n    plotOptions: {\r\n      pie: {\r\n        allowPointSelect: true,\r\n        cursor: \"pointer\",\r\n        dataLabels: {\r\n          enabled: true,\r\n          format: \"<b>{point.name}</b>: {point.percentage:.1f} %\",\r\n        },\r\n      },\r\n    },\r\n\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    showInLegend: false,\r\n    series: [\r\n      {\r\n        name: title,\r\n        colorByPoint: true,\r\n        data: data,\r\n      },\r\n    ],\r\n  };\r\n  const [option, setOption] = useState<any>(options);\r\n  const [loading, setloading] = useState(true);\r\n  const [total, setTotal] = useState<any>(null);\r\n  const [total1, setTotal1] = useState<any>(null);\r\n  const [total2, seTotal2] = useState<any>(null);\r\n  const [ShowGraph, setShowGraph] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // let series = option.series\r\n    // if (data != undefined){\r\n    //     for(let i=0;i<data.length;i++){\r\n    //         series[0].data.push({name:category[i], y:data[i]})\r\n    //     }\r\n    // }\r\n\r\n    // setOption(prevState => ({\r\n    //     ...prevState,\r\n    //     series: series ,\r\n    //   }))\r\n\r\n    setloading(false);\r\n    setShowGraph(true);\r\n    return () => {};\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {!loading && ShowGraph && (\r\n        <HighchartsReact highcharts={Highcharts} options={options} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SummaryPie;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\ColumnChart.tsx",["1650","1651","1652","1653","1654","1655","1656","1657","1658"],"import React, { useEffect, useState } from \"react\";\r\nimport { LinearProgress, Paper } from \"@mui/material\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { COLOR_SERIES } from \"../../const\";\r\n\r\nconst ColumnChart = (props: any) => {\r\n  const { series, category, title } = props;\r\n\r\n  const options: any = {\r\n    chart: {\r\n      type: \"column\",\r\n    },\r\n    title: {\r\n      text: title,\r\n    },\r\n    colors: COLOR_SERIES,\r\n    xAxis: {\r\n      categories: category,\r\n      crosshair: true,\r\n    },\r\n    yAxis: {\r\n      height: \"100%\",\r\n      min: 0,\r\n      max: 10000,\r\n      title: {\r\n        text: \"Hours\",\r\n      },\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    tooltip: {\r\n      headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n      pointFormat:\r\n        '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\r\n        '<td style=\"padding:0\"><b>{point.y:.1f} </b></td></tr>',\r\n      footerFormat: \"</table>\",\r\n      shared: true,\r\n      useHTML: true,\r\n    },\r\n    plotOptions: {\r\n      column: {\r\n        pointPadding: 0.2,\r\n        borderWidth: 0,\r\n      },\r\n    },\r\n    series: series,\r\n  };\r\n  const [option, setOption] = useState<any>(options);\r\n  const [loading, setloading] = useState(true);\r\n  const [total, setTotal] = useState<any>(null);\r\n  const [total1, setTotal1] = useState<any>(null);\r\n  const [total2, seTotal2] = useState<any>(null);\r\n  const [ShowGraph, setShowGraph] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // let series = option.series\r\n    // if (data != undefined){\r\n    //     for(let i=0;i<data.length;i++){\r\n    //         series[0].data.push(data[i])\r\n    //     }\r\n    // }\r\n\r\n    // setOption(prevState => ({\r\n    //     ...prevState,\r\n    //     series: series ,\r\n    //   }))\r\n\r\n    setloading(false);\r\n    setShowGraph(true);\r\n    return () => {};\r\n  }, [series, category]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {!loading && ShowGraph && (\r\n        <HighchartsReact highcharts={Highcharts} options={options} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ColumnChart;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\SummaryLineChart.tsx",["1659","1660","1661","1662","1663","1664","1665","1666","1667","1668"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\MatrixAccount2.tsx",["1669","1670","1671","1672","1673","1674","1675","1676","1677","1678","1679","1680","1681","1682"],"import {\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  LinearProgress,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Stack,\r\n  Divider,\r\n  Button,\r\n  Icon,\r\n  Box,\r\n  Tabs,\r\n  Tab,\r\n} from \"@mui/material\";\r\nimport React, { useState, useMemo, useEffect, lazy, Suspense } from \"react\";\r\nimport ModalDialog from \"../../../components/ModalDialog\";\r\nimport billing from \"../../../services/billing\";\r\nimport Comparison from \"./Comparison\";\r\nimport MonthlyComparison from \"./MonthlyComparison\";\r\nimport MatrixOthers from \"./MatrixOthers\";\r\nimport DonutSmallIcon from \"@mui/icons-material/DonutSmall\";\r\n\r\nimport { ACCOUNT_DESCRIPTION } from \"../../../const\";\r\nconst AreaGraphSingleSeries = lazy(\r\n  () => import(\"../../../components/graphs/AreaGraphSingleSeries\")\r\n);\r\n\r\nconst MatrixAccount2 = (promps) => {\r\n  const { AccountID, Period, startDate, endDate } = promps;\r\n  const [loading, setloading] = useState<boolean>(false);\r\n  const [Data, setData] = useState<any>(null);\r\n  const [accountList, setAccountList] = useState<any>([]);\r\n  const [value, setValue] = useState<any>(0);\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: string) => {\r\n    setValue(newValue);\r\n  };\r\n  const load = async () => {\r\n    setloading(true);\r\n    let data: any = {};\r\n    let accounts: any = [];\r\n    let resMatrix = await billing.usageMetrixBreakdown({\r\n      id: AccountID,\r\n      period: Period,\r\n      breakdownBy: \"ACCOUNT\",\r\n      startDate,\r\n      endDate,\r\n    });\r\n    let resMatrixOther = await billing.usageMetrixOthersBreakdown({\r\n      id: AccountID,\r\n      period: Period,\r\n      breakdownBy: \"ACCOUNT\",\r\n      startDate,\r\n      endDate,\r\n    });\r\n    let resMatrixAdditional = await billing.usageMetrixAdditionalBreakdown({\r\n      id: AccountID,\r\n      period: Period,\r\n      breakdownBy: \"ACCOUNT\",\r\n      startDate,\r\n      endDate,\r\n    });\r\n\r\n    // let resMatrix = await billing.usageMetrixAccount({id:AccountID,period:Period});\r\n    // let resMatrixOther = await billing.usageMetrixOthersAccount({id:AccountID,period:Period});\r\n    if (resMatrix.success) {\r\n      data = resMatrix.data;\r\n      if (resMatrixOther.success) {\r\n        for (let key in data) {\r\n          data[key].accumulated = {\r\n            ...data[key].accumulated,\r\n            ...resMatrixOther.data[key].accumulated,\r\n          };\r\n          accounts.push(key);\r\n        }\r\n      }\r\n      if (\r\n        resMatrixAdditional.success &&\r\n        Object.keys(resMatrixAdditional.data).length > 0\r\n      ) {\r\n        for (let key in data) {\r\n          data[key].accumulated = {\r\n            ...data[key].accumulated,\r\n            ...resMatrixAdditional.data[key].accumulated,\r\n          };\r\n          // accounts.push(key)\r\n        }\r\n      }\r\n      if (Object.keys(data).length > 0) {\r\n        setData(data);\r\n        setAccountList(accounts);\r\n        setValue(accounts[0]);\r\n      } else setData(null);\r\n    } else {\r\n      setData(null);\r\n    }\r\n    setloading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (AccountID) load();\r\n    return () => {};\r\n  }, [AccountID, Period, startDate, endDate]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {Data && Object.keys(Data).length ? (\r\n        <>\r\n          <h1>account_no</h1>\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            textColor=\"primary\"\r\n            indicatorColor=\"primary\"\r\n            aria-label=\"secondary tabs example\"\r\n          >\r\n            {accountList.map((ele, index) => (\r\n              <Tab key={index} value={ele} label={ele} />\r\n            ))}\r\n          </Tabs>\r\n\r\n          <Grid container spacing={2}>\r\n            {Data[value]\r\n              ? Object.keys(Data[value].accumulated).map((key, index) => (\r\n                  <>\r\n                    {Data[value].accumulated[key].total > 0 && (\r\n                      <Grid item md={6} lg={6} xs={12}>\r\n                        <Paper\r\n                          key={index}\r\n                          elevation={1}\r\n                          className=\"section mt-10\"\r\n                        >\r\n                          <Suspense\r\n                            fallback={\r\n                              <Stack justifyContent=\"center\" direction=\"row\">\r\n                                Loading...\r\n                              </Stack>\r\n                            }\r\n                          >\r\n                            <AreaGraphSingleSeries\r\n                              category={Data[value].accumulated[key].cat}\r\n                              series={Data[value].accumulated[key].series}\r\n                              title={key}\r\n                              description={ACCOUNT_DESCRIPTION}\r\n                            />\r\n                          </Suspense>\r\n                        </Paper>\r\n                      </Grid>\r\n                    )}\r\n                  </>\r\n                ))\r\n              : \"\"}\r\n            <Divider />\r\n          </Grid>\r\n        </>\r\n      ) : (\r\n        <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            style={{ marginTop: \"100px\" }}\r\n          >\r\n            <strong>No Usage Analytics Found</strong>\r\n          </Stack>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MatrixAccount2;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\MatrixStandard.tsx",["1683","1684","1685","1686","1687","1688","1689","1690","1691","1692","1693","1694","1695","1696","1697"],"import {\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  LinearProgress,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Stack,\r\n  Divider,\r\n  Button,\r\n  Icon,\r\n  Box,\r\n} from \"@mui/material\";\r\nimport React, { useState, useMemo, useEffect, lazy, Suspense } from \"react\";\r\nimport ModalDialog from \"../../../components/ModalDialog\";\r\nimport billing from \"../../../services/billing\";\r\nimport Comparison from \"./Comparison\";\r\nimport MonthlyComparison from \"./MonthlyComparison\";\r\nimport MatrixOthers from \"./MatrixOthers\";\r\nimport DonutSmallIcon from \"@mui/icons-material/DonutSmall\";\r\nimport { ACCOUNT_DESCRIPTION } from \"../../../const\";\r\n\r\nconst AreaGraphSingleSeries = lazy(\r\n  () => import(\"../../../components/graphs/AreaGraphSingleSeries\")\r\n);\r\n\r\nconst MatrixStandard = (promps) => {\r\n  const { AccountID, Period, startDate, endDate } = promps;\r\n  const [loading, setloading] = useState<boolean>(false);\r\n  const [Data, setData] = useState<any>(null);\r\n  const load = async () => {\r\n    setloading(true);\r\n    let data: any = {};\r\n    let resMatrix = await billing.usageMetrix({\r\n      id: AccountID,\r\n      period: Period,\r\n      startDate: startDate,\r\n      endDate: endDate,\r\n    });\r\n    let resMatrixOther = await billing.usageMetrixOthers({\r\n      id: AccountID,\r\n      period: Period,\r\n      startDate: startDate,\r\n      endDate: endDate,\r\n    });\r\n    let resMetrixAdditional = await billing.usageMetrixAdditional({\r\n      id: AccountID,\r\n      period: Period,\r\n      startDate: startDate,\r\n      endDate: endDate,\r\n    });\r\n    if (resMatrix.success) {\r\n      data = resMatrix.data;\r\n      if (resMatrixOther.success) {\r\n        data = { ...data, ...resMatrixOther.data };\r\n      }\r\n      if (resMetrixAdditional.success) {\r\n        data = { ...data, ...resMetrixAdditional.data };\r\n      }\r\n      if (Object.keys(data).length > 0) setData(data);\r\n      else setData(null);\r\n    } else {\r\n      setData(null);\r\n    }\r\n    setloading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (AccountID) load();\r\n    return () => {};\r\n  }, [AccountID, Period, startDate, endDate]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {Data && Object.keys(Data).length ? (\r\n        <>\r\n          <Grid container spacing={2}>\r\n            {Object.keys(Data).map((key, index) => (\r\n              <>\r\n                {Data[key].total > 0 && (\r\n                  <Grid item md={6} lg={6} xs={12}>\r\n                    <Paper key={index} elevation={1} className=\"section mt-10\">\r\n                      <Suspense\r\n                        fallback={\r\n                          <Stack justifyContent=\"center\" direction=\"row\">\r\n                            Loading...\r\n                          </Stack>\r\n                        }\r\n                      >\r\n                        <AreaGraphSingleSeries\r\n                          category={Data[key].cat}\r\n                          series={Data[key].series}\r\n                          title={key}\r\n                          description={ACCOUNT_DESCRIPTION}\r\n                        />\r\n                      </Suspense>\r\n                    </Paper>\r\n                  </Grid>\r\n                )}\r\n              </>\r\n            ))}\r\n          </Grid>\r\n        </>\r\n      ) : (\r\n        <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            style={{ marginTop: \"100px\" }}\r\n          >\r\n            <strong>No Usage Analytics Found</strong>\r\n          </Stack>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MatrixStandard;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\invoices\\InvoiceListing.tsx",["1698","1699","1700","1701","1702","1703","1704","1705","1706","1707","1708","1709"],"import { Divider, FormControl, Grid, InputLabel,Typography, LinearProgress, MenuItem, Paper, Select, Stack} from \"@mui/material\";\r\nimport React,{useState,useMemo,useEffect} from \"react\"; \r\nimport AlertMessage from \"../../../components/AlertMessage\";\r\nimport billing from \"../../../services/billing\";\r\nimport util from \"../../../services/util\";\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport ArrowForwardIosSharpIcon from '@mui/icons-material/ArrowForwardIosSharp';\r\nimport MuiAccordion, { AccordionProps } from '@mui/material/Accordion';\r\nimport MuiAccordionSummary, {\r\n  AccordionSummaryProps,\r\n} from '@mui/material/AccordionSummary';\r\nimport MuiAccordionDetails from '@mui/material/AccordionDetails';\r\n\r\nconst Accordion = styled((props: AccordionProps) => (\r\n    <MuiAccordion disableGutters elevation={0} square {...props} />\r\n  ))(({ theme }) => ({\r\n    border: `1px solid ${theme.palette.divider}`,\r\n    '&:not(:last-child)': {\r\n      borderBottom: 0,\r\n    },\r\n    '&:before': {\r\n      display: 'none',\r\n    },\r\n  }));\r\n  \r\n  const AccordionSummary = styled((props: AccordionSummaryProps) => (\r\n    <MuiAccordionSummary\r\n      expandIcon={<ArrowForwardIosSharpIcon sx={{ fontSize: '0.9rem' }} />}\r\n      {...props}\r\n    />\r\n  ))(({ theme }) => ({\r\n    backgroundColor:\r\n      theme.palette.mode === 'dark'\r\n        ? 'rgba(255, 255, 255, .05)'\r\n        : 'rgba(0, 0, 0, .03)',\r\n    flexDirection: 'row-reverse',\r\n    '& .MuiAccordionSummary-expandIconWrapper.Mui-expanded': {\r\n      transform: 'rotate(90deg)',\r\n    },\r\n    '& .MuiAccordionSummary-content': {\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n  }));\r\n  \r\n  const AccordionDetails = styled(MuiAccordionDetails)(({ theme }) => ({\r\n    padding: theme.spacing(2),\r\n    borderTop: '1px solid rgba(0, 0, 0, .125)',\r\n  }));\r\n\r\n//const ddd = [{\"invoice\":{\"date\":\"2021-12-02T10:28:16.000Z\",\"amount\":24360.21,\"lineitems\":[{\"name\":\"VPC-to-VPC Intra Cloud Connection Hours\",\"quantity\":\"229118\",\"unitPrice\":0.21,\"total\":\"48114.78\"},{\"name\":\"VPC-to-VPC Inter Cloud Connection Hours\",\"quantity\":\"79098\",\"unitPrice\":0.64,\"total\":\"50622.72\"},{\"name\":\"Gateways Running Security Services Hours\",\"quantity\":\"8874\",\"unitPrice\":0.64,\"total\":\"5679.36\"},{\"name\":\"Number of VPN Users\",\"quantity\":\"5175\",\"unitPrice\":0.04,\"total\":\"207.00\"},{\"name\":\"Max Service Node Count\",\"quantity\":\"261502\",\"unitPrice\":250,\"total\":\"65375500.00\"}]}},{\"invoice\":{\"date\":\"2021-11-02T15:30:21.000Z\",\"amount\":23627.42,\"lineitems\":[{\"name\":\"VPC-to-VPC Intra Cloud Connection Hours\",\"quantity\":\"277870\",\"unitPrice\":0.21,\"total\":\"58352.70\"},{\"name\":\"VPC-to-VPC Inter Cloud Connection Hours\",\"quantity\":\"111692\",\"unitPrice\":0.64,\"total\":\"71482.88\"},{\"name\":\"Gateways Running Security Services Hours\",\"quantity\":\"12960\",\"unitPrice\":0.64,\"total\":\"8294.40\"},{\"name\":\"Number of VPN Users\",\"quantity\":\"5500\",\"unitPrice\":0.04,\"total\":\"220.00\"},{\"name\":\"Max Service Node Count\",\"quantity\":\"323055\",\"unitPrice\":250,\"total\":\"80763750.00\"}]}},{\"invoice\":{\"date\":\"2021-10-03T09:18:45.000Z\",\"amount\":21986.68,\"lineitems\":[{\"name\":\"VPC-to-VPC Intra Cloud Connection Hours\",\"quantity\":\"163902\",\"unitPrice\":0.21,\"total\":\"34419.42\"},{\"name\":\"VPC-to-VPC Inter Cloud Connection Hours\",\"quantity\":\"105691\",\"unitPrice\":0.64,\"total\":\"67642.24\"},{\"name\":\"Gateways Running Security Services Hours\",\"quantity\":\"13392\",\"unitPrice\":0.64,\"total\":\"8570.88\"},{\"name\":\"Number of VPN Users\",\"quantity\":\"3090\",\"unitPrice\":0.04,\"total\":\"123.60\"},{\"name\":\"Max Service Node Count\",\"quantity\":\"194552\",\"unitPrice\":250,\"total\":\"48638000.00\"}]}},{\"invoice\":{\"date\":\"2021-09-03T06:08:04.000Z\",\"amount\":19784.59,\"lineitems\":[{\"name\":\"VPC-to-VPC Intra Cloud Connection Hours\",\"quantity\":\"143683\",\"unitPrice\":0.21,\"total\":\"30173.43\"},{\"name\":\"VPC-to-VPC Inter Cloud Connection Hours\",\"quantity\":\"94594\",\"unitPrice\":0.64,\"total\":\"60540.16\"},{\"name\":\"Gateways Running Security Services Hours\",\"quantity\":\"12942\",\"unitPrice\":0.64,\"total\":\"8282.88\"},{\"name\":\"Number of VPN Users\",\"quantity\":\"1611\",\"unitPrice\":0.04,\"total\":\"64.44\"},{\"name\":\"Max Service Node Count\",\"quantity\":\"169266\",\"unitPrice\":250,\"total\":\"42316500.00\"}]}},{\"invoice\":{\"date\":\"2021-08-03T17:56:47.000Z\",\"amount\":19425.93,\"lineitems\":[{\"name\":\"VPC-to-VPC Intra Cloud Connection Hours\",\"quantity\":\"141955\",\"unitPrice\":0.21,\"total\":\"29810.55\"},{\"name\":\"VPC-to-VPC Inter Cloud Connection Hours\",\"quantity\":\"96448\",\"unitPrice\":0.64,\"total\":\"61726.72\"},{\"name\":\"Gateways Running Security Services Hours\",\"quantity\":\"13320\",\"unitPrice\":0.64,\"total\":\"8524.80\"},{\"name\":\"Number of VPN Users\",\"quantity\":\"758\",\"unitPrice\":0.04,\"total\":\"30.32\"},{\"name\":\"Max Service Node Count\",\"quantity\":\"170054\",\"unitPrice\":250,\"total\":\"42513500.00\"}]}},{\"invoice\":{\"date\":\"2021-07-03T04:32:26.000Z\",\"amount\":17749.01,\"lineitems\":[{\"name\":\"VPC-to-VPC Intra Cloud Connection Hours\",\"quantity\":\"137790\",\"unitPrice\":0.21,\"total\":\"28935.90\"},{\"name\":\"VPC-to-VPC Inter Cloud Connection Hours\",\"quantity\":\"93856\",\"unitPrice\":0.64,\"total\":\"60067.84\"},{\"name\":\"Gateways Running Security Services Hours\",\"quantity\":\"13392\",\"unitPrice\":0.64,\"total\":\"8570.88\"},{\"name\":\"Number of VPN Users\",\"quantity\":\"155\",\"unitPrice\":0.04,\"total\":\"6.20\"},{\"name\":\"Max Service Node Count\",\"quantity\":\"165012\",\"unitPrice\":250,\"total\":\"41253000.00\"}]}}]\r\n\r\nconst InvoiceListing = (props:any)=>{\r\n\r\n    const {Account} = props;\r\n    const [Data,setData] = useState<any|null>();\r\n    const [loading,setloading] = useState<boolean>(false);\r\n\r\n    const load = async()=>{\r\n        setloading(true);\r\n        let res = await billing.getInvoicedData({id:Account.id});\r\n        if(res.success){ \r\n            setData(res.data); \r\n        }else{\r\n            setData(null);  \r\n        }\r\n        setloading(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(Account){\r\n            load()\r\n        }\r\n    },[Account])\r\n\r\n    const [expanded, setExpanded] = React.useState<number>(0);\r\n    const handleChange =(panel: number) =>{\r\n        if(panel == expanded)\r\n            setExpanded(0);\r\n        else\r\n            setExpanded(panel);\r\n    };\r\n\r\n    return (\r\n        <>            \r\n            {loading && <LinearProgress/>}\r\n            <br/>\r\n            {Data && Data.map((row:any,index:number)=>(\r\n            <Paper elevation={1} className=\"section mt-4\" style={{padding:'6px'}} >\r\n                <Accordion className=\"accordion\" expanded={(index+1) === expanded} onChange={()=>{handleChange((index+1))}}>\r\n                    <AccordionSummary>\r\n                        <h4> {util.format.MM_YYYY(row.invoice.date)} <span>{util.format.currency(row.invoice.amount)}</span></h4>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                    <TableContainer component={Paper}>\r\n                        <Table size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Name</TableCell>\r\n                                    <TableCell align=\"right\">Quantity</TableCell>\r\n                                    <TableCell align=\"right\">Unit Price</TableCell>\r\n                                    <TableCell align=\"right\">Total</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                            {row.invoice.lineitems.map((item,index) => (\r\n                                <TableRow\r\n                                key={index}\r\n                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                                >\r\n                                <TableCell component=\"th\" scope=\"row\">{item.name}</TableCell>\r\n                                <TableCell align=\"right\">{item.quantity}</TableCell>\r\n                                <TableCell align=\"right\">{util.format.currency(item.unitPrice)}</TableCell>\r\n                                <TableCell align=\"right\">{util.format.currency(item.total)}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                        </TableContainer>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n              </Paper>\r\n            ))}\r\n\r\n            {Account && (!Data || Data.length == 0 ) && !loading && \r\n                <AlertMessage message={{type:'warning',message:'Invoice data for selected account does not exists'}} />\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvoiceListing;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\ThirdPartyData.tsx",["1710","1711","1712","1713","1714"],"import React,{useState,useMemo,useEffect} from \"react\";\r\nimport LabelFieldsListing from \"../../components/LabelFieldsListing\";\r\nimport Tabs from '../../core/Tabs';\r\nimport sfdc from '../../services/sfdc';\r\nimport ContactPreview from \"./contact/ContactPreview\";\r\nimport EventPreview from \"./event/EventPreview\";\r\nimport OpportunityPreview from \"./opportunity/OpportunityPreview\";\r\n\r\nconst ThirdPartyData = (props:any)=>{\r\n    const {id} = props;\r\n    const [data,setData] = useState<any>();\r\n    \r\n    const load = async()=>{\r\n        setData(null);\r\n        let res:any = await sfdc.get3rdOartiesData(id);\r\n        if(res.success){\r\n            setData(res.data);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(id)\r\n            load();\r\n        return () => {\r\n        }\r\n    }, [id])\r\n    return (\r\n        <>\r\n            {data?\r\n            <>\r\n                <h4>3rd Party Data Enrichment</h4>\r\n                <Tabs\r\n                    tabs={[\r\n                        {title:'LEANDATA',component: <LabelFieldsListing fields={data.leanData} noOfColumn={3} /> },\r\n                        {title:'ZOOMINFO',component:<LabelFieldsListing fields={data.zoomInfo} noOfColumn={3} />},\r\n                        {title:'6SENSE',component:<LabelFieldsListing fields={data.sixSense} noOfColumn={3} /> },\r\n                        {title:'6QA',component:<LabelFieldsListing fields={data.sixQA} noOfColumn={3} /> }\r\n                    ]}\r\n                />\r\n            </>\r\n            :null}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ThirdPartyData;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\AIML.tsx",["1715","1716","1717","1718","1719","1720","1721"],"import { Divider, Grid, Icon, Paper,Box, Stack } from '@mui/material';\r\nimport React,{useState,useEffect,useRef} from 'react';\r\nimport LinearProgress, { LinearProgressProps } from '@mui/material/LinearProgress';\r\nimport Slider from '@mui/material/Slider';\r\nimport aiml from '../../services/aiml';\r\n\r\nimport loading from '../../assets/images/ai-loading.gif';\r\n\r\ndeclare global {\r\n    interface Window {}\r\n}\r\n\r\nconst marks = [\r\n    {\r\n      value: 1,\r\n      label: '1',\r\n    },\r\n    {\r\n      value: 4,\r\n      label: '4',\r\n    },\r\n    {\r\n      value: 8,\r\n      label: '8',\r\n    },\r\n    {\r\n      value: 12,\r\n      label: '12',\r\n    },\r\n];\r\n\r\nconst AIML = (props:any)=>{\r\n    const {id} = props;\r\n    const [data,setData] = useState<any>();\r\n    \r\n    const load = async()=>{\r\n        setData(null);\r\n        let res:any = await aiml.getAccountProductRecommendation(id);\r\n        if(res.success){\r\n            setData(res.data);\r\n        }\r\n    }\r\n     \r\n    useEffect(() => {\r\n        if(id)\r\n            load(); \r\n    }, [id])\r\n    \r\n    function valuetext(value: number) {\r\n        return `${value}`;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {data && \r\n            <>\r\n            <h4>AL/ML Insights</h4>\r\n            <Paper elevation={1} className=\"section mt-22\">\r\n                <h4>Existing Products</h4>\r\n                <Divider/><br/>\r\n                <Grid container spacing={3}>\r\n                    {data.currentProduct && data.currentProduct.map((p:string,index:number)=>(\r\n                        <>\r\n                            {p.trim()!=\"None\"  && \r\n                                <Grid item md={4} key={index}>\r\n                                    <Paper elevation={2} className=\"section product bg-lg\" >                            \r\n                                        <Icon>arrow_right</Icon> {p}\r\n                                    </Paper>\r\n                                </Grid>\r\n                        }\r\n                        </>\r\n                    ))}\r\n                </Grid>\r\n                {data.currentProduct && data.recommendedProducts.length > 0 && \r\n                <div className=\"fade-in-slow\">    \r\n                    <br/><Divider/>\r\n                    <h4>Recommendated Products & Month</h4>\r\n                    <Divider/><br/>\r\n                    <Grid container spacing={3}>\r\n                        {data.currentProduct && data.recommendedProducts.map((recm:any,index:number)=>(\r\n                            \r\n                            <Grid item md={4} key={index}>\r\n                                <Paper elevation={2} className=\"section product bg-lb\" >                            \r\n                                    <Icon>arrow_right</Icon> {recm.product}\r\n                                </Paper>\r\n                                <br/>\r\n                                <Stack direction=\"row\" justifyContent=\"center\">\r\n                                    <Slider sx={{width:'80%'}}\r\n                                        size=\"small\"\r\n                                        aria-label=\"Restricted values\"\r\n                                        defaultValue={recm.months}\r\n                                        getAriaValueText={valuetext}\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        step={1}\r\n                                        marks={marks}\r\n                                        min={1}\r\n                                        max={12}\r\n                                    />\r\n                                </Stack>\r\n                            </Grid>    \r\n                        ))}\r\n                        \r\n                    </Grid>\r\n                </div>\r\n                } \r\n            </Paper>\r\n            </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Loader = ()=>{\r\n    return (\r\n        <>\r\n        <br/><br/><LinearProgress /><br/> <div style={{textAlign:'center',fontSize:'12px'}}>Fetching AI/ML Insight</div>\r\n        <div style={{textAlign:'center'}}><img src={loading} width={200}/></div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AIML;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\RelatedRecords.tsx",["1722","1723"],"import React,{useState,useMemo,useEffect} from \"react\";\r\nimport Tabs from '../../core/Tabs';\r\nimport sfdc from '../../services/sfdc';\r\nimport ContactPreview from \"./contact/ContactPreview\";\r\nimport EventPreview from \"./event/EventPreview\";\r\nimport OpportunityPreview from \"./opportunity/OpportunityPreview\";\r\n\r\nconst RelatedRecords = (props:any)=>{\r\n    const {id} = props;\r\n    const [data,setData] = useState<any>();\r\n    \r\n    const load = async()=>{\r\n        setData(null);\r\n        let res:any = await sfdc.getAccountRelatedDocs(id);\r\n        if(res.success){\r\n            setData(res.data);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(id)\r\n            load();\r\n        return () => {\r\n        }\r\n    }, [id])\r\n    return (\r\n        <>\r\n            {data?\r\n            <>\r\n                <h4>Related Records</h4>\r\n                <Tabs\r\n                    tabs={[\r\n                        {title:'Contacts',component: <ContactPreview data={data.contact} /> },\r\n                        {title:'Opportunities',component:<OpportunityPreview data={data.opportunity} />},\r\n                        {title:'Events',component:<EventPreview data={data.event} /> }\r\n                    ]}\r\n                />\r\n            </>\r\n            :null}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default RelatedRecords;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\Summary.tsx",["1724","1725"],"import { Button, Chip, Divider, Grid, Icon, LinearProgress, Paper, Skeleton, Stack } from \"@mui/material\";\r\nimport React, { useState, useMemo, useEffect } from \"react\";\r\nimport LabelFieldsListing from \"../../components/LabelFieldsListing\";\r\nimport ModalDialog from \"../../components/ModalDialog\";\r\n\r\nimport sfdc from '../../services/sfdc'\r\n\r\nimport u from '../../services/util';\r\nimport ViewAccount from \"./account/ViewAccount\";\r\n\r\nconst Summary = (props: any) => {\r\n    const { id } = props;\r\n\r\n    const [Data, setData] = useState<any>();\r\n    const [ViewAll, setViewAll] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const loadData = async () => {\r\n        setData(null);\r\n        setLoading(true)\r\n        let res: any = await sfdc.accountSummary(id);\r\n        if (res.success) {\r\n            setData(res.data);\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadData();\r\n        }\r\n    }, [id])\r\n\r\n    const handlerViewAll = () => {\r\n        setViewAll(true)\r\n    }\r\n    const handlerCloseViewAll = () => {\r\n        setViewAll(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <LinearProgress style={{ display: (loading ? '' : 'none') }} />\r\n\r\n            {!Data && loading && <Loader />}\r\n\r\n            {Data &&\r\n                <>\r\n                    <div className={`fade-in`}>\r\n                        <Paper elevation={1} className=\"section mt-10\">\r\n                            <h2 style={{ textAlign: 'center', paddingBottom: '10px' }}>{Data.basicInfo.Name}</h2>\r\n                        </Paper>\r\n                        \r\n                        <h4 style={{ textAlign: 'left' }}>Account Summary</h4>\r\n                        <Paper elevation={1} className=\"section mt-10\">\r\n\r\n                            <Grid container spacing={3} >\r\n                                <Grid item xs={4}>\r\n                                <Chip icon={<Icon>event</Icon>} label={`Events (${Data.summary.Events})`} variant=\"filled\" style={{ fontSize: '13px'}} />\r\n                                <Divider orientation=\"vertical\" flexItem></Divider>\r\n                                <Chip icon={<Icon>contacts</Icon>} label={`Contacts (${Data.summary.Contacts})`} variant=\"filled\" style={{ fontSize: '13px',marginTop:'5px'  }} />\r\n                                <Divider orientation=\"vertical\" flexItem></Divider>\r\n                                <Chip icon={<Icon>library_add_check</Icon>} label={`Opportunities (${Data.summary.Opportunities})`} variant=\"filled\" style={{ fontSize: '13px',marginTop:'5px'  }} />\r\n                               \r\n                                </Grid>\r\n\r\n                                <Grid item xs={4}>\r\n                                <Divider orientation=\"vertical\" flexItem></Divider>\r\n                                <Chip icon={<Icon>support_agent</Icon>} label={`Tasks (${Data.summary.Tasks} )`} variant=\"filled\" style={{ fontSize: '13px' }} />\r\n                                <Divider orientation=\"vertical\" flexItem></Divider>\r\n                                 <Chip icon={<Icon>person_pin</Icon>} label={`Account Owner: ${u.ifNull(Data.summary.AccountOwner) || \"-\"}`} variant=\"filled\" style={{ fontSize: '13px',marginTop:'5px' }} />\r\n                                <Divider orientation=\"vertical\" flexItem></Divider>\r\n                                <Chip icon={<Icon>engineering</Icon>} label={`Primary Sales Engineer: ${u.ifNull(Data.summary.PrimarySalesEngineer) || \"-\"}`} variant=\"filled\" style={{ fontSize: '13px',marginTop:'5px' }} />\r\n                                \r\n                               \r\n                                </Grid>\r\n\r\n                                <Grid item xs={4}>\r\n                                <Divider orientation=\"vertical\" flexItem></Divider>\r\n                                <Chip icon={<Icon>manage_accounts</Icon>} label={`Solutions Architect: ${u.ifNull(Data.summary.SolutionsArchitect) || \"-\"} `} variant=\"filled\" style={{ fontSize: '13px' }} />\r\n                                </Grid>\r\n                                \r\n                            </Grid>\r\n                           \r\n                        </Paper>\r\n\r\n                        <h4>Basic Information</h4>\r\n                        <Paper elevation={1} className=\"section mt-22\">\r\n\r\n                            <LabelFieldsListing fields={Data.basicInfo} noOfColumn={3} />\r\n\r\n                            <Stack className=\"mt-10\" direction=\"row\" spacing={2} justifyContent=\"flex-end\">\r\n                                <Button variant=\"outlined\" size=\"small\" onClick={handlerViewAll}>View All</Button>\r\n                            </Stack>\r\n                            <ModalDialog\r\n                                open={ViewAll}\r\n                                title=\"Account Detail\"\r\n                                component={<ViewAccount id={id} />}\r\n                                onClose={handlerCloseViewAll}\r\n                            />\r\n                        </Paper>\r\n                    </div>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst Loader = ()=>{\r\n    return (\r\n        <>\r\n        <Paper elevation={1} className=\"section mt-10\">\r\n                <Stack direction=\"row\" justifyContent=\"center\">\r\n                    <Skeleton variant=\"rectangular\" width={200} height={10}/>\r\n                </Stack><br/>\r\n                <Stack direction=\"row\" justifyContent=\"center\">\r\n                    <Skeleton variant=\"rectangular\" width={800} height={10}/>\r\n                </Stack>\r\n            </Paper>\r\n            <h4>Basic Information</h4>\r\n            <Paper elevation={1} className=\"section mt-22\">\r\n                <Grid container spacing={8}>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                    <Grid md={4} item><Skeleton variant=\"rectangular\"  height={10}/></Grid>\r\n                </Grid>\r\n            </Paper>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Summary;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\usage\\monthlyComparison\\ComparasionGraphs.tsx",["1726","1727"],"import { Grid, LinearProgress, Paper, Stack } from \"@mui/material\";\r\nimport React, { Suspense, useState, useEffect } from \"react\";\r\nimport AreaStacked from \"../../../../components/graphs/AreaStacked\";\r\nimport billing from \"../../../../services/billing\";\r\nimport AlertMessage, { ALERT_TYPE } from \"../../../../components/AlertMessage\";\r\nimport { ACCOUNT_DESCRIPTION } from \"../../../../const\";\r\n\r\nconst ComparasionGraphs = ({ AccountID, Period }) => {\r\n  const [loading, setloading] = useState<boolean>(false);\r\n  const [Data, setData] = useState<any>(null);\r\n\r\n  const load = async () => {\r\n    setloading(true);\r\n    let data: any = {};\r\n    let resMatrix = await billing.usageMetrix({\r\n      id: AccountID,\r\n      period: Period,\r\n    });\r\n    let resMatrixOther = await billing.usageMetrixOthers({\r\n      id: AccountID,\r\n      period: Period,\r\n    });\r\n    let resMetrixAdditional = await billing.usageMetrixAdditional({\r\n      id: AccountID,\r\n      period: Period,\r\n    });\r\n    if (resMatrix.success) {\r\n      data = resMatrix.data;\r\n      if (resMatrixOther.success) {\r\n        data = { ...data, ...resMatrixOther.data };\r\n      }\r\n      if (resMetrixAdditional.success) {\r\n        data = { ...data, ...resMetrixAdditional.data };\r\n      }\r\n      if (Object.keys(data).length > 0) setData(data);\r\n      else setData(null);\r\n    } else {\r\n      setData(null);\r\n    }\r\n    setloading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(Data);\r\n  }, [Data]);\r\n\r\n  useEffect(() => {\r\n    if (AccountID) load();\r\n    return () => {};\r\n  }, [AccountID, Period]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      <Grid container spacing={3}>\r\n        {Data &&\r\n          Object.keys(Data).map((key, index) => (\r\n            <>\r\n              {Data[key].total > 0 && (\r\n                <Grid item md={6} lg={6} xs={12}>\r\n                  {Data[key].cat.length >= 60 ? (\r\n                    <Paper key={index} elevation={1} className=\"section mt-10\">\r\n                      <Suspense\r\n                        fallback={\r\n                          <Stack justifyContent=\"center\" direction=\"row\">\r\n                            Loading...\r\n                          </Stack>\r\n                        }\r\n                      >\r\n                        <AreaStacked\r\n                          category={Data[key].cat}\r\n                          data={Data[key].series}\r\n                          title={key}\r\n                          total={Data[key].total}\r\n                          period={Period}\r\n                          description={ACCOUNT_DESCRIPTION}\r\n                        />\r\n                      </Suspense>\r\n                    </Paper>\r\n                  ) : (\r\n                    <AlertMessage\r\n                      type={ALERT_TYPE.WARNING}\r\n                      message={`Data is not enough for comparison`}\r\n                    />\r\n                  )}\r\n                </Grid>\r\n              )}\r\n            </>\r\n          ))}\r\n      </Grid>\r\n      <br />\r\n      {!loading && Data == null && AccountID != \"\" && (\r\n        <AlertMessage\r\n          type={ALERT_TYPE.WARNING}\r\n          message={`Data is not available for perticular account`}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComparasionGraphs;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\AIML\\graphs\\GraphUpSell.tsx",["1728","1729","1730"],"import { Divider, LinearProgress, Paper } from \"@mui/material\";\r\nimport React,{useState,useMemo,useEffect} from \"react\";\r\n\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsHeatmap from \"highcharts/modules/heatmap\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nimport aiml from '../../../services/aiml';\r\n\r\nlet options:any = {\r\n    credits: {\r\n        enabled: false\r\n    },\r\n    chart: {\r\n        type: 'column'\r\n    },\r\n    title: {\r\n        text: ''\r\n    },\r\n    subtitle: {\r\n        text: ''\r\n    },\r\n    accessibility: {\r\n        announceNewData: {\r\n            enabled: true\r\n        }\r\n    },\r\n    xAxis: {\r\n        type: 'category',\r\n        title: {\r\n            text: 'Products'\r\n        }\r\n    },\r\n    yAxis: {\r\n        title: {\r\n            text: 'Months'\r\n        }\r\n\r\n    },\r\n    legend: {\r\n        enabled: false\r\n    },\r\n    plotOptions: {\r\n        series: {\r\n            borderWidth: 0,\r\n            dataLabels: {\r\n                enabled: false,\r\n                format: '{point.y:.1f}%'\r\n            }\r\n        }\r\n    },\r\n\r\n    tooltip: {\r\n        enabled:false,\r\n        headerFormat: '<span style=\"font-size:11px\">{series.name}</span><br>',\r\n        pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}%</b> of total<br/>'\r\n    },\r\n\r\n    series: [\r\n        {\r\n            name: \"\",\r\n            colorByPoint: false,\r\n            color:'#e24406',\r\n            data: [\r\n                \r\n            ]\r\n        }\r\n    ],\r\n     \r\n};\r\n\r\nconst GraphUpSell = ()=>{\r\n     \r\n    const [loading,setloading] = useState(false);\r\n    const [ShowGraph,setShowGraph] = useState<boolean>(false);\r\n    const load = async()=>{\r\n        setloading(true);\r\n        let res:any = await aiml.getUpSell();\r\n        if(res.success && res.data){\r\n            console.log(res)\r\n            for(let p of res.data){\r\n                console.log(p)\r\n                options.series[0].data.push({\r\n                    name:p.productName,\r\n                    y:p.months\r\n                });    \r\n            }\r\n            \r\n            setShowGraph(true)\r\n        }\r\n        setloading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        load();\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n    \r\n  \r\n    return(\r\n        <>\r\n        <h2>Up-Sell</h2>\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                {loading && <LinearProgress />}\r\n                {!loading && ShowGraph &&\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options}\r\n                />\r\n                }\r\n            </Paper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GraphUpSell;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\AIML\\graphs\\GraphCrossSell.tsx",["1731","1732"],"import { Divider, LinearProgress, Paper } from \"@mui/material\";\r\nimport React,{useState,useMemo,useEffect} from \"react\";\r\n\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsHeatmap from \"highcharts/modules/heatmap\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nimport aiml from '../../../services/aiml';\r\n\r\nlet options:any = {\r\n    credits: {\r\n        enabled: false\r\n    },\r\n    chart: {\r\n        type: 'heatmap',\r\n        marginTop: 40,\r\n        marginBottom: 80,\r\n        plotBorderWidth: 0,\r\n        borderWidth:0,\r\n    },\r\n    title: {\r\n        text: ''\r\n    },\r\n    xAxis: {\r\n        categories: [],\r\n        labels:{\r\n            autoRotation:[-16]\r\n        },\r\n        title: {\r\n            text: 'Products'\r\n        }\r\n    },\r\n    yAxis: {\r\n        categories: [],\r\n        title: {\r\n            text: 'Products'\r\n        },\r\n        reversed: true\r\n    },\r\n    accessibility: {\r\n        point: {\r\n            descriptionFormatter: function (point) {\r\n                var ix = point.index + 1,\r\n                xName = getPointCategoryName(point, 'x'),\r\n                yName = getPointCategoryName(point, 'y'),\r\n                val = point.value;\r\n                return ix + '. ' + xName + ' sales ' + yName + ', ' + val + '.';    \r\n            }\r\n        }\r\n    },\r\n    colorAxis: {\r\n        min: 0,\r\n        minColor: '#ffe6e0',\r\n        maxColor: '#e04626',  \r\n    },\r\n    legend: {\r\n        align: 'right',\r\n        layout: 'vertical',\r\n        margin: 0,\r\n        verticalAlign: 'top',\r\n        y: 25,\r\n        symbolHeight: 280,\r\n    },\r\n    tooltip: {\r\n        formatter() {\r\n        let t:any = this || {};\r\n        return '<b>' + getPointCategoryName(t.point, 'x') + '</b> | <b>' + getPointCategoryName(t.point, 'y') + '</b>: ' + t.point.value;\r\n        }\r\n    },\r\n    series: [{\r\n        name: 'cross sell',\r\n        borderWidth: 1,\r\n        borderColor:'#fff3f0',\r\n        data: [],\r\n        pointPadding: 0,\r\n        rowSize:3,\r\n        dataLabels: {\r\n            margin:4,\r\n            enabled: true,\r\n            style:{\r\n                textOutline:'none',\r\n                padding:'3px',\r\n                margin:'10px'\r\n            }\r\n        },\r\n        \r\n    }],\r\n    responsive: {\r\n        rules: [{\r\n        condition: {\r\n            maxWidth: 500\r\n        },\r\n        chartOptions: {\r\n            yAxis: {\r\n            labels: {\r\n                formatter: function (value) {\r\n                    return value.charAt(0);\r\n                }\r\n            }\r\n            }\r\n        }\r\n        }]\r\n    }\r\n};\r\n\r\nfunction getPointCategoryName(point, dimension) {   \r\n    var series = point.series,\r\n        isY = dimension === 'y',\r\n        axis = series[isY ? 'yAxis' : 'xAxis'];\r\n    return axis.categories[point[isY ? 'y' : 'x']];\r\n}\r\n\r\nconst GraphCrossSell = ()=>{\r\n    HighchartsHeatmap(Highcharts);\r\n    const [loading,setloading] = useState(false);\r\n    const [ShowGraph,setShowGraph] = useState<boolean>(false);\r\n    const load = async()=>{\r\n        setloading(true);\r\n        let res:any = await aiml.getCrossSell();\r\n        if(res.success){\r\n            for(let cat of res.data.productNames){\r\n                options.xAxis.categories.push(cat);\r\n                options.yAxis.categories.push(cat);\r\n            }            \r\n            res.data.crossSellDtoArrayList.forEach((rel:any,rowIndex:number)=>{\r\n                rel.productRelation.relationalValue.forEach((val,colIndex:number)=>{\r\n                    \r\n                    let arr:number[] = []\r\n                    arr = [rowIndex,colIndex,val];\r\n                    options.series[0].data.push(arr);\r\n                });\r\n            });\r\n            setShowGraph(true)\r\n        }\r\n        setloading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        load();\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n    \r\n  \r\n    return(\r\n        <>\r\n            <h2>Cross-Sell <span>Cross-Sell the customers with respect to the most related products, while segementing the customers by industry or sub-industry and various other paramerters.</span></h2>\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n            \r\n                {loading && <LinearProgress />}\r\n                {ShowGraph &&\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options}\r\n                />\r\n                }\r\n            </Paper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GraphCrossSell;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\products\\Listing.tsx",["1733","1734","1735","1736","1737","1738","1739","1740","1741","1742","1743","1744","1745","1746","1747","1748","1749","1750","1751","1752","1753","1754","1755","1756"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@mui/material';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable, { ExpanderComponentProps,TableRow }  from 'react-data-table-component';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {USER_TYPE} from '../../../const';\r\n\r\nconst Listing = (props:any)=>{\r\n    const [tagDialog,setTagDialog]:any = useState({open:false,row:{}});\r\n    \r\n    const handlerShowTagDialog = (row:any)=>{\r\n        setTagDialog({...tagDialog,open:true,row:row});\r\n    }\r\n    const [rows, setRows] = useState([\r\n        {\r\n            id: 0,\r\n            Name: 'Iphone xs',\r\n            Vendor: \"0900078501\",\r\n            Description: 'Not Required',\r\n            CreatedOn: '3/16/2022',\r\n        },\r\n        {\r\n            id: 1,\r\n            Name: 'Hp omen',\r\n            Vendor: \"0900078501\",\r\n            Description: 'Not Required',\r\n            CreatedOn: '3/16/2022',\r\n        }\r\n    ]);\r\n \r\n    \r\n    const columns:any = [\r\n        {\r\n            name: 'Product Id',\r\n            selector: 'ProductID',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Vendor ID',\r\n            selector: 'VendorID',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Product Name',\r\n            selector: 'ProductName',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Description',\r\n            selector: 'Description',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200\r\n        },\r\n        {\r\n            name: 'Created On',\r\n            selector: 'CreatedOn',\r\n            compact:true,\r\n            width:'120px',\r\n            hide:1200,\r\n            cell:(row:any)=><>{u.format.date(row.Date)}</>\r\n        },\r\n        {\r\n            name: '',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                {row.UserType != USER_TYPE.OKTA && \r\n                    <>\r\n                    <Tooltip title=\"Edit\" >\r\n                        <IconButton size=\"small\" className=\"action\" component={RLink} to={`/supplierportal/products/id/${row.ProductID}`}>\r\n                            <Icon className=\"icon-green\">edit</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                \r\n                    {row.Deleted?\r\n                        <Tooltip title=\"Activate\">\r\n                            <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onActivate(row)}} >\r\n                                <Icon className=\"icon-red\">undo</Icon>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    :\r\n                        <Tooltip title=\"Delete\">\r\n                            <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onDelete(row)}} >\r\n                                <Icon className=\"icon-red\">delete_forever</Icon>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    }\r\n                    </>\r\n                }\r\n                </>\r\n          }\r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data?.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props?.data?.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            expandableRows\r\n            expandableRowsComponent={ExpandedComponent}\r\n            \r\n        />\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nconst ExpandedComponent:React.FC<ExpanderComponentProps<TableRow>> = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n            <div className=\"field\">\r\n                    <span className=\"key\">ProductId:</span>\r\n                    <div className=\"value\"> {data.ProductID} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">VendorId:</span>\r\n                    <div className=\"value\"> {data.VendorID} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Product Name:</span>\r\n                    <div className=\"value\"> {data.ProductName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Description:</span>\r\n                    <div className=\"value\"> {data.Description} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Created:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateCreated)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Created By:</span>\r\n                    <div className=\"value\"> {data.CreatedByUser?data.CreatedByUser.FullName:''} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Updated:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateModified)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Modified By:</span>\r\n                    <div className=\"value\"> {data.ModifiedByUser?data.ModifiedByUser.FullName:''} </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Listing;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\products\\Filter.tsx",["1757","1758","1759","1760","1761","1762","1763","1764","1765","1766"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField,Stack} from '@mui/material';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport ModalDialog from '../../../components/ModalDialog';\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n    const [UserType,setUserType] = useState('active');\r\n    useEffect(()=>{\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({userType:UserType,term:Term,page:1});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        setUserType('active');\r\n        props.onSearch({userType:'active',term:'',page:1});\r\n    }\r\n\r\n    const [Status,setStatus] = useState('')\r\n    const[ShowAccountSelector, setShowAccountSelector] = useState<boolean>(false);\r\n\r\n    const handlerChangeStatus = (e:any)=> setStatus(e.target.value);\r\n    const handlerChangeTerm = (e:any)=> setTerm(e.target.value)\r\n\r\n    const handlerClickSearch = ()=>{\r\n        props.onChangeFilter({page:1,status:Status,term:Term});\r\n    }\r\n\r\n    const handlerClickClear = ()=>{\r\n        props.onChangeFilter({status:'',page:1});\r\n        setTerm('');\r\n        setStatus('');\r\n    }\r\n\r\n\r\n    const handlerShowAccountSelector = ()=> setShowAccountSelector(true);\r\n    const handlerOnCloseAccountSelector = ()=> setShowAccountSelector(false);\r\n \r\n    return (\r\n        <>\r\n        <Grid container spacing={3} >\r\n            <Grid item md={3} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Name\"\r\n                    value={Term}\r\n                    onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Status</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setUserType(e.target.value)}}\r\n                        value={UserType}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"active\" key=\"active\">Active</MenuItem>\r\n                        <MenuItem value=\"deleted\" key=\"deleted\">Deleted</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button onClick={handlerSearch} size=\"large\" variant=\"contained\" color=\"primary\">\r\n                    <Icon>search</Icon>\r\n                </Button> &nbsp;\r\n                <Button onClick={handlerClear} size=\"large\" variant=\"contained\">\r\n                    <Icon>settings_backup_restore</Icon>\r\n                </Button>\r\n            </Grid> \r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button variant=\"contained\" size=\"large\" color=\"secondary\" component={RLink} to=\"/supplierportal/products/id/\">\r\n                    <Icon>add</Icon>\r\n                </Button>\r\n            </Grid> \r\n        </Grid>\r\n    </>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\vendors\\Listing.tsx",["1767","1768","1769","1770","1771","1772","1773","1774","1775","1776","1777","1778","1779","1780","1781","1782","1783","1784","1785","1786","1787","1788","1789","1790"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@mui/material';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable, { ExpanderComponentProps,TableRow }  from 'react-data-table-component';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {USER_TYPE} from '../../../const';\r\n\r\nconst Listing = (props:any)=>{\r\n    const [tagDialog,setTagDialog]:any = useState({open:false,row:{}});\r\n    \r\n    const handlerShowTagDialog = (row:any)=>{\r\n        setTagDialog({...tagDialog,open:true,row:row});\r\n    }\r\n    const [rows, setRows] = useState([\r\n        {\r\n            id: 0,\r\n            Name: 'John',\r\n            Address: '21 baker street',\r\n            Phone: \"0900078501\",\r\n            Date: '3/16/2022',\r\n            Trackinginfo: 'Not Required',\r\n            Website: 'www.aviatrix.com',\r\n        },\r\n        {\r\n            id: 1,\r\n            Name: 'Aviatrix',\r\n            Address: '21 baker street',\r\n            Phone: \"0900078501\",\r\n            Date: '3-16-2022',\r\n            Trackinginfo: 'Not Required',\r\n            Website: 'www.aviatrix.com',\r\n        }\r\n    ]);\r\n \r\n    \r\n    const columns:any = [\r\n        {\r\n            name: 'Vendor Id',\r\n            selector: 'VendorID',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'User Id',\r\n            selector: 'UserID',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Vendor Name',\r\n            selector: 'VendorName',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Address',\r\n            selector: 'Address',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200\r\n        },\r\n        {\r\n            name: 'Phone',\r\n            selector: 'Phone',\r\n            width:'120px',\r\n            compact:true,\r\n            hide:1200,\r\n            //cell:(row:any)=><>{u.format.datetime(row.ModifiedBy)}</>\r\n        },\r\n        {\r\n            name: 'Created Date',\r\n            selector: 'Date',\r\n            compact:true,\r\n            width:'120px',\r\n            hide:1200,\r\n            cell:(row:any)=><>{u.format.date(row.Date)}</>\r\n        },\r\n        {\r\n            name: 'Website',\r\n            selector: 'Website',\r\n            width:'120px',\r\n            compact:true,\r\n            hide:1200,\r\n            //cell:(row:any)=><>{u.format.datetime(row.ModifiedBy)}</>\r\n        },\r\n        {\r\n            name: '',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                {row.UserType != USER_TYPE.OKTA && \r\n                    <>\r\n                    <Tooltip title=\"Edit\" >\r\n                        <IconButton size=\"small\" className=\"action\" component={RLink} to={`/supplierportal/vendors/id/${row.VendorID}`}>\r\n                            <Icon className=\"icon-green\">edit</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                \r\n                    {row.Deleted?\r\n                        <Tooltip title=\"Activate\">\r\n                            <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onActivate(row)}} >\r\n                                <Icon className=\"icon-red\">undo</Icon>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    :\r\n                        <Tooltip title=\"Delete\">\r\n                            <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onDelete(row)}} >\r\n                                <Icon className=\"icon-red\">delete_forever</Icon>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    }\r\n                    </>\r\n                }\r\n                </>\r\n          }\r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data?.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data?.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            expandableRows\r\n            expandableRowsComponent={ExpandedComponent}\r\n            \r\n        />\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nconst ExpandedComponent:React.FC<ExpanderComponentProps<TableRow>> = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n            <div className=\"field\">\r\n                    <span className=\"key\">VendorId:</span>\r\n                    <div className=\"value\"> {data.VendorID} </div>\r\n                </div>\r\n            <div className=\"field\">\r\n                    <span className=\"key\">UserId:</span>\r\n                    <div className=\"value\"> {data.UserID} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Full Name:</span>\r\n                    <div className=\"value\"> {data.VendorName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Address:</span>\r\n                    <div className=\"value\"> {data.Address} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Phone:</span>\r\n                    <div className=\"value\"> {data.Phone} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Created:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateCreated)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Created By:</span>\r\n                    <div className=\"value\"> {data.CreatedByUser?data.CreatedByUser.FullName:''} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Updated:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateModified)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Modified By:</span>\r\n                    <div className=\"value\"> {data.ModifiedByUser?data.ModifiedByUser.FullName:''} </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Listing;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\vendors\\Filter.tsx",["1791","1792","1793","1794","1795","1796","1797","1798","1799","1800"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField,Stack} from '@mui/material';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport ModalDialog from '../../../components/ModalDialog';\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n    const [UserType,setUserType] = useState('active');\r\n    useEffect(()=>{\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({userType:UserType,term:Term,page:1});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        setUserType('active');\r\n        props.onSearch({userType:'active',term:'',page:1});\r\n    }\r\n\r\n    const [Status,setStatus] = useState('')\r\n    const[ShowAccountSelector, setShowAccountSelector] = useState<boolean>(false);\r\n\r\n    const handlerChangeStatus = (e:any)=> setStatus(e.target.value);\r\n    const handlerChangeTerm = (e:any)=> setTerm(e.target.value)\r\n\r\n    const handlerClickSearch = ()=>{\r\n        props.onChangeFilter({page:1,status:Status,term:Term});\r\n    }\r\n\r\n    const handlerClickClear = ()=>{\r\n        props.onChangeFilter({status:'',page:1});\r\n        setTerm('');\r\n        setStatus('');\r\n    }\r\n\r\n\r\n    const handlerShowAccountSelector = ()=> setShowAccountSelector(true);\r\n    const handlerOnCloseAccountSelector = ()=> setShowAccountSelector(false);\r\n \r\n    return (\r\n        <>\r\n        <Grid container spacing={3} >\r\n            <Grid item md={3} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Name\"\r\n                    value={Term}\r\n                    onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Status</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setUserType(e.target.value)}}\r\n                        value={UserType}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"active\" key=\"active\">Active</MenuItem>\r\n                        <MenuItem value=\"deleted\" key=\"deleted\">Deleted</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button onClick={handlerSearch} size=\"large\" variant=\"contained\" color=\"primary\">\r\n                    <Icon>search</Icon>\r\n                </Button> &nbsp;\r\n                <Button onClick={handlerClear} size=\"large\" variant=\"contained\">\r\n                    <Icon>settings_backup_restore</Icon>\r\n                </Button>\r\n            </Grid> \r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button variant=\"contained\" size=\"large\" color=\"secondary\" component={RLink} to=\"/supplierportal/vendors/id/\">\r\n                    <Icon>add</Icon>\r\n                </Button>\r\n            </Grid> \r\n        </Grid>\r\n    </>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderTracking\\Filter.tsx",["1801","1802","1803","1804","1805","1806"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField,Stack} from '@mui/material';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport DialogAccountSelector from './DialogAccountSelector';\r\nimport ModalDialog from '../../../components/ModalDialog';\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n    const [UserType,setUserType] = useState('active');\r\n    useEffect(()=>{\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({userType:UserType,term:Term,page:1});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        setUserType('active');\r\n        props.onSearch({userType:'active',term:'',page:1});\r\n    }\r\n\r\n    const [Status,setStatus] = useState('')\r\n    const[ShowAccountSelector, setShowAccountSelector] = useState<boolean>(false);\r\n\r\n    const handlerChangeStatus = (e:any)=> setStatus(e.target.value);\r\n    const handlerChangeTerm = (e:any)=> setTerm(e.target.value)\r\n\r\n    const handlerClickSearch = ()=>{\r\n        props.onChangeFilter({page:1,status:Status,term:Term});\r\n    }\r\n\r\n    const handlerClickClear = ()=>{\r\n        props.onChangeFilter({status:'',page:1});\r\n        setTerm('');\r\n        setStatus('');\r\n    }\r\n\r\n\r\n    const handlerShowAccountSelector = ()=> setShowAccountSelector(true);\r\n    const handlerOnCloseAccountSelector = ()=> setShowAccountSelector(false);\r\n \r\n    return (\r\n        <>\r\n        <Grid container spacing={3} >\r\n            <Grid item md={3} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Name / Email\"\r\n                    value={Term}\r\n                    onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Status</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setUserType(e.target.value)}}\r\n                        value={UserType}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"active\" key=\"active\">Active</MenuItem>\r\n                        <MenuItem value=\"deleted\" key=\"deleted\">Deleted</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button onClick={handlerSearch} size=\"large\" variant=\"contained\" color=\"primary\">\r\n                    <Icon>search</Icon>\r\n                </Button> &nbsp;\r\n                <Button onClick={handlerClear} size=\"large\" variant=\"contained\">\r\n                    <Icon>settings_backup_restore</Icon>\r\n                </Button>\r\n            </Grid> \r\n            <Grid item md={5} sm={6} xs={6}>\r\n                    <Stack direction=\"row\" justifyContent=\"right\" >\r\n                        <Button variant=\"contained\" size=\"large\" color=\"secondary\" onClick={handlerShowAccountSelector}>\r\n                            <Icon>post_add</Icon> &nbsp; Create New Order\r\n                        </Button>\r\n                    </Stack>\r\n                </Grid> \r\n        </Grid>\r\n        <ModalDialog    \r\n        fullScreen={false}   \r\n        maxWidth=\"sm\"\r\n        title={`Create New Order`}\r\n        open={ShowAccountSelector}\r\n        component={<DialogAccountSelector onClose={handlerOnCloseAccountSelector}/>}\r\n        onClose={handlerOnCloseAccountSelector}\r\n    />\r\n    </>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderTracking\\Listing.tsx",["1807","1808","1809","1810","1811","1812","1813","1814","1815","1816","1817","1818","1819","1820","1821","1822","1823","1824","1825","1826","1827","1828","1829","1830","1831"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@mui/material';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable, { ExpanderComponentProps,TableRow }  from 'react-data-table-component';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {USER_TYPE} from '../../../const';\r\nimport DialogStatusSelector from './DialogStatusSelector';\r\nimport ModalDialog from '../../../components/ModalDialog';\r\n\r\nconst Listing = (props:any)=>{\r\n    const [tagDialog,setTagDialog]:any = useState({open:false,row:{}});\r\n    \r\n    const handlerShowTagDialog = (row:any)=>{\r\n        setTagDialog({...tagDialog,open:true,row:row});\r\n    }\r\n    const[ShowAccountSelector, setShowAccountSelector] = useState<boolean>(false);\r\n    const handlerShowAccountSelector = ()=> setShowAccountSelector(true);\r\n    const handlerOnCloseAccountSelector = ()=> {\r\n        setShowAccountSelector(false);\r\n        props.onSearch();\r\n    }\r\n    const [orderID,setOrderID]=useState<string | any>(null);\r\n    const [orderStatus,setorderStatus]=useState<string | any>(null);\r\n    const onOrderClick=(id,status)=>{\r\n        handlerShowAccountSelector();\r\n        setOrderID(id);\r\n        setorderStatus(status);\r\n    }\r\n    useEffect(() => {\r\n        console.log(props.data)\r\n        //console.log(props.onSearch())\r\n        //props.onSearch();\r\n    }, [props.data])\r\n    \r\n    const columns:any = [\r\n        {\r\n            name: 'Order Id',\r\n            selector: 'OrderID',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Order Title',\r\n            selector: (row)=>row.shipmentDetails.length!=0?row.shipmentDetails[0].Title:null,\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n       \r\n        {\r\n            name: 'Status',\r\n            selector:\"Status\",\r\n            compact:true,\r\n            width:'120px',\r\n            cell:(row:any)=><><div className={`status ${row.Status.toLowerCase()}`}>{row.Status}</div></>,\r\n            hide:1200,\r\n        },\r\n        {\r\n            name: 'Deliver To',\r\n            selector: (row)=>row.shipmentDetails.length!=0?row.shipmentDetails[0].DeliverTo:null,\r\n            compact:true,\r\n            width:'120px',\r\n            hide:1200,\r\n        },\r\n        {\r\n            name: 'Email',\r\n            selector: (row)=>row.shipmentDetails.length!=0?row.shipmentDetails[0].Email:null,\r\n            compact:true,\r\n            width:'120px',\r\n            hide:1200,\r\n        },\r\n        {\r\n            name: 'ShippingID',\r\n            selector: (row)=>row.shipmentDetails.length!=0?row.shipmentDetails[0].ShippingID:null,\r\n            compact:true,\r\n            width:'120px',\r\n            hide:1200,\r\n        },\r\n        // {\r\n        //     name: 'Shipping Date',\r\n        //     selector: 'Date',\r\n        //     compact:true,\r\n        //     width:'120px',\r\n        //     hide:1200,\r\n        //     cell:(row:any)=><>{u.format.date(row.Date)}</>\r\n        // },\r\n        {\r\n            name: 'Modified By',\r\n            selector: 'ModifiedBy',\r\n            width:'120px',\r\n            compact:true,\r\n            hide:1200,\r\n            //cell:(row:any)=><>{u.format.datetime(row.ModifiedBy)}</>\r\n        },\r\n        // {\r\n        //     name: 'Tracking Info',\r\n        //     selector: 'Trackinginfo',\r\n        //     width:'120px',\r\n        //     compact:true,\r\n        //     hide:1200,\r\n        //     //cell:(row:any)=><>{u.format.datetime(row.ModifiedBy)}</>\r\n        // },\r\n        // {\r\n        //     name: 'Order Status',\r\n        //     selector: 'Status',\r\n        //     width:'120px',\r\n        //     compact:true,\r\n        //     hide:1200,\r\n        //     //cell:(row:any)=><>{u.format.datetime(row.ModifiedBy)}</>\r\n        // },\r\n        {\r\n            name: '',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                {row.UserType != USER_TYPE.OKTA && \r\n                    <>\r\n                    <Tooltip title=\"Notification\" >\r\n                        <IconButton size=\"small\" className=\"action\" /*component={RLink} to={`/supplierportal/ordertracking/orderdetails/${row.OrderID}`}*/ onClick={()=>onOrderClick(row.OrderID,row.Status)}>\r\n                            <Icon className=\"icon-green\">notification_add</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Edit\" >\r\n                        <IconButton size=\"small\" className=\"action\" component={RLink} to={`/supplierportal/ordertracking/orderdetails/${row.OrderID}`}>\r\n                            <Icon className=\"icon-green\">edit</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                \r\n                    {row.Deleted?\r\n                        <Tooltip title=\"Activate\">\r\n                            <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onActivate(row)}} >\r\n                                <Icon className=\"icon-red\">undo</Icon>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    :\r\n                        <Tooltip title=\"Delete\">\r\n                            <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onDelete(row)}} >\r\n                                <Icon className=\"icon-red\">delete_forever</Icon>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    }\r\n                    </>\r\n                }\r\n                </>\r\n          }\r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data} //data={props.data?.rows}\r\n            highlightOnHover={true}\r\n            pagination\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data?.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            expandableRows\r\n            expandableRowsComponent={ExpandedComponent}\r\n            \r\n        />\r\n        \r\n        <ModalDialog    \r\n        fullScreen={false}   \r\n        maxWidth=\"sm\"\r\n        title={`Update Status`}\r\n        open={ShowAccountSelector}\r\n        component={<DialogStatusSelector status={orderStatus} id={orderID} onClose={handlerOnCloseAccountSelector} onSearch={props.onSearch}/>}\r\n        onClose={handlerOnCloseAccountSelector}\r\n       />\r\n        </>\r\n    )\r\n}\r\n\r\nconst ExpandedComponent:React.FC<ExpanderComponentProps<TableRow>> = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n            <div className=\"field\">\r\n                    <span className=\"key\">OrderId:</span>\r\n                    <div className=\"value\"> {data?.OrderID} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Full Name:</span>\r\n                    <div className=\"value\"> {data.AccountName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Email:</span>\r\n                    <div className=\"value\"> {data?.ContactEmail} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Active:</span>\r\n                    <div className=\"value\"> {data.Active?'True':'False'} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Created:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data?.DateCreated)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Created By:</span>\r\n                    <div className=\"value\"> {data.CreatedByUser?data.CreatedByUser.FullName:''} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Updated:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateModified)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Modified By:</span>\r\n                    <div className=\"value\"> {data.ModifiedByUser?data.ModifiedByUser.FullName:''} </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Listing;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\tags\\Listing.tsx",["1832","1833","1834","1835","1836","1837","1838","1839","1840","1841","1842","1843","1844","1845","1846","1847","1848","1849","1850","1851","1852","1853","1854","1855","1856"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@mui/material';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable, { ExpanderComponentProps,TableRow }  from 'react-data-table-component';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {USER_TYPE} from '../../../const';\r\nimport ModalDialog from '../../../components/ModalDialog';\r\nimport AccountTagForm from './form';\r\n\r\nconst Listing = (props:any)=>{\r\n    const [ViewAll,setViewAll] = useState(false);\r\n    const [DomainID,setDomainID] = useState();\r\n    const handlerCloseViewAll = ()=> setViewAll(false);\r\n    const handlerShowTagDialog = (row:any)=>{\r\n        setViewAll(true);\r\n        setDomainID(row.Id);\r\n    }\r\n\r\n    const columns:any = [\r\n        {\r\n          name: 'Account Name',\r\n          selector: 'Name',\r\n          compact:true,\r\n          //width:'170px',\r\n        },  \r\n        {\r\n            name: 'ID',\r\n            selector: 'Id',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Edit',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n               \r\n                    <>\r\n                    <Tooltip title=\"Edit\" >\r\n                        <IconButton size=\"small\" className=\"action\" onClick={()=>handlerShowTagDialog(row)}>\r\n                            <Icon className=\"icon-green\">edit</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                \r\n                    </>\r\n                \r\n                </>\r\n          }\r\n      ];\r\n    return(\r\n        <>\r\n        <ModalDialog \r\n                open={ViewAll} \r\n                title=\"Account Tags Assignment\"  \r\n                component={<AccountTagForm domainID={DomainID} closeModal={handlerCloseViewAll}/>}\r\n                onClose={handlerCloseViewAll}\r\n                fullScreen={false}\r\n                />\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n           \r\n            \r\n        />\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Listing;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\tags\\Filter.tsx",["1857","1858","1859","1860","1861","1862","1863","1864"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField} from '@mui/material';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { USER_TYPE } from '../../../const';\r\n\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n   \r\n    useEffect(()=>{\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({term:Term,page:1});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        props.onSearch({term:'',page:1});\r\n    }\r\n \r\n    return ( \r\n       \r\n                    <>\r\n                   <Grid container spacing={3} >\r\n                    <Grid item md={3} sm={6} xs={12}>\r\n                        <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Account Name\"\r\n                            value={Term}\r\n                            onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item md={2} sm={6} xs={6}>\r\n                        <Button onClick={handlerSearch} size=\"large\" variant=\"contained\" color=\"primary\">\r\n                            <Icon>search</Icon>\r\n                        </Button> &nbsp;\r\n                        <Button onClick={handlerClear} size=\"large\" variant=\"contained\">\r\n                            <Icon>settings_backup_restore</Icon>\r\n                        </Button>\r\n                    </Grid> \r\n                \r\n                </Grid>\r\n                </>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\adminUsers\\Listing.tsx",["1865","1866","1867","1868","1869","1870","1871","1872","1873","1874","1875","1876","1877","1878","1879","1880","1881","1882","1883","1884","1885","1886"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@mui/material';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable, { ExpanderComponentProps,TableRow }  from 'react-data-table-component';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {USER_TYPE} from '../../../const';\r\n\r\nconst Listing = (props:any)=>{\r\n    const [tagDialog,setTagDialog]:any = useState({open:false,row:{}});\r\n    \r\n    const handlerShowTagDialog = (row:any)=>{\r\n        setTagDialog({...tagDialog,open:true,row:row});\r\n    }\r\n\r\n    const columns:any = [\r\n        {\r\n          name: 'Full Name',\r\n          selector: 'FullName',\r\n          compact:true,\r\n          //width:'170px',\r\n        },  \r\n        {\r\n            name: 'Email',\r\n            selector: 'Email',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Role',\r\n            selector: 'Role',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200\r\n        },\r\n        {\r\n            name: 'Type',\r\n            selector: 'UserType',\r\n            compact:true,\r\n            hide:1200\r\n        },\r\n        {\r\n            name: 'Last Update',\r\n            selector: 'DateModified',\r\n            compact:true,\r\n            width:'120px',\r\n            hide:1200,\r\n            cell:(row:any)=><>{u.format.datetime(row.DateModified)}</>\r\n        },\r\n        {\r\n            name: 'Modified By',\r\n            selector: 'FullName',\r\n            width:'120px',\r\n            compact:true,\r\n            hide:1200,\r\n            //cell:(row:any)=><>{u.format.datetime(row.ModifiedBy)}</>\r\n        },\r\n        {\r\n            name: '',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                {row.UserType != USER_TYPE.OKTA && \r\n                    <>\r\n                    <Tooltip title=\"Edit\" >\r\n                        <IconButton size=\"small\" className=\"action\" component={RLink} to={`/admin/user/id/${row.UserID}`}>\r\n                            <Icon className=\"icon-green\">edit</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                \r\n                    {row.Deleted?\r\n                        <Tooltip title=\"Activate\">\r\n                            <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onActivate(row)}} >\r\n                                <Icon className=\"icon-red\">undo</Icon>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    :\r\n                        <Tooltip title=\"Delete\">\r\n                            <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onDelete(row)}} >\r\n                                <Icon className=\"icon-red\">delete_forever</Icon>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    }\r\n                    </>\r\n                }\r\n                </>\r\n          }\r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            expandableRows\r\n            expandableRowsComponent={ExpandedComponent}\r\n            \r\n        />\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nconst ExpandedComponent:React.FC<ExpanderComponentProps<TableRow>> = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n                \r\n                <div className=\"field\">\r\n                    <span className=\"key\">Full Name:</span>\r\n                    <div className=\"value\"> {data.FullName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Email:</span>\r\n                    <div className=\"value\"> {data.Email} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Type:</span>\r\n                    <div className=\"value\"> {data.UserType} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Active:</span>\r\n                    <div className=\"value\"> {data.Active?'True':'False'} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Created:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateCreated)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Created By:</span>\r\n                    <div className=\"value\"> {data.CreatedByUser?data.CreatedByUser.FullName:''} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Updated:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateModified)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Modified By:</span>\r\n                    <div className=\"value\"> {data.ModifiedByUser?data.ModifiedByUser.FullName:''} </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Listing;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\adminUsers\\Filter.tsx",["1887"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField} from '@mui/material';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n    const [UserType,setUserType] = useState('active');\r\n    useEffect(()=>{\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({userType:UserType,term:Term,page:1});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        setUserType('active');\r\n        props.onSearch({userType:'active',term:'',page:1});\r\n    }\r\n \r\n    return (\r\n        <Grid container spacing={3} >\r\n            <Grid item md={3} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Name / Email\"\r\n                    value={Term}\r\n                    onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Status</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setUserType(e.target.value)}}\r\n                        value={UserType}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"active\" key=\"active\">Active</MenuItem>\r\n                        <MenuItem value=\"deleted\" key=\"deleted\">Deleted</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button onClick={handlerSearch} size=\"large\" variant=\"contained\" color=\"primary\">\r\n                    <Icon>search</Icon>\r\n                </Button> &nbsp;\r\n                <Button onClick={handlerClear} size=\"large\" variant=\"contained\">\r\n                    <Icon>settings_backup_restore</Icon>\r\n                </Button>\r\n            </Grid> \r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button variant=\"contained\" size=\"large\" color=\"secondary\" component={RLink} to=\"/admin/user/id/\">\r\n                    <Icon>add</Icon>\r\n                </Button>\r\n            </Grid> \r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\aiml.ts",["1888"],"/**\r\n * Salesforce Service\r\n */\r\n\r\nimport client from './client';\r\n\r\nconst getAccountProductRecommendation = async(id:string)=>{\r\n    let res:any = await client.get('/aiml/recommendation',{id:id});\r\n    return res;\r\n}\r\n\r\n\r\nconst getCrossSell = async()=>{\r\n    let res:any = await client.get('/aiml/crosssell',{});\r\n    return res;\r\n}\r\nconst getUpSell = async()=>{\r\n    let res:any = await client.get('/aiml/upsell',{});\r\n    return res;\r\n}\r\n \r\nexport default {\r\n    getAccountProductRecommendation,\r\n    getCrossSell,getUpSell\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\core\\Tabs.tsx",["1889","1890"],"/**\r\n * Tabs \r\n * props\r\n *  - tabs [{title:'',component}]\r\n */\r\nimport { AppBar, Tabs as MUTabs , Tab,TableContainer , Paper, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React from 'react'\r\nimport SwipeableViews from 'react-swipeable-views';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    dir?: string;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\nreturn (\r\n    <div\r\n    role=\"tabpanel\"\r\n    hidden={value !== index}\r\n    id={`full-width-tabpanel-${index}`}\r\n    aria-labelledby={`full-width-tab-${index}`}\r\n    {...other}\r\n    >\r\n    {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n            <Typography>{children}</Typography>\r\n        </Box>\r\n    )}\r\n    </div>\r\n);\r\n}\r\n\r\nfunction a11yProps(index: number) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst Tabs = (props:any)=>{\r\n\r\n    const {tabs} = props;\r\n    const [value, setValue] = React.useState(0);\r\n    const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n    const handleChangeIndex = (index: number) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return(\r\n        <>\r\n            <Box sx={{ bgcolor: 'background.paper'}} className=\"mt-22\">\r\n                <AppBar position=\"static\" color=\"secondary\">\r\n                    <MUTabs\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        indicatorColor=\"secondary\"\r\n                        textColor=\"inherit\"\r\n                        variant=\"fullWidth\"\r\n                        aria-label=\"full width tabs example\"\r\n                    >\r\n                    {tabs && tabs.map((tab:any,index:number)=>(\r\n                        <Tab key={index} label={tab.title} {...a11yProps(index)} />\r\n                    ))}\r\n                    </MUTabs>\r\n                </AppBar>\r\n                <SwipeableViews \r\n                    index={value}\r\n                    onChangeIndex={handleChangeIndex}>\r\n                    \r\n                    {tabs && tabs.map((tab:any,index:number)=>(\r\n                        <TabPanel key={index} value={value} index={index} >\r\n                            {tab.component}\r\n                        </TabPanel>\r\n                    ))}     \r\n\r\n                </SwipeableViews>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Tabs;\r\n\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\LabelFieldsListing.tsx",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\opportunity\\OpportunityPreview.tsx",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\account\\ViewAccount.tsx",["1891","1892"],"import { LinearProgress } from '@mui/material';\r\nimport React,{useState,useEffect} from 'react';\r\nimport LabelFieldsListing from '../../../components/LabelFieldsListing';\r\nimport sfdc from '../../../services/sfdc';\r\n\r\nconst ViewAccount = (props:any)=>{\r\n    const {id,refresh} = props;\r\n    const [Account,setAccount] = useState<any>();\r\n    const [loading,setLoading] = useState(false);\r\n\r\n    const load = async()=>{\r\n        setLoading(true);\r\n        let res:any = await sfdc.getAccount(id);\r\n        \r\n        if(res.success){\r\n            setAccount(res.data);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(id){\r\n            load();\r\n        }\r\n    },[id])\r\n\r\n    return (\r\n        <> \r\n            {loading && <LinearProgress/>}\r\n            <br/>\r\n            <LabelFieldsListing noOfColumn={4} fields={Account}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ViewAccount;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\contact\\ContactPreview.tsx",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\event\\EventPreview.tsx",[],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\AlertMessage.tsx",["1893","1894"],"import React,{useState,useEffect,memo} from 'react';\r\nimport {Alert,AlertTitle,Paper} from '@mui/material/';\r\n\r\nexport enum ALERT_TYPE {\r\n    ERROR = 'error',\r\n    WARNING = 'warning',\r\n    INFO = 'info',\r\n    SUCCESS = 'success'\r\n}\r\n\r\nconst AlertMessage:React.FC<any> = ({type,message})=>{\r\n    //const {message} = props;\r\n    const [state,setState] = useState<any|null>(null);\r\n    \r\n    useEffect(() => {\r\n        if(message)\r\n            setState({type:type,message:message});\r\n    }, [message])\r\n\r\n    return (\r\n        <>\r\n        {state && state.message?\r\n            <Paper className='mb-10'>\r\n                <Alert severity={state.type}>\r\n                    <AlertTitle style={{textTransform:'capitalize'}}>{state.type}</AlertTitle>\r\n                    {state.message}\r\n                </Alert>\r\n            </Paper>\r\n        :''}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AlertMessage;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\AreaStacked.tsx",["1895","1896","1897","1898","1899"],"import React, { useEffect, useState } from 'react';\r\nimport { LinearProgress, Paper } from \"@mui/material\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nconst AreaStacked = (props:any)=>{\r\n    const {data,category,title, period,description} = props;\r\n    let subTitle = (description && description[title])?description[title]:'';\r\n    const options= {\r\n        chart: {\r\n            type: 'area'\r\n        },\r\n        \r\n        title: {\r\n            text: title\r\n        },\r\n        subtitle: {\r\n            text: subTitle,\r\n          },\r\n        yAxis: {\r\n            title: {\r\n                text: title\r\n            },\r\n            labels: {\r\n            }\r\n        },\r\n        tooltip: {\r\n            // pointFormat: '{series.name}: {series.point.cat} '+\r\n            // '<br>value: <b>{point.y}</b>',\r\n            split: true,\r\n        },\r\n        // tooltip: {\r\n        //     split: true,\r\n        // },\r\n        plotOptions: {\r\n            area: {\r\n                stacking: 'normal',\r\n                lineWidth: 1,   \r\n                //fillColor:'#e244060f',\r\n            },\r\n            column: {\r\n                pointPadding: 0.2,\r\n                borderWidth: 0,\r\n              },\r\n        },\r\n        series: []\r\n    };\r\n    const [option, setOption] = useState<any>(options);\r\n    \r\n    const load = ()=>{\r\n        let series:any = []\r\n     \r\n        if (period> 30 && category[30] !== undefined){\r\n            const month1 = data.slice(0,30)\r\n            const month2 = data.slice(30,60) \r\n            const category1 = category.slice(0,30)\r\n            \r\n            const category2 = category.slice(30,60)\r\n            series[0] = {\r\n                name: '30 days',\r\n                data: month1,\r\n                color:'#00bbc4',\r\n                cat:'hello'\r\n            }\r\n            series[1] ={\r\n                name: '30-60 days',\r\n                data:month2,\r\n                color:'#00a8ce',\r\n                cat:'hello'\r\n            }\r\n            \r\n            if (period > 60 && category[60] !== undefined){\r\n                const category3 = category.slice(60,90)\r\n                const month3 = data.slice(60,90) \r\n    \r\n                series.push({name:'60-90 days',data:month3, color:'#008fcd',cat:category3})   \r\n            }\r\n        }\r\n    \r\n        setOption({...option,series: series})\r\n    }\r\n    \r\n\r\n    useEffect(() => {\r\n        load()\r\n    }, [data]);\r\n    \r\n    return(\r\n        <>\r\n            <HighchartsReact highcharts={Highcharts} options={option} />\r\n        </>\r\n    )\r\n  }\r\n  \r\n  export default AreaStacked;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderTracking\\DialogAccountSelector.tsx",["1900","1901","1902","1903","1904","1905","1906","1907","1908","1909","1910","1911","1912"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Grid, FormControl, Paper, Stack, Button, Icon, Dialog, DialogTitle, DialogContent, DialogActions, Divider, InputLabel, Select, MenuItem } from '@mui/material';\r\nimport sfdc from '../../../services/sfdc';\r\nimport SearchableDropdown from '../../../components/SearchableDropdown';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Link as RLink } from 'react-router-dom';\r\nimport { Autocomplete, CircularProgress, TextField } from '@mui/material';\r\nconst DialogAccountSelector = (props: any) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [Account, setAccount] = useState<string | any>(null);\r\n    const [Opportunity, setOpportunity] = useState<string | any>(null);\r\n    const [searchContact, setSearchContact] = useState<string | null>(null);\r\n    //const [searchAccountOpportunity, setsearchAccountOpportunity] = useState<string | null>(null);\r\n    const [ContactName, setContactName] = useState('JJJ');\r\n    const [ContactID, setContactID] = useState<string | any>(null);\r\n    // const [OpName, setOpName] = useState('JJJ');\r\n    // const [OpID, setOptID] = useState<string | any>(null);\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n\r\n\r\n    // const handleChangeAccount = (event) => {\r\n    //     setAccount(event.target.value);\r\n    // };\r\n    const handleChangeSearchContact = (event) => {\r\n            setSearchContact(event.target.value);\r\n        \r\n    };\r\n    // const handleChangeOpportunityccount = (event) => {\r\n    //     setsearchAccountOpportunity(event.target.value);\r\n    // };\r\n    const [data, setData] = useState<any>();\r\n    const [ContactData, setContactData] = useState<any>();\r\n    //const [OpportunityData, setOpportunityData] = useState<any>();\r\n    const setData2 = (data: any) => {\r\n        if (data) {\r\n            setContactID(data.Id);\r\n            setContactName(data.Name);\r\n        } else {\r\n            setContactID(null);\r\n            setContactName('');\r\n        }\r\n    }\r\n\r\n    // const setData3 = (data: any) => {\r\n    //     if (data) {\r\n    //         setOptID(data.Id);\r\n    //         setOpName(data.Name);\r\n    //     } else {\r\n    //         setOptID(null);\r\n    //         setOpName('');\r\n    //     }\r\n    // }\r\n\r\n    const load = async () => {\r\n        //For all salsforce Accounts\r\n        setData(null);\r\n        let res: any = await sfdc.getAll();\r\n        if (res.success) {\r\n            setData(res.data);\r\n        }\r\n    }\r\n\r\n    const load2 = async () => {\r\n        //For contacts\r\n        setContactData(null);\r\n        let res: any = await sfdc.getAccountRelatedDocs(Account.id);\r\n        setLoading(true);\r\n        if (res.success) {\r\n            setContactData(res.data);\r\n            setData2(res.data);\r\n            setLoading(false);\r\n        }\r\n    }\r\n    // const load3 = async () => {\r\n    //     //For contacts\r\n    //     setOpportunityData(null);\r\n    //     let res: any = await sfdc.getAccountRelatedDocs(Account.id);\r\n    //     console.log(res);\r\n    //     setLoading(true);\r\n    //     if (res.success) {\r\n    //         setOpportunityData(res.data);\r\n    //         setData3(res.data);\r\n    //         setLoading(false);\r\n    //     }\r\n    // }\r\n    useEffect(() => {\r\n        load();\r\n        if (Account) {\r\n            setLoading(true);\r\n            load2();\r\n            //load3();\r\n        }\r\n    }, [Account])\r\n\r\n    const handleAccountSubmit = () => {\r\n        history.push(`/supplierportal/orderform/id/${Account.id}/${searchContact}/${Opportunity.id}`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br />\r\n            <Grid container spacing={4}>\r\n                <Grid item md={12}>\r\n                    <SearchableDropdown action=\"searchAccount\" onSelect={(value: any) => setAccount(value)} />\r\n                </Grid>\r\n                <br></br>\r\n                <Grid item md={12}>\r\n                    <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                        <InputLabel id=\"searchContact\">Search Contact</InputLabel>\r\n                        <Select\r\n                            labelId=\"searchContact\"\r\n                            label=\"searchContact\"\r\n                            value={ContactID}\r\n                            key={ContactName}\r\n                            onChange={handleChangeSearchContact}\r\n                            disabled={!ContactData || !Account}\r\n                            endAdornment={\r\n                                <>\r\n                                    {loading ? <CircularProgress color=\"inherit\" sx={{ margin: '0px 11px 0 0 ' }} size={20} /> : null}\r\n                                </>\r\n                            }\r\n                        >\r\n                            {ContactData && ContactData.contact.map((key: any) => {\r\n                                return (\r\n                                    <MenuItem value={key.Id}>\r\n                                        {key?.Name}\r\n                                    </MenuItem>\r\n                                )\r\n                            })}\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                {/* <Grid item md={12}>\r\n                    <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                        <InputLabel id=\"searchOpportunity\">Search Opportunity</InputLabel>\r\n                        <Select\r\n                            labelId=\"searchOpportunity\"\r\n                            label=\"searchOpportunity\"\r\n                            value={OpID}\r\n                            key={OpName}\r\n                            onChange={handleChangeOpportunityccount}\r\n                            disabled={!OpportunityData}\r\n                            endAdornment={\r\n                                <>\r\n                                    {loading ? <CircularProgress color=\"inherit\" sx={{ margin: '0px 11px 0 0 ' }} size={20} /> : null}\r\n                                </>\r\n                            }\r\n                        >\r\n                            {OpportunityData && OpportunityData.opportunity.map((key: any) => {\r\n                                return (\r\n                                    <MenuItem value={key.Id}>\r\n                                        {key?.Name}\r\n                                    </MenuItem>\r\n                                )\r\n                            })}\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid> */}\r\n                <Grid item md={12}>\r\n                    <SearchableDropdown disabled={!Account} params={{acid:Account?.id}} label=\"Opportunity\" action=\"searchSfdcLiveOpportunity\" onSelect={(value: any) => setOpportunity(value)} />\r\n                </Grid>\r\n                <Grid item md={12}>\r\n                    <Stack justifyContent=\"right\" direction=\"row\">\r\n                        <Button disabled={!(Account && searchContact && Opportunity)} size=\"small\" variant=\"contained\" color=\"secondary\" onClick={handleAccountSubmit} autoFocus>Submit</Button>\r\n                    </Stack>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\nexport default DialogAccountSelector;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\core\\LabelField.tsx",["1913"],"/**\r\n * Key:Value base readonly field \r\n */\r\nimport { TextField } from '@mui/material';\r\nimport React from 'react'\r\n\r\nimport u from '../services/util';\r\n\r\nconst LabelField = ({label,value})=>{\r\n    return(\r\n        <div className=\"label-field\">\r\n            <label>{label}</label>\r\n            <div className=\"field\">{u.ifNull(value,'  ')}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LabelField;\r\n\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\opportunity\\ViewOpportunity.tsx",["1914","1915"],"import { LinearProgress } from '@mui/material';\r\nimport React,{useState,useEffect} from 'react';\r\nimport LabelFieldsListing from '../../../components/LabelFieldsListing';\r\nimport sfdc from '../../../services/sfdc';\r\n\r\nconst ViewOpportunity = (props:any)=>{\r\n    const {id,refresh} = props;\r\n    const [Opportunity,setOpportunity] = useState<any>();\r\n    const [loading,setLoading] = useState(false);\r\n\r\n    const load = async()=>{\r\n        setLoading(true);\r\n        let res:any = await sfdc.getOpportunity(id);\r\n        \r\n        if(res.success){\r\n            setOpportunity(res.data);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(id){\r\n            load();\r\n        }\r\n    },[id])\r\n\r\n    return (\r\n        <> \r\n            {loading && <LinearProgress/>}\r\n            <br/>\r\n            <LabelFieldsListing noOfColumn={4} fields={Opportunity}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ViewOpportunity;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\contact\\ViewContact.tsx",["1916","1917"],"import { LinearProgress } from '@mui/material';\r\nimport React,{useState,useEffect} from 'react';\r\nimport LabelFieldsListing from '../../../components/LabelFieldsListing';\r\nimport sfdc from '../../../services/sfdc';\r\n\r\nconst ViewContact = (props:any)=>{\r\n    const {id,refresh} = props;\r\n    const [Contact,setContact] = useState<any>();\r\n    const [loading,setLoading] = useState(false);\r\n\r\n    const load = async()=>{\r\n        setLoading(true);\r\n        let res:any = await sfdc.getContact(id);\r\n        \r\n        if(res.success){\r\n            setContact(res.data);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(id){\r\n            load();\r\n        }\r\n    },[id])\r\n\r\n    return (\r\n        <> \r\n            {loading && <LinearProgress/>}\r\n            <br/>\r\n            <LabelFieldsListing noOfColumn={4} fields={Contact}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ViewContact;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\accountExplorer\\event\\ViewEvent.tsx",["1918","1919"],"import { LinearProgress } from '@mui/material';\r\nimport React,{useState,useEffect} from 'react';\r\nimport LabelFieldsListing from '../../../components/LabelFieldsListing';\r\nimport sfdc from '../../../services/sfdc';\r\n\r\nconst ViewEvent = (props:any)=>{\r\n    const {id,refresh} = props;\r\n    const [Event,setEvent] = useState<any>();\r\n    const [loading,setLoading] = useState(false);\r\n\r\n    const load = async()=>{\r\n        setLoading(true);\r\n        let res:any = await sfdc.getEvent(id);\r\n        \r\n        if(res.success){\r\n            setEvent(res.data);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(id){\r\n            load();\r\n        }\r\n    },[id])\r\n\r\n    return (\r\n        <> \r\n            {loading && <LinearProgress/>}\r\n            <br/>\r\n            <LabelFieldsListing noOfColumn={4} fields={Event}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ViewEvent;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\looker.js",["1920"],"import client from './client';\r\n\r\nconst repDashboard = async(params)=>{     \r\n    let res:any = await client.get('/looker/dashboard/rep',params);\r\n    if(res.success){\r\n        return res.data;\r\n    }\r\n    return '';\r\n}\r\nconst useCaseDashboard = async(params)=>{     \r\n    let res:any = await client.get('/looker/dashboard/useCase',params);\r\n    if(res.success){\r\n        return res.data;\r\n    }\r\n    return '';\r\n}\r\nconst accountDeepdiveDashboard = async(params)=>{     \r\n    let res:any = await client.get('/looker/dashboard/deepdive',params);\r\n    if(res.success){\r\n        return res.data;\r\n    }\r\n    return '';\r\n}\r\n\r\nexport default {\r\n    repDashboard, useCaseDashboard, accountDeepdiveDashboard\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\Signup.tsx",["1921","1922","1923","1924","1925","1926","1927","1928","1929","1930","1931","1932","1933","1934","1935","1936","1937","1938","1939","1940","1941"],"import {\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Icon,\r\n  LinearProgress,\r\n  TextField,\r\n  Paper,\r\n  FormGroup,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Divider,\r\n  Switch,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport React, { useState, useMemo, useEffect } from \"react\";\r\nimport { Link as Rlink, useHistory, useParams } from \"react-router-dom\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport AlertMessage, { ALERT_TYPE } from \"../components/AlertMessage\";\r\nimport auth from \"../services/auth\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { login, appTheme } from \"../store/actions\";\r\nimport client from \"../services/client\";\r\nlet _password: string = \"\"; // for referencing\r\n\r\nconst Signup: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const qParams = useParams();\r\n\r\n  const isLogin = useSelector((state: any) => state.isLogin);\r\n  const [Message, setMessage] = useState(\"\");\r\n  const [FullName, setFullName] = useState(\"\");\r\n  const [FirstName, setFirstName] = useState(\"\");\r\n  const [LastName, setLastName] = useState(\"\");\r\n  const [OrganisationName, setOrganisationName] = useState(\"\");\r\n  const [TelephoneNo, setTelephoneNo] = useState(\"\");\r\n  const [ConfirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n  const [processing, setProcessing] = useState(false);\r\n  const [Email, setEmail] = useState(\"\");\r\n  const [Password, setPassword] = useState(\"\");\r\n  const [checked, setChecked] = React.useState(false);\r\n  const [showMFA, setShowMFA] = React.useState(false);\r\n  const [qrCode, setQrCode] = useState(false);\r\n  const [qrSrc, setQrSrc] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [secret, setSecret] = useState(\"\");\r\n  const [nextButton, showNextButton] = useState(false);\r\n\r\n  _password = Password;\r\n\r\n  useEffect(() => {\r\n    if (isLogin) {\r\n      history.push(\"/\");\r\n    }\r\n\r\n    // add custom validation for confirm password\r\n    ValidatorForm.addValidationRule(\"isPasswordMatch\", (value: string) => {\r\n      if (value !== _password) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    ValidatorForm.addValidationRule(\"validatePassword\", (value: string) => {\r\n      let regex = /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/;\r\n      return regex.test(value);\r\n    });\r\n    return () => {\r\n      ValidatorForm.removeValidationRule(\"isPasswordMatch\");\r\n      ValidatorForm.removeValidationRule(\"validatePassword\");\r\n    };\r\n  }, []);\r\n  const required = () => {\r\n    if (\r\n      Email != \"\" &&\r\n      Password != \"\" &&\r\n      ConfirmPassword != \"\" &&\r\n      OrganisationName != \"\" &&\r\n      FirstName != \"\" &&\r\n      LastName != \"\"\r\n    )\r\n      showNextButton(true);\r\n  };\r\n  const handleSubmit = async () => {\r\n    setProcessing(true);\r\n    const params = {\r\n      Email: Email,\r\n      Password: Password,\r\n      ConfirmPassword: ConfirmPassword,\r\n      TelephoneNo: TelephoneNo,\r\n      OrganisationName: OrganisationName,\r\n      FirstName: FirstName,\r\n      LastName: LastName,\r\n    };\r\n    if (qrCode) {\r\n      params[\"Token\"] = token;\r\n      params[\"Secret\"] = secret;\r\n    }\r\n    let res: any = await auth.signup(params);\r\n    if (res && res.success) {\r\n      window.snakAlert.success(res.data);\r\n      history.push(\"/login\");\r\n    } else {\r\n      setMessage(res.message);\r\n    }\r\n    setProcessing(false);\r\n  };\r\n  const handleChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setChecked(event.target.checked);\r\n    if (event.target.checked) {\r\n      setProcessing(true);\r\n      let res = await client.post(\"/MFA/googleAuthenticator/\", {\r\n        MFAenabled: event.target.checked,\r\n      });\r\n      if (res.success && res.data) {\r\n        setQrSrc(res.data.uri);\r\n        setSecret(res.data.secret);\r\n        setQrCode(true);\r\n      } else {\r\n        window.snakAlert.error(res.message);\r\n      }\r\n      setProcessing(false);\r\n    } else {\r\n      setQrCode(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"signup\">\r\n        <Paper className=\"paper\">\r\n          <div className=\"logo-mini\"></div>\r\n          <AlertMessage type={ALERT_TYPE.ERROR} message={Message} />\r\n          <ValidatorForm\r\n            onSubmit={handleSubmit}\r\n            instantValidate\r\n            onError={(errors) => console.log(errors)}\r\n          >\r\n            {!showMFA ? (\r\n              <>\r\n                <Grid container spacing={2}>\r\n                  <Grid item md={12}>\r\n                    <TextValidator\r\n                      variant=\"outlined\"\r\n                      margin=\"dense\"\r\n                      size=\"small\"\r\n                      fullWidth\r\n                      label=\"First Name\"\r\n                      name=\"FirstName\"\r\n                      autoFocus\r\n                      onChange={(e: any) => {\r\n                        setFirstName(e.target.value);\r\n                      }}\r\n                      validators={[\"required\"]}\r\n                      errorMessages={[\"First Name is required\"]}\r\n                      value={FirstName}\r\n                      disabled={processing}\r\n                      inputProps={{ maxLength: 100 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={12}>\r\n                    <TextValidator\r\n                      variant=\"outlined\"\r\n                      margin=\"dense\"\r\n                      size=\"small\"\r\n                      fullWidth\r\n                      label=\"Last Name\"\r\n                      name=\"LastName\"\r\n                      autoFocus\r\n                      onChange={(e: any) => {\r\n                        setLastName(e.target.value);\r\n                      }}\r\n                      validators={[\"required\"]}\r\n                      errorMessages={[\"Last Name is required\"]}\r\n                      value={LastName}\r\n                      disabled={processing}\r\n                      inputProps={{ maxLength: 100 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={12}>\r\n                    <TextValidator\r\n                      variant=\"outlined\"\r\n                      margin=\"dense\"\r\n                      size=\"small\"\r\n                      fullWidth\r\n                      label=\"Organization Name\"\r\n                      name=\"OrganisationName\"\r\n                      autoFocus\r\n                      onChange={(e: any) => {\r\n                        setOrganisationName(e.target.value);\r\n                      }}\r\n                      validators={[\"required\"]}\r\n                      errorMessages={[\"Organization name is required\"]}\r\n                      value={OrganisationName}\r\n                      disabled={processing}\r\n                      inputProps={{ maxLength: 100 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={12}>\r\n                    <TextValidator\r\n                      variant=\"outlined\"\r\n                      margin=\"dense\"\r\n                      size=\"small\"\r\n                      fullWidth\r\n                      label=\"Company Business Email Address\"\r\n                      name=\"Email\"\r\n                      autoFocus\r\n                      onChange={(e: any) => {\r\n                        setEmail(e.target.value);\r\n                      }}\r\n                      validators={[\"required\", \"isEmail\"]}\r\n                      errorMessages={[\r\n                        \"Email is required\",\r\n                        \"Email is not valid\",\r\n                      ]}\r\n                      value={Email}\r\n                      disabled={processing}\r\n                      inputProps={{ maxLength: 100 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={12}>\r\n                    <TextValidator\r\n                      variant=\"outlined\"\r\n                      margin=\"dense\"\r\n                      size=\"small\"\r\n                      fullWidth\r\n                      label=\"Telephone No\"\r\n                      name=\"TelephoneNo\"\r\n                      autoFocus\r\n                      onChange={(e: any) => {\r\n                        setTelephoneNo(e.target.value);\r\n                      }}\r\n                      validators={[\"required\"]}\r\n                      errorMessages={[\"Phone is required\"]}\r\n                      value={TelephoneNo}\r\n                      disabled={processing}\r\n                      inputProps={{ maxLength: 20 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={12}>\r\n                    <TextValidator\r\n                      variant=\"outlined\"\r\n                      margin=\"dense\"\r\n                      size=\"small\"\r\n                      fullWidth\r\n                      type=\"password\"\r\n                      label=\"Password\"\r\n                      name=\"Password\"\r\n                      onChange={(e: any) => {\r\n                        setPassword(e.target.value);\r\n                      }}\r\n                      validators={[\"required\", \"validatePassword\"]}\r\n                      errorMessages={[\r\n                        \"Password is required\",\r\n                        \"Password must be 8-16 char. long and must contain atleast one number\",\r\n                      ]}\r\n                      value={Password}\r\n                      disabled={processing}\r\n                      inputProps={{ maxLength: 50 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={12}>\r\n                    <TextValidator\r\n                      variant=\"outlined\"\r\n                      margin=\"dense\"\r\n                      size=\"small\"\r\n                      fullWidth\r\n                      type=\"password\"\r\n                      label=\"Confirm Password\"\r\n                      name=\"ConfirmPassword\"\r\n                      onChange={(e: any) => {\r\n                        setConfirmPassword(e.target.value);\r\n                      }}\r\n                      value={ConfirmPassword}\r\n                      disabled={processing}\r\n                      inputProps={{ maxLength: 50 }}\r\n                      validators={[\"isPasswordMatch\", \"required\"]}\r\n                      errorMessages={[\r\n                        \"Password mismatched\",\r\n                        \"Confirm password is required\",\r\n                      ]}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Button\r\n                  disabled={processing}\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => setShowMFA(true)}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Grid spacing={2} container>\r\n                  <Grid item md={12}>\r\n                    <h2>Multifactor Authentication </h2>\r\n                    <FormGroup>\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={checked}\r\n                            onChange={handleChange}\r\n                            inputProps={{ \"aria-label\": \"controlled\" }}\r\n                          />\r\n                        }\r\n                        label={checked ? \"Disable MFA\" : \"Enable MFA\"}\r\n                      />\r\n                    </FormGroup>\r\n                  </Grid>\r\n                  {qrCode && (\r\n                    <>\r\n                      <Grid item md={12} className=\"mb-10\">\r\n                        <Divider />\r\n                      </Grid>\r\n                      <Grid item md={12} sm={12} xs={12}>\r\n                        <Stack direction=\"row\" justifyContent=\"center\">\r\n                          <img style={{ width: \"220px\" }} src={qrSrc} />\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item md={12} sm={12} xs={12}>\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          size=\"small\"\r\n                          fullWidth\r\n                          label=\"Token\"\r\n                          value={token}\r\n                          onChange={(e: any) => {\r\n                            setToken(e.target.value);\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                    </>\r\n                  )}\r\n                </Grid>\r\n                <br />\r\n                <Grid container justifyContent=\"space-between\">\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <Button\r\n                      disabled={processing}\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => setShowMFA(false)}\r\n                    >\r\n                      Back\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <Button\r\n                      disabled={processing}\r\n                      type=\"submit\"\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      //   onClick={handleSubmit}\r\n                    >\r\n                      Sign Up\r\n                    </Button>\r\n                    <LinearProgress\r\n                      style={{ display: processing ? \"\" : \"none\" }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                  </Grid>\r\n                </Grid>\r\n              </>\r\n            )}\r\n          </ValidatorForm>\r\n        </Paper>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\Registration.tsx",["1942","1943","1944","1945","1946"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\index.tsx",["1947","1948","1949","1950","1951","1952","1953","1954","1955","1956","1957","1958","1959","1960","1961","1962","1963","1964","1965"],"import React,{Suspense, useEffect, useState} from 'react';\r\nimport {Grid,Paper,LinearProgress, TextField,Icon,Typography, IconButton,Collapse, Stack, Divider, Button } from '@mui/material'\r\nimport SearchableDropdown from \"../../components/SearchableDropdown\";\r\nimport Box from '@mui/material/Box';\r\nimport Slider from '@mui/material/Slider';\r\nimport {useSelector} from 'react-redux';\r\nimport { USER_TYPE } from \"../../const\";\r\nimport LineChart from '../../components/graphs/valueIQ/LineChart';\r\n\r\nimport AnimatedNumber from 'react-animated-number';\r\nimport valueIQ from '../../services/valueIQ';\r\nimport u from '../../services/util';\r\nimport './assets/style.css';\r\nimport ModalDialog from '../../components/ModalDialog';\r\nimport DialogFormulaSelector from './DialogFormulaSelector';\r\nimport Listing from './Listing';\r\nimport ValueChart from './ValueChart';\r\nimport Filter from './Filter';\r\nimport moment from \"moment\";\r\n\r\n\r\n  \r\nconst ValueIQ = ()=>{\r\n\r\n    //search\r\n    const [data,setData]:any = useState({});\r\n    const [filters,setFilters] = useState({});\r\n    const rowPerPage = 20;\r\n    const [processing,setProcessing] = useState(false);\r\n\r\n    const [category,setCategory] = useState<any>(null)\r\n\r\n    const [original,setOriginal] = useState<any>([0,0,0,0,0,0,0,0,0,0,0,0])\r\n    \r\n    const [row, setRowData] =useState<any>(null);\r\n    const accid = useSelector((state: any) =>state.user ? state.user.accid : null);\r\n    const UserType = useSelector((state: any) =>state.user ? state.user.type : null);\r\n\r\n    const [AccountName, setAccountName] = useState<any|null>(null);\r\n    const [Domain, setDomain] = useState<any|null>(null);\r\n    // const [loading,setloading] = useState<boolean>(false);\r\n    const[ShowFormulaSelector, setShowFormulaSelector] = useState<boolean>(false);\r\n    const [mode, setMode] =useState<any>(null);\r\n\r\n    \r\n  \r\n\r\n    const handlerShowFormulaSelector = ()=> setShowFormulaSelector(true);\r\n    const handlerOnCloseFormulaSelector = ()=> setShowFormulaSelector(false);\r\n    const handlerShowExistingCustomer = ()=> {setMode('existing_customer');setAccountName(null); setDomain(null);setOriginal([0,0,0,0,0,0,0,0,0,0,0,0])}\r\n\r\n\r\n\r\n    const back = ()=>{\r\n        setMode(null)\r\n        setRowData(null)\r\n    }\r\n    \r\n    const saveChart = async(spend,customerType,futureVariables,inputSelection1,inputSelection2,futureValue,futureCategory, futureSpend,AccountOwner,PrimarySalesEngineer,category, variables, ROI, NPV,formulaX,accountName,domain,id)=>{\r\n        debugger\r\n        setProcessing(true)\r\n        let res:any\r\n        if(mode == 'update')\r\n        res = await valueIQ.update({id,spend,futureValue,futureVariables,inputSelection1,inputSelection2,futureSpend,category,futureCategory,variables,ROI,NPV,formulaX, accountName,domain})\r\n        else\r\n        res = await valueIQ.save({spend,customerType,inputSelection1,futureVariables,inputSelection2,futureValue,futureCategory, futureSpend,AccountOwner,PrimarySalesEngineer,variables,ROI,NPV,formulaX, accountName,domain,mode,category})\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setProcessing(false);\r\n        }else{\r\n            setMode(null)\r\n            window.snakAlert.success(res.data);\r\n            search();\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (UserType === USER_TYPE.CUSTOMER) {\r\n            // setAccount(accid);\r\n        }\r\n    }, [UserType]);\r\n\r\n    useEffect(()=>{\r\n        let months:any[] = [];\r\n        let monthsRequired:any = 12\r\n    \r\n        for (let i = 1; i <= monthsRequired; i++) {\r\n        months.push( moment().add(i, 'months').format('MMM YYYY') )\r\n        }\r\n        setCategory(months)\r\n        console.log(months)\r\n    },[])\r\n\r\n\r\n\r\n    const handlerProjectedSave = async(projectedSpend, accountName, domain)=>{\r\n        \r\n        setProcessing(true)\r\n        setAccountName(accountName)\r\n        setDomain(domain)\r\n        handlerOnCloseFormulaSelector()\r\n        if(mode=='update') \r\n        {\r\n            let tempRow = {...row}\r\n            tempRow.Spend=projectedSpend\r\n            tempRow.AccountName=accountName\r\n            tempRow.Domain=domain\r\n            setRowData(tempRow)\r\n        }\r\n        else \r\n        {const res:any = await valueIQ.checkForDomain({domain:domain});\r\n        if (res.success){\r\n            setOriginal(projectedSpend)\r\n            setMode('new_prospect')\r\n        }\r\n        else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        }\r\n        \r\n        setProcessing(false)\r\n        \r\n    }\r\n\r\n    //search\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await valueIQ.listing({...filters,rowPerPage});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);    \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handlerDelete = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"User deletion\",`Delete selected domain for projection with name \"${row.Domain}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await valueIQ.remove({id:row.ValueIQID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n\r\n    const handlerActivate = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"User Activation\",`Activate selected domain for projection with name \"${row.Domain}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await valueIQ.activate({id:row.ValueIQID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    const edit = async(row:any)=>{\r\n        \r\n       setProcessing(true);\r\n       setRowData(row);\r\n       setMode('update');\r\n       if(row.ChartType=='new_prospect') handlerShowFormulaSelector()\r\n       setProcessing(false);\r\n    }\r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n    },[filters]);\r\n    \r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n    \r\n\r\n    return (\r\n        <> \r\n            {/* {loading && <LinearProgress/>} */}\r\n            {!mode &&\r\n             <div className=\"page-content\">\r\n            {UserType != USER_TYPE.CUSTOMER ?\r\n            \r\n            <>\r\n                     <h2>ValueIQ <span>Aviatrix Usage ValueIQ Report</span></h2>\r\n                    <Paper elevation={1} className=\"section mt-10\">\r\n                        <Grid container direction=\"row\" justifyContent=\"space-between\" spacing={2}>\r\n                            <Grid item md={9}>\r\n                                <Filter onSearch={handlerSearch}/>\r\n                            </Grid>\r\n                            <Grid item md={3} >\r\n                                <Grid container justifyContent=\"flex-end\" >\r\n                                    <Button variant=\"contained\" color=\"secondary\" onClick={handlerShowExistingCustomer}>\r\n                                        <Icon>account_circle</Icon> &nbsp; Existing Customer\r\n                                    </Button> &nbsp;\r\n                                    <Button variant=\"contained\" color=\"secondary\" onClick={handlerShowFormulaSelector}>\r\n                                            <Icon>post_add</Icon> &nbsp; New Prospect\r\n                                    </Button>\r\n                                </Grid>\r\n                                \r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                    <LinearProgress className=\"progress-bar\" style={{ display: (processing ? '' : 'none') }} />\r\n                        <Paper elevation={1} className=\"section mt-10\">\r\n                              <Listing rowPerPage={rowPerPage} data={data} \r\n                                onPagingChange={handlerSearch} \r\n                                onDelete={handlerDelete}\r\n                                onActivate={handlerActivate}\r\n                                edit={edit}\r\n                                 /> \r\n                        </Paper>\r\n                        </>\r\n                        :\r\n                        <>\r\n                        <h2>ValueIQ <span>Aviatrix Usage ValueIQ Report</span></h2>\r\n                        <div className=\"section mt-10\"></div>\r\n                        <ValueChart category={category} originalData={original} accountName={AccountName} domain={Domain}/>\r\n                        </>}\r\n            \r\n            </div>}\r\n            {mode &&\r\n                <ValueChart category={category} rowData={row} originalData={original} saveChart={saveChart} mode={mode} accountName={AccountName} domain={Domain} back={back}/>\r\n            }\r\n            \r\n            <ModalDialog    \r\n                fullScreen={false}   \r\n                maxWidth=\"sm\"\r\n                title={`Select Projected Usage Formula`}\r\n                component={<DialogFormulaSelector onClose={handlerOnCloseFormulaSelector} \r\n                handlerSave={handlerProjectedSave} \r\n                rowData={row}\r\n                mode={mode}\r\n                category={category}\r\n                />}\r\n                open={ShowFormulaSelector}\r\n                onClose={handlerOnCloseFormulaSelector}\r\n                \r\n            />                       \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ValueIQ;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\valueIQ\\LineChart.tsx",["1966","1967","1968"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, LinearProgress, Paper } from \"@mui/material\";\r\nimport { COLOR_SERIES } from \"../../../const\";\r\n\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport HC_more from \"highcharts/highcharts-more\";\r\nrequire(\"highcharts/modules/exporting\")(Highcharts);\r\nHC_more(Highcharts);\r\n\r\nconst LineChart = React.forwardRef((props: any,ref:any) => {\r\n  const { series, category, title } = props;\r\n  \r\n\r\n  const options: any = {\r\n    chart: {\r\n      // height: \"35%\",\r\n      // renderTo: 'container',\r\n    },\r\n    title: {\r\n      text: title,\r\n    },\r\n\r\n    colors: COLOR_SERIES,\r\n\r\n    yAxis: {\r\n        labels: {\r\n            format: '${text}' // The $ is literally a dollar unit\r\n        },\r\n        title: {\r\n            text: 'Spend vs. Value'\r\n        }\r\n    },\r\n    tooltip: {\r\n      formatter(){\r\n        let t:any = this || {};\r\n        if (t?.point?.y > 1000)\r\n        return `${t?.series?.name}: <b>${(t?.point?.y/1000).toFixed(0)}k</b>`\r\n        else \r\n        return `${t?.series?.name}: <b>${t?.point?.y.toFixed(0)}</b>`\r\n    }\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n  \r\n    xAxis: {\r\n      categories: category,\r\n      label:{\r\n        useHTML:true,//Set to true\r\n            style:{\r\n                width:'50px',\r\n                whiteSpace:'normal'//set to normal\r\n            },\r\n            step: 1,\r\n            formatter: function (value) {//use formatter to break word.\r\n                return `<div align=\"center\" style=\"word-wrap: break-word;word-break: break-all;width:50px\">` + value + '</div>';\r\n            }\r\n      }\r\n    },\r\n\r\n   \r\n\r\n    plotOptions: {\r\n      series: {\r\n        lineWidth: 3,\r\n        label: {\r\n          connectorAllowed: false,\r\n        },\r\n        // pointStart: 2010\r\n      },\r\n    },\r\n\r\n    series: series,\r\n\r\n    responsive: {\r\n      rules: [\r\n        {\r\n          condition: {\r\n            maxWidth: 500,\r\n          },\r\n          chartOptions: {\r\n            legend: {\r\n              layout: \"horizontal\",\r\n              align: \"center\",\r\n              verticalAlign: \"bottom\",\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  //const [option, setOption] = useState<any>(options);\r\n  const [loading, setloading] = useState(true);\r\n  const [ShowGraph, setShowGraph] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    \r\n\r\n    // let series = option.series\r\n    // if (data != undefined){\r\n    //     for(let i=0;i<data.length;i++){\r\n    //         series[0].data.push(data[i])\r\n    //     }\r\n    // }\r\n\r\n    // setOption(prevState => ({\r\n    //     ...prevState,\r\n    //     series: series ,\r\n    //   }))\r\n    // const element = printRef.current?.chart?.getSVG();\r\n    // const temp = printRef?.current?.chart?.getSVG()\r\n    // saveSvg(temp)\r\n    setloading(false);\r\n    setShowGraph(true);\r\n    // console.log(\"afnan\",Highcharts.getSVG())\r\n\r\n  }, [series, category]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      {!loading && ShowGraph && (\r\n        <>\r\n        \r\n          <HighchartsReact highcharts={Highcharts} options={options} ref={ref}/>\r\n       </>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default LineChart;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\DialogFormulaSelector.tsx",["1969","1970","1971","1972","1973","1974","1975","1976","1977","1978","1979","1980","1981","1982","1983","1984","1985","1986","1987","1988","1989","1990","1991"],"import React,{useEffect, useState} from 'react';\r\nimport { Grid, Paper,Stack,Button, Icon, Dialog, DialogTitle, DialogContent, DialogActions, Divider, InputLabel, FormControl, Select, MenuItem, TextField, InputAdornment } from '@mui/material';\r\n\r\n\r\n\r\nconst DialogFormulaSelector = (props:any)=>{\r\n    \r\n    // console.log(category)\r\n    const  {onClose,handlerSave} = props\r\n    const [initial, setInitial] = useState<any>(props.mode=='update'? props.rowData.Spend[0]:0);\r\n    const [percent, setPercent] = useState<any>(props.mode=='update'? (((props.rowData.Spend[1]-props.rowData.Spend[0])/props.rowData.Spend[0])*100).toFixed(2):0);\r\n    \r\n    const [AccountName, setAccountName] = useState<string>(props.mode=='update'? props.rowData.AccountName:'');\r\n    const [Domain, setDomain] = useState<string>(props.mode=='update'? props.rowData.Domain:'');\r\n\r\n    const [category,setCategory] =useState<any|null>(props.mode=='update'? [...props.rowData.Category] : [...props.category])\r\n    const [projectedSpend, setProjectedSpend] =useState<any[]>(props.mode=='update'?[...props.rowData.Spend] :[0,0,0,0,0,0,0,0,0,0,0,0]) \r\n    const handlerChangeUsage= (e,index)=>{\r\n        let temp =[...projectedSpend]\r\n        if(e.target.value == '') temp[index] = 0\r\n        else temp[index] = parseInt(e.target.value)\r\n        setProjectedSpend(temp)\r\n    }\r\n    const populate =()=>{\r\n        if(percent!='' && initial !=''){\r\n            let temp:any[]= []\r\n            const partialSum = (parseInt(percent)/100)*parseInt(initial);\r\n            temp.push(parseInt(initial))\r\n            let sum:any = parseInt(initial)\r\n            for(let i = 1; i<projectedSpend.length;i++){\r\n                sum=partialSum+sum\r\n                temp.push(parseFloat(sum.toFixed(2)))\r\n            }\r\n            \r\n            setProjectedSpend(temp)\r\n        }\r\n    }\r\n\r\n    \r\n    return (\r\n        <>\r\n            <br/>\r\n            <Grid container spacing={4}>\r\n               <><Grid item md={6}>\r\n                    <TextField size=\"small\" id=\"full-width-text-field\" placeholder='Account Name'\r\n                        name=\"AccountName\" label=\"Account Name\" fullWidth\r\n                        onChange={(e) => setAccountName(e.target.value)} value={AccountName} required />\r\n                </Grid><Grid item md={6}>\r\n                        <TextField size=\"small\" id=\"full-width-text-field\" placeholder='Domain'\r\n                            name=\"initial\" label=\"Domain\" fullWidth\r\n                            onChange={(e) => setDomain(e.target.value)} value={Domain} required />\r\n                    </Grid></>\r\n                \r\n                <Grid  item md={6}>\r\n                                <TextField size=\"small\" id=\"full-width-text-field\"\r\n                                    name=\"initial\" label=\"Initial Value\" fullWidth\r\n                                    onChange={(e) => setInitial(e.target.value)} onBlur={populate} value={initial} required />\r\n                </Grid>\r\n                <Grid item md={6}>\r\n\r\n                <TextField size=\"small\" id=\"full-width-text-field\"\r\n                 InputProps={{\r\n                    startAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n                  }}\r\n                                    name=\"percent\" label=\"Percentage Increase\" fullWidth\r\n                                    onChange={(e) => setPercent(e.target.value)} onBlur={populate} value={percent} required \r\n                                   \r\n                                      \r\n                                    />\r\n                   \r\n                    \r\n               </Grid>\r\n               <br />\r\n               <Divider />\r\n               <Grid item md={12}>\r\n                   <Grid container spacing={4}>\r\n                        {category.map((e:any,index)=>(\r\n                            <>\r\n                                <Grid key={index} item md={6}>\r\n                                <TextField size=\"small\" id=\"full-width-text-field\"\r\n                                    name={e} label={e} fullWidth\r\n                                    onChange={(e) => handlerChangeUsage(e, index)} value={projectedSpend[index]} required />\r\n                                </Grid>\r\n                            </>\r\n                        ))}\r\n                    \r\n                   </Grid>\r\n               </Grid>\r\n  \r\n            </Grid>\r\n                <Divider className='mt-10 mb-10'/>\r\n                <Button disabled={Domain==''} size=\"small\" variant=\"contained\" color=\"secondary\" \r\n                    startIcon={<Icon>timeline</Icon>} \r\n                    onClick={()=> handlerSave(projectedSpend,AccountName,Domain)}\r\n                    >Project Value\r\n                </Button>\r\n                    \r\n        </>\r\n    )\r\n}\r\n\r\nexport default DialogFormulaSelector;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\Listing.tsx",["1992","1993","1994","1995","1996","1997","1998","1999","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@mui/material';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable, { ExpanderComponentProps,TableRow }  from 'react-data-table-component';\r\nimport u from '../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {USER_TYPE} from '../../const';\r\n\r\nconst Listing = (props:any)=>{\r\n    const [tagDialog,setTagDialog]:any = useState({open:false,row:{}});\r\n    \r\n    \r\n\r\n    const columns:any = [\r\n        {\r\n          name: 'Domain Name',\r\n          selector: 'Domain',\r\n          compact:true,\r\n          //width:'170px',\r\n        },  \r\n        {\r\n            name: 'Account Name',\r\n            selector: 'AccountName',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Account Owner',\r\n            selector: 'AccountOwner',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Primary Sales Engineer',\r\n            selector: 'PrimarySalesEngineer',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Version',\r\n            selector: 'Version',\r\n            compact:true,\r\n            //width:'170px',\r\n          },\r\n        {\r\n            name: 'FormulaX',\r\n            selector: 'FormulaX',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200\r\n        },\r\n        {\r\n            name: 'Created By',\r\n            //selector: 'RDate',\r\n            compact:true,\r\n            width:'140px',\r\n            //hide:1200,\r\n            cell:(row:any)=><>{row.CreatedByUser?row.CreatedByUser.FullName:''}</>\r\n        },\r\n        {\r\n            name: 'Date Created',\r\n            selector: 'DateCreated',\r\n            compact:true,\r\n            width:'120px',\r\n            // hide:1200,\r\n            cell:(row:any)=><>{u.format.date(row.DateCreated)}</>\r\n        },\r\n        {\r\n            name: '',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                \r\n               \r\n                    <>\r\n                    <Tooltip title=\"Edit\" >\r\n                        <IconButton size=\"small\" className=\"action\" onClick={()=>{props.edit(row)}} >\r\n                            <Icon className=\"icon-green\">edit</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                \r\n                    {row.Deleted?\r\n                        <Tooltip title=\"Activate\">\r\n                            <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onActivate(row)}} >\r\n                                <Icon className=\"icon-red\">undo</Icon>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    :\r\n                        <Tooltip title=\"Delete\">\r\n                            <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onDelete(row)}} >\r\n                                <Icon className=\"icon-red\">delete_forever</Icon>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    }\r\n                    </>\r\n                \r\n              \r\n          }\r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            // expandableRows\r\n            // expandableRowsComponent={ExpandedComponent}\r\n            \r\n        />\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Listing;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\ValueChart.tsx",["2018","2019","2020","2021","2022","2023","2024","2025","2026","2027","2028","2029","2030","2031","2032","2033","2034","2035","2036","2037","2038","2039","2040","2041","2042","2043","2044","2045","2046","2047","2048","2049","2050","2051","2052","2053","2054","2055","2056","2057","2058","2059","2060","2061","2062","2063","2064","2065","2066","2067","2068","2069","2070"],"import React,{Suspense, useEffect, useState} from 'react';\r\nimport {Grid,Paper,LinearProgress, TextField,Icon,Typography, IconButton,Collapse, Stack, Divider, Button, Link, Tooltip } from '@mui/material'\r\nimport SearchableDropdown from \"../../components/SearchableDropdown\";\r\nimport Box from '@mui/material/Box';\r\nimport Slider from '@mui/material/Slider';\r\nimport {useSelector} from 'react-redux';\r\nimport { USER_TYPE } from \"../../const\";\r\nimport LineChart from '../../components/graphs/valueIQ/LineChart';\r\nimport StackedColumn from '../../components/graphs/valueIQ/StackedColumn';\r\nimport FutureChart from '../../components/graphs/valueIQ/FutureChart';\r\nimport AreaChart from '../../components/graphs/valueIQ/StackedArea';\r\nimport img1 from '../../assets/images/02.jpg';\r\nimport AnimatedNumber from 'react-animated-number';\r\nimport u from '../../services/util';\r\nimport './assets/style.css';\r\nimport ModalDialog from '../../components/ModalDialog';\r\nimport DialogPredictionSettings from './DialogPredictionSettings';\r\nimport {Link as Rlink,useParams,useHistory} from 'react-router-dom';\r\nimport valueIQ from '../../services/valueIQ';\r\nimport { PdfDocument } from './Download';\r\nimport { pdf } from '@react-pdf/renderer';\r\nimport { saveAs } from 'file-saver';\r\n\r\n\r\nimport helper from '../../helper';\r\n\r\n\r\nconst marks = [\r\n    {\r\n        value: 0,\r\n        label: '',\r\n    },\r\n    {\r\n      value: 4,\r\n      label: '4',\r\n    },\r\n    {\r\n      value: 1,\r\n      label: '1',\r\n    },\r\n    {\r\n      value: 2,\r\n      label: '2',\r\n    },\r\n    {\r\n      value: 3,\r\n      label: '3',\r\n    },\r\n    {\r\n        value: 5,\r\n        label: '5',\r\n      },\r\n  ];\r\nconst ValueChart = (props:any)=>{\r\n    const history = useHistory();\r\n    const printRefHighChart:any = React.useRef() \r\n    const accid = useSelector((state: any) =>state.user ? state.user.accid : null);\r\n    const UserType = useSelector((state: any) =>state.user ? state.user.type : null);\r\n    const [chartType, setChartType] =useState<any>('column')\r\n    const [Account, setAccount] = useState<any|null>(null);\r\n    const [loading,setloading] = useState<boolean>(false);\r\n    const [accountName,setAccountName] = useState<any>(props.mode =='existing_customer'? null: props.mode =='new_prospect'? props.accountName: props.mode ==='update'? props.rowData.AccountName :null)\r\n    const [domain,setDomain] = useState<any>(props.mode =='existing_customer'? null: props.mode =='new_prospect'? props.domain:props.mode ==='update'? props.rowData.Domain:null)\r\n    const [valueSum,setValueSum] = useState<any>(null)\r\n    const [spendSum,setSpendSum] = useState<any>(null)\r\n    const [valueFormula, setValueFormula] = React.useState<any>(props.mode ==='update'? props.rowData.FormulaX : 3.2);\r\n    const [customerType,setCustomerType] = useState<any|null>(props.mode ==='update'?props.rowData.CustomerType:null);\r\n    const [PrimarySalesEngineer,setPrimarySalesEngineer] = useState<any|null>(props.mode ==='update'?props.rowData.PrimarySalesEngineer:null);\r\n    const [AccountOwner,setAccountOwner] = useState<any|null>(props.mode ==='update'?props.rowData.AccountOwner:null);\r\n\r\n    const [ROI,setROI] = useState<any>(0);\r\n    const [Payback,setPayback] = useState<any>(0);\r\n    const [NPV,setNPV] = useState<any>(0);\r\n    const [Version ,setVersion] = useState<any|null>(props.mode ==='update'?props?.rowData?.Version: null)\r\n    const [category,setCategory] =useState<any|null>(props.mode ==='update'?[...props.rowData.Category]: props.mode =='existing_customer'? [...props.category]:props.mode =='new_prospect'?[...props.category]:null )\r\n    const [futureCategory,setFutrueCategory] =useState<any|null>(props.mode ==='update'?[...props.rowData.FutureCategory]:props.mode =='existing_customer'? [...props.category]:[] )\r\n\r\n    const [VersionCategory,setVersionCategory] =useState<any|null>(null)\r\n    const [spend,setSpend] = useState<any|null>({name: 'Spend', data: props.mode ==='update'? [...props.rowData.Spend]:[...props.originalData] ,color:'#cc3423', type:'column', stack:'spend',lineWidth:1.2 });\r\n    const [futureSpend,setFutureSpend] = useState<any|null>({name: 'Spend', data: props.mode ==='update'? [...props.rowData.FutureSpend]: [] ,color:'#cc3423', type:'column', stack:'spend',lineWidth:1.2 });\r\n    const [futureValue,setFutureValue] = useState<any|null>(props.mode ==='update'? [...props.rowData.FutureValue]: []);\r\n    const [actualUsage,setAcutalUsage] = useState<any|null>(props.mode ==='update'? [...props.rowData.ActualUsage]: []);\r\n\r\n    // const [allMonthsSpend,setAllMonthsSpend] = useState<any|null>({name: 'Spend', data: props.mode ==='update'? [...props.rowData.Spend,...props.rowData.FutureSpend]: [] ,color:'#cc3423', type:'column', stack:'spend',lineWidth:1.2 });\r\n\r\n    const [VersionSpend,setVersionSpend] = useState<any|null>({name: 'Spend', data: [] ,color:'#cc3423',type:'line'});\r\n    const[ShowFormulaSelector, setShowFormulaSelector] = useState<boolean>(false);\r\n    const [inputSelection1, setInputSelection1] = useState<any>({title:props.mode ==='update'? props.rowData.Title1:'',description:props.mode ==='update'? props.rowData.Description1:''}) \r\n    const [inputSelection2, setInputSelection2] = useState<any>({title:props.mode ==='update'? props.rowData.Title2:'',description:props.mode ==='update'? props.rowData.Description2:''}) \r\n\r\n\r\n    const initVariables:any = [\r\n        {name:\"Infrastructure Cost Avoidance\",data:[],value:props.mode ==='update'?props.rowData.Cloud_Native_Cost_Avoidance:35,dashStyle: 'ShortDash',lineWidth:1},\r\n        {name:\"Bridge the Skills Gap\",data:[],value:props.mode ==='update'?props.rowData.Closing_Skills_Gap:30,dashStyle: 'ShortDash',lineWidth:1},\r\n        {name:\"Increase Visibility and Control\",data:[],value:props.mode ==='update'?props.rowData.Increased_Control_and_Visibility:20,dashStyle: 'ShortDash',lineWidth:1},\r\n        {name:\"Improve your Security Posture\",data:[],value:props.mode ==='update'?props.rowData.Improve_Your_Security_Posture:10,dashStyle: 'ShortDash',lineWidth:1},\r\n        {name:\"Accelerate your Cloud Journey\",data:[],value:props.mode ==='update'?props.rowData.Accelerate_Your_Cloud_Journey:5,dashStyle: 'ShortDash',lineWidth:1},\r\n       \r\n    ];\r\n\r\n    const futureInitVariables:any = [\r\n        {name:\"Infrastructure Cost Avoidance\",data:[],value:props.mode ==='update'?props.rowData.Future_Cloud_Native_Cost_Avoidance:35,dashStyle: 'ShortDash',lineWidth:1},\r\n        {name:\"Bridge the Skills Gap\",data:[],value:props.mode ==='update'?props.rowData.Future_Closing_Skills_Gap:30,dashStyle: 'ShortDash',lineWidth:1},\r\n        {name:\"Increase Visibility and Control\",data:[],value:props.mode ==='update'?props.rowData.Future_Increased_Control_and_Visibility:20,dashStyle: 'ShortDash',lineWidth:1},\r\n        {name:\"Improve your Security Posture\",data:[],value:props.mode ==='update'?props.rowData.Future_Improve_Your_Security_Posture:10,dashStyle: 'ShortDash',lineWidth:1},\r\n        {name:\"Accelerate your Cloud Journey\",data:[],value:props.mode ==='update'?props.rowData.Future_Accelerate_Your_Cloud_Journey:5,dashStyle: 'ShortDash',lineWidth:1},\r\n       \r\n    ];\r\n    const [Variables,setVariables] = useState<any>([...initVariables]);\r\n    const [FutureVariables,setFutureVariables] = useState<any>([...futureInitVariables]);\r\n\r\n    const [Series,setSeries] = useState<any>(\r\n        [{name:\"Value Delivered\",data:[]},...initVariables]\r\n    );\r\n    const [VersionSeries,setVersionSeries] = useState<any>(\r\n        [{name:\"Value Projected\",data:[]},...initVariables]\r\n    );\r\n       \r\n    const [PredictionSeries,setPredictionSeries] = useState<any>(\r\n        [{name:\"Futrue Prediction\",data:[]},...futureInitVariables]\r\n    );  \r\n\r\n    const updateDashboard = (valueFormula,Variables,actualUsage)=>{\r\n        debugger\r\n        let _series:any = [];\r\n        // value series\r\n        _series.push({...Series[0],data:actualUsage.map(x => x * valueFormula) })\r\n        // variable series\r\n        for(let v of Variables){\r\n            _series.push({...v,data: _series[0].data.map(x => x * v.value /100) })\r\n        }\r\n        setSeries(_series)\r\n        // updateTiles(_series[0].data,spend.data)\r\n        \r\n    }\r\n\r\n    const updateFutureDashboard = (FutureVariables,futureSpend,futureValue)=>{\r\n        let _series:any = [];\r\n        // value series\r\n        _series.push({...PredictionSeries[0],data:futureSpend.data})\r\n        // variable series\r\n        for(let v of FutureVariables){\r\n            _series.push({...v,data: futureValue.map(x => x * v.value /100) })\r\n        }\r\n        setPredictionSeries(_series)        \r\n    }\r\n    useEffect(()=>{\r\n        updateDashboard(valueFormula,Variables,actualUsage)\r\n    },[Variables,spend,actualUsage])\r\n\r\n    useEffect(()=>{\r\n        debugger\r\n        updateFutureDashboard(FutureVariables,futureSpend,futureValue)\r\n    },[FutureVariables,futureSpend,futureValue])\r\n\r\n    const updateTiles = (value,spend)=>{\r\n        const valueSum = value.reduce((partialSum, a) => partialSum + a, 0);\r\n        const spendSum = spend.reduce((partialSum, a) => partialSum + a, 0);\r\n        const npv = valueSum-spendSum\r\n        const roi = (npv/spendSum)\r\n        const payback = Math.ceil(12 * (1 / (roi + 1) ) )\r\n        setValueSum(valueSum)\r\n        setSpendSum(spendSum)\r\n        setROI(roi);\r\n        setNPV(npv);\r\n        setPayback(payback)\r\n    }\r\n\r\n \r\n    \r\n     useEffect(() => {\r\n       if(props.mode=='update') \r\n        {\r\n        setSpend({...spend,data:[...props.rowData.Spend]});\r\n        setDomain(props.rowData.Domain);\r\n        setAccountName(props.rowData.AccountName);\r\n        setFutureSpend({...futureSpend,data:[...props.rowData.FutureSpend]})\r\n        }\r\n       if (Account) load();\r\n       return () => {};\r\n     }, [props.rowData,Account])\r\n     \r\n    const loadVersion1Chart = async(type)=>{\r\n        setloading(true)\r\n        \r\n      const res =   await valueIQ.getversion1Chart({domain: domain});\r\n      if(res.success){\r\n        let _series:any = [];\r\n        // value series\r\n        _series.push({...VersionSeries[0],data:res.data.Spend.map(x => x * res.data.FormulaX)})\r\n        // variable series\r\n        _series.push({name:\"Cloud Native Cost Avoidance\",data:_series[0].data.map(x => x * res.data.Cloud_Native_Cost_Avoidance/100),dashStyle: 'ShortDash',lineWidth:1})\r\n        _series.push({name:\"Increased Control and Visibility\",data:_series[0].data.map(x => x * res.data.Increased_Control_and_Visibility/100),dashStyle: 'ShortDash',lineWidth:1})\r\n        _series.push({name:\"Accelerate Your Cloud Journey\",data:_series[0].data.map(x => x * res.data.Accelerate_Your_Cloud_Journey/100),dashStyle: 'ShortDash',lineWidth:1})\r\n        _series.push({name:\"Improve Your Security Posture\",data:_series[0].data.map(x => x * res.data.Improve_Your_Security_Posture/100),dashStyle: 'ShortDash',lineWidth:1})\r\n        _series.push({name:\"Closing Skills Gap\",data:_series[0].data.map(x => x * res.data.Closing_Skills_Gap/100),dashStyle: 'ShortDash',lineWidth:1})\r\n        setVersionCategory([...res.data.Category])\r\n        setVersionSeries(_series)\r\n        setVersionSpend({...VersionSpend,data:[...res.data.Spend]})\r\n        setChartType(type)\r\n      }\r\n      else{\r\n        window.snakAlert.error(res.message);\r\n      }\r\n      setloading(false)\r\n    }\r\n    const handlerOnSelectAccount = (value:any)=>{\r\n        setAccount(value.id);\r\n    }\r\n    const handlerChangeChart = (type:any)=>{\r\n        \r\n        if(type == 'compare')\r\n        {\r\n            loadVersion1Chart(type)\r\n        }\r\n        if(type == 'column')\r\n        {\r\n           setSpend( {...spend,type:'column',color:'#cc3423'})\r\n           setChartType(type)\r\n        }\r\n        if(type == 'area'){\r\n            setSpend( {...spend,type:'line',color:'#3E3E3E'})\r\n            setChartType(type)\r\n\r\n        }\r\n        if(type == 'prediction')\r\n        {\r\n            setChartType(type)\r\n        }\r\n    }\r\n    //on account selection\r\n    const load = async()=>{\r\n        setloading(true)\r\n        const res:any = await valueIQ.existingUsage({Id: Account});\r\n        if(res.success){\r\n            if (res.data.Category.length>0)\r\n            {   \r\n                setSpend({...spend,data:[...res.data.Spend]});\r\n                setAcutalUsage(res.data.ActualUsage)\r\n                setDomain(res.data.Domain);\r\n                setAccountName(res.data.AccountName)\r\n                setCustomerType(res.data.Source)\r\n                setAccountOwner(res.data.AccountOwner)\r\n                setPrimarySalesEngineer(res.data.PrimarySalesEngineer)\r\n                setCategory(res.data.Category);\r\n                setFutureSpend({...futureSpend,data:[...res.data.FutureSpend]})\r\n                // setAllMonthsSpend({...allMonthsSpend,data:[...res.data.Spend,...res.data.FutureSpend]});\r\n                setFutureValue(res.data.FutureActualUsage.map(x => parseFloat((x*valueFormula).toFixed(2))))\r\n                if(res.data.Version){\r\n                    let _varaibles:any = []\r\n                     _varaibles.push({...initVariables[0], value:res.data.Cloud_Native_Cost_Avoidance})\r\n                     _varaibles.push({...initVariables[1], value:res.data.Closing_Skills_Gap})\r\n                     _varaibles.push({...initVariables[2], value:res.data.Increased_Control_and_Visibility})\r\n                     _varaibles.push({...initVariables[3], value:res.data.Improve_Your_Security_Posture})\r\n                     _varaibles.push({...initVariables[4], value:res.data.Accelerate_Your_Cloud_Journey})\r\n                     setVariables(_varaibles)\r\n                     setValueFormula(parseFloat(res.data.FormulaX))\r\n                     setVersion(res.data.Version)\r\n                }\r\n                \r\n            }\r\n            else{\r\n                window.snakAlert.error(\"cost data not available\")\r\n            }\r\n            \r\n        }else{\r\n            window.snakAlert.error(res.message)\r\n        }\r\n        setloading(false)\r\n    }\r\n    \r\n    function valueLabelFormat(value: any) { \r\n        return `${value}%`;\r\n    }\r\n    \r\n    const handleChangeFormula = (event: Event, newValue: any | any[]) => {\r\n        setValueFormula(newValue);\r\n    }; \r\n    \r\n      const handleDownloadPdf = async () => {\r\n          \r\n        if(printRefHighChart.current?.chart?.getSVG()) {\r\n            let b64 = `data:image/svg+xml;base64,${btoa(unescape(encodeURIComponent(printRefHighChart.current?.chart?.getSVG())))}`          \r\n            let b64Jpeg:any = await helper.SVGToJPEG(b64,600,400)\r\n            console.log(printRefHighChart.current?.chart?.getSVG())\r\n            console.log(b64)\r\n            console.log(b64Jpeg)\r\n            return b64Jpeg\r\n        }\r\n\r\n       \r\n      };    \r\n\r\n    useEffect(() => {\r\n        if (UserType === USER_TYPE.CUSTOMER) {\r\n            setAccount(accid);\r\n        }\r\n    }, [UserType]);\r\n\r\n    \r\n    const getSliderValue = (name:string)=>{\r\n        let v = Variables.filter((v)=>v.name==name);\r\n        if(v?.length > 0){\r\n            return v[0].value;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    const setSliderValue = (name:string,val:any)=>{\r\n        let _variables = [...Variables];\r\n        let v = _variables.filter((v)=>v.name==name);\r\n        if(v?.length > 0){\r\n            let vfilter = _variables.filter((v)=>v.name!=name);\r\n            let total = vfilter.map(v => v.value).reduce((oldV, newV) => oldV + newV) + val;\r\n            if(total > 100){\r\n                v[0].value = val - (total-100) ;\r\n            }else{\r\n                v[0].value = val;\r\n            }\r\n        }\r\n        setVariables(_variables)\r\n    }\r\n    const handlerShowFormulaSelector = ()=> setShowFormulaSelector(true);\r\n    const handlerOnCloseFormulaSelector = ()=> setShowFormulaSelector(false);\r\n    const handlerProjectedSave = async(projectedSpend, projectedValue)=>{\r\n        \r\n        handlerOnCloseFormulaSelector() \r\n        setFutureSpend({...futureSpend, data:projectedSpend})\r\n        setFutureValue(projectedValue)\r\n\r\n        // let mergedSpend = [...spend.data,...projectedSpend]\r\n        // setAllMonthsSpend({...allMonthsSpend,data:mergedSpend});\r\n        \r\n    }\r\n  \r\n    \r\n\r\n    return (\r\n        <> \r\n            {loading && <LinearProgress className=\"mt-4\"/>}\r\n            <div className={(UserType != USER_TYPE.CUSTOMER)?'page-content v-iq':'v-iq'}>\r\n                {UserType != USER_TYPE.CUSTOMER &&  \r\n                <>\r\n                <Grid container spacing={12}>\r\n\r\n                        <Grid item md={6}>\r\n                            <h2>ValueIQ <span>Aviatrix Usage ValueIQ Report</span></h2>\r\n                        </Grid>\r\n\r\n                        {props.mode == 'existing_customer' &&\r\n                            <Grid item md={6}>\r\n\r\n                                <Grid container justifyContent=\"flex-end\">\r\n\r\n                                    <Grid item md={8}>\r\n                                        <SearchableDropdown action=\"searchAccount\" onSelect={(value: any) => handlerOnSelectAccount(value)} />\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n                            </Grid>}\r\n                    </Grid><Divider /><br />\r\n                    </>\r\n                }\r\n                \r\n                <Grid container spacing={4}>\r\n                    \r\n                    <Grid item md={3}>\r\n                        <Grid container spacing ={2}>\r\n                            <Grid item>\r\n                                 <h3 style={{margin:'0px'}}>Account: {accountName ? accountName: 'NaN'}</h3>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Divider/>\r\n                        <Grid container spacing={4} flexDirection='row' pt={2}>\r\n                            <Grid item >\r\n                                <Tooltip title=\"VlaueIQ\" followCursor componentsProps={{tooltip: {sx: {bgcolor: \"#11417f\", },},}}>\r\n                                     <Icon className={`chart-type ${chartType=='column' && 'chart-selected'}`} onClick={()=>handlerChangeChart('column')}>assessment_rounded_icon</Icon>\r\n                                </Tooltip>  \r\n                            </Grid>\r\n                            <Grid item > \r\n                                <Tooltip title=\"Stacked Comparison\" followCursor componentsProps={{tooltip: {sx: {bgcolor: \"#11417f\", },},}}>\r\n                                    <Icon className={`chart-type ${chartType=='area' && 'chart-selected'}`} onClick={()=>handlerChangeChart('area')}>account_tree_rounded_icon</Icon>\r\n                                </Tooltip>    \r\n                            </Grid>\r\n                              <><Grid item>\r\n                                <Tooltip title=\"Prediction\" followCursor componentsProps={{ tooltip: { sx: { bgcolor: \"#11417f\", }, }, }}>\r\n                                    <Icon className={`chart-type ${chartType == 'prediction' && 'chart-selected'}`} onClick={() => handlerChangeChart('prediction')}>timeline_icon</Icon>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            {/* {UserType != USER_TYPE.CUSTOMER &&\r\n                                <Grid item>\r\n                                    <Tooltip title=\"Change Prediction Values\" followCursor componentsProps={{ tooltip: { sx: { bgcolor: \"#11417f\", }, }, }}>\r\n                                        <Icon className={`chart-type ${chartType == 'compare' && 'chart-selected'}`} onClick={handlerShowFormulaSelector}>post_add</Icon>\r\n                                    </Tooltip>\r\n                                </Grid>} */}\r\n                                {Version == 2 &&<Grid item>\r\n                                    <Tooltip title=\"Version Comparison\" followCursor componentsProps={{ tooltip: { sx: { bgcolor: \"#11417f\", }, }, }}>\r\n                                        <Icon className={`chart-type ${chartType == 'compare' && 'chart-selected'}`} onClick={() => handlerChangeChart('compare')}>compare_arrows_rounded_icon</Icon>\r\n                                    </Tooltip>\r\n                                </Grid>}\r\n                                </>\r\n                        \r\n                        </Grid>\r\n                    {UserType != USER_TYPE.CUSTOMER &&\r\n                        <><Paper elevation={1} className=\"section\">\r\n                                <div className='slider-section'>\r\n                                    <label><strong>Adjust Formula: Return on Investment <span className='s-v'>{valueFormula}</span> </strong></label>\r\n                                    <Slider\r\n                                        aria-label=\"Custom marks\"\r\n                                        // defaultValue={2}\r\n                                        value={valueFormula}\r\n                                        // getAriaValueText={valuetext}\r\n                                        step={0.1}\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        marks={marks}\r\n                                        min={0}\r\n                                        max={5}\r\n                                        onChange={handleChangeFormula}\r\n                                        onChangeCommitted={(event: any, value: any) => { updateDashboard(value, Variables, actualUsage); } } />\r\n                                    <Divider />\r\n                                    {Variables && Variables.map((variable: any, ind: number) => (\r\n                                        <>\r\n                                            <label>{variable.name} <span className='s-v'>{getSliderValue(variable.name)}%</span></label>\r\n                                            <Slider\r\n                                                aria-label=\"Custom marks\"\r\n                                                defaultValue={25}\r\n                                                value={getSliderValue(variable.name)}\r\n                                                // getAriaValueText={valuetext1}\r\n                                                valueLabelFormat={valueLabelFormat}\r\n                                                step={1}\r\n                                                valueLabelDisplay=\"auto\"\r\n                                                onChange={(event, newValue) => { setSliderValue(variable.name, newValue); } }\r\n                                                // marks={marks}\r\n                                                min={0}\r\n                                                max={100} />\r\n                                            <Divider />\r\n                                        </>\r\n                                    ))}\r\n\r\n                                </div>\r\n                            </Paper><Paper elevation={1} className=\"section mt-10 font-11 font-grey\">\r\n                                    <strong>Formulas</strong><Divider className='mt-4 mb-4' />\r\n                                    <ul>\r\n                                        <li>Net Benefit = Benefits - Cost (in dollars)</li>\r\n                                        <li>ROI = Net Benefit / Cost (in percentage)</li>\r\n                                        <li>Payback Period = roundup(12 x (1 / (ROI in  percentage + 1) ) ) in months</li>\r\n                                        <li>3 Months Cost of Delay = Net Benefits / 4 (in dollars)</li>\r\n                                    </ul>\r\n                                    <br />\r\n                                    <strong>Additional Information</strong>\r\n                                    <Divider className='mt-4 mb-4' />\r\n                                    <ul>\r\n                                        <li>Customer Type: {customerType}</li>\r\n                                        <li>Actual Total Cost (Last 12 Months): {((spend.data.reduce((partialSum, a) => partialSum + a, 0))/1000).toFixed(0)}k</li>\r\n                                        <li>Actual Average Monthly Cost: {(((spend.data.reduce((partialSum, a) => partialSum + a, 0))/12)/1000).toFixed(0)}k</li>\r\n                                        <li>Usage Run Rate (Last 12 Months): {((actualUsage.reduce((partialSum, a) => partialSum + a, 0))/1000).toFixed(0)}k</li>\r\n                                        <li>Usage Run Rate Average Monthly: {(((actualUsage.reduce((partialSum, a) => partialSum + a, 0))/12)/1000).toFixed(0)}k</li>\r\n\r\n                                    </ul>\r\n                                </Paper><br /></>\r\n                    }\r\n                    </Grid>\r\n                   \r\n                    \r\n                    <Grid item md={UserType != USER_TYPE.CUSTOMER ? 9:12}>\r\n                    {1==1 && <>\r\n                   \r\n                        <Paper elevation={1} className=\"section\">\r\n                            \r\n                            <Suspense\r\n                                fallback={\r\n                                <Stack justifyContent=\"center\" direction=\"row\">\r\n                                    Loading...\r\n                                </Stack>\r\n                                }>\r\n                                  \r\n                                   {chartType=='column'? <StackedColumn\r\n                                    category={category}\r\n                                    series={[...Series.slice(1,Series.length), spend]}\r\n                                    Value={[...Series[0].data]}\r\n                                    title={\"Value Delivered Overtime\"}\r\n                                    spend={[...spend.data]}\r\n                                    updateTiles={updateTiles} \r\n                                    ref={printRefHighChart}/>: \r\n                                    chartType=='area'?\r\n                                    <AreaChart\r\n                                    category={category}\r\n                                    series={ [ ...Series.slice(1,Series.length),spend]}\r\n                                    title={\"Value Delivered Overtime - Stacked\"}\r\n                                    />:\r\n                                    chartType=='compare'?\r\n                                    <>\r\n                                     {/* <h3 className='comparison-heading'>Comparison between version 1 and 2 </h3> */}\r\n                                    <Paper elevation={1} className=\"section mb-20\">\r\n                                        <LineChart\r\n                                        category={category}\r\n                                        series={[{...VersionSeries[0]},{...Series[0]},spend]}\r\n                                        title={\"Projected Value vs. Value Delivered\"}\r\n                                        \r\n                                        ref={printRefHighChart}/>\r\n                                    </Paper>\r\n                                   \r\n                                    </>:\r\n                                    chartType=='prediction'? <FutureChart\r\n                                    futureCategory={[...futureCategory]}\r\n                                    pastCategory={[...category]}\r\n                                    futureSeries={[...PredictionSeries]}\r\n                                    pastSeries={Series}\r\n                                    pastSpend={{...spend,type:'column',color:'#cc3423'}}\r\n                                    futureSpend={{...futureSpend}}\r\n                                    updateTiles={updateTiles}\r\n                                    futureValue={[...futureValue]}\r\n                                    title={\"Value Delivered Overtime\"}\r\n                                    // updateDuration={updateDuration}\r\n                                    />:\r\n                                    <div className=\"wrapper-prediction\">\r\n                                        <img id='slide' src={img1} />\r\n                                    </div>\r\n                                    \r\n                                    }\r\n                                    \r\n                                \r\n                            </Suspense>\r\n                        </Paper>\r\n                        <Grid container spacing={4}>\r\n                            <Grid item md={4}>\r\n                                <Paper elevation={1} className=\"section mt-10 v-iq-stat\">\r\n                                    <Icon className='icon'>monetization_on</Icon>\r\n                                    ROI\r\n                                    <span className='val'>\r\n                                        <AnimatedNumber value={ROI*100} duration={800} stepPrecision={2} formatValue={n => n.toFixed(0) }/>%\r\n                                    </span>\r\n                                </Paper>\r\n                            </Grid>\r\n                            <Grid item md={4}>\r\n                                <Paper elevation={1} className=\"section mt-10 v-iq-stat\">\r\n                                    <Icon className='icon'>savings</Icon>\r\n                                    Net Benefit \r\n                                    <span className='val'>\r\n                                        $<AnimatedNumber value={NPV/1000} duration={800}  stepPrecision={2} formatValue={n => n.toFixed(0) }/>k\r\n                                    </span>\r\n                                </Paper>\r\n                            </Grid>\r\n                            <Grid item md={4}>\r\n                                <Paper elevation={1} className=\"section mt-10 v-iq-stat\">\r\n                                    <Icon className='icon'>currency_exchange</Icon>\r\n                                    PAYBACK PERIOD\r\n                                    <span className='val'>\r\n                                        {\r\n                                            customerType == 'metered'? \r\n                                            <>Immediate</>:<><AnimatedNumber value={Payback} stepPrecision={2} duration={800} formatValue={n => n }/> Months</>\r\n                                        }\r\n                                        \r\n                                    </span>\r\n                                </Paper>\r\n                            </Grid>\r\n                            <Grid item md={4}>\r\n                                <Paper elevation={1} className=\"section mt-10 v-iq-stat\">\r\n                                    <Icon className='icon'>money_outlined_icon</Icon>\r\n                                    Total Cost\r\n                                    <span className='val'>\r\n                                        $<AnimatedNumber value={(valueSum-NPV)/1000} duration={800} stepPrecision={2} formatValue={n => n.toFixed(0) }/>k\r\n                                    </span>\r\n                                </Paper>\r\n                            </Grid>\r\n                            <Grid item md={4}>\r\n                                <Paper elevation={1} className=\"section mt-10 v-iq-stat\">\r\n                                    <Icon className='icon'>account_balance_wallet_outlined_icon</Icon>\r\n                                    Total Benefit\r\n                                    <span className='val'>\r\n                                        $<AnimatedNumber value={(NPV+spendSum)/1000} duration={800}  stepPrecision={2} formatValue={n => n.toFixed(0) }/>k\r\n                                    </span>\r\n                                </Paper>\r\n                            </Grid>\r\n                            <Grid item md={4}>\r\n                                <Paper elevation={1} className=\"section mt-10 v-iq-stat\">\r\n                                    <Icon className='icon'>account_balance_outlined_icon</Icon>\r\n                                    3 Months Cost of Delay\r\n                                    <span className='val'>\r\n                                        $<AnimatedNumber value={((NPV/4)/1000)} duration={1000}  stepPrecision={2} formatValue={n => n.toFixed(0) }/>k\r\n                                    </span>\r\n                                </Paper>\r\n                            </Grid>\r\n                            {UserType != USER_TYPE.CUSTOMER && <><Grid item md={6}>\r\n                                    <Paper elevation={1} className=\"section mt-10\">\r\n                                        <TextField fullWidth label='Title' size=\"small\" variant=\"outlined\" margin=\"dense\" value={inputSelection1.title} onChange={(e) => { setInputSelection1({ ...inputSelection1, title: e.target.value }); } } />\r\n                                        <TextField multiline rows={2} maxRows={3} fullWidth label='Description' size=\"small\" variant=\"outlined\" margin=\"dense\" value={inputSelection1.description} onChange={(e) => { setInputSelection1({ ...inputSelection1, description: e.target.value }); } } />\r\n\r\n                                    </Paper>\r\n                                </Grid><Grid item md={6}>\r\n                                        <Paper elevation={1} className=\"section mt-10\">\r\n                                            <TextField fullWidth label='Title' size=\"small\" variant=\"outlined\" margin=\"dense\" value={inputSelection2.title} onChange={(e) => { setInputSelection2({ ...inputSelection2, title: e.target.value }); } } />\r\n                                            <TextField multiline rows={2} maxRows={3} fullWidth label='Description' size=\"small\" variant=\"outlined\" margin=\"dense\" value={inputSelection2.description} onChange={(e) => { setInputSelection2({ ...inputSelection2, description: e.target.value }); } } />\r\n\r\n                                        </Paper>\r\n                                    </Grid></>}\r\n                        </Grid>\r\n                   \r\n               \r\n                        <br/><Divider/>\r\n                        {UserType === USER_TYPE.CUSTOMER &&\r\n                            <><Paper elevation={1} className=\"section mt-10 font-11 font-grey\">\r\n                                    <strong>Formulas</strong><Divider className='mt-4 mb-4' />\r\n                                    <ul>\r\n                                        <li>Net Benefit = Benefits - Cost (in dollars)</li>\r\n                                        <li>ROI = Net Benefit / Cost (in percentage)</li>\r\n                                        <li>Payback Period = roundup(12 x (1 / (ROI in  percentage + 1) ) ) in months</li>\r\n                                        <li>3 Months Cost of Delay = Net Benefits / 4 (in dollars)</li>\r\n                                    </ul>\r\n                                </Paper><br /></>\r\n                        }\r\n                        <br/>\r\n                        {UserType != USER_TYPE.CUSTOMER &&\r\n                        <><Grid container justifyContent=\"right\">\r\n\r\n                                    <Grid item mr={3}>\r\n                                        <Button startIcon={<Icon>arrow_back_icon</Icon>}\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            onClick={() => props.back()}>Back</Button>\r\n                                    </Grid>\r\n                                    <Grid item mr={3}>\r\n                                        <Button startIcon={<Icon>settings_input_composite_rounded_icon</Icon>}\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            onClick={handlerShowFormulaSelector}>Configure Prediction Values</Button>\r\n                                    </Grid>\r\n                                    <Grid item mr={3}>\r\n                                        <Button startIcon={<Icon>download_rounded_icon</Icon>}\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            onClick={async () => {\r\n                                                const b64Jpeg = await handleDownloadPdf();\r\n                                                // const doc = <PdfDocument Image={b64Jpeg} ROI={ROI*100} NPV={NPV?.toFixed(2)} Payback={Payback} TotalCost={(valueSum-NPV).toFixed(2)} TotalBenefit={(NPV+spendSum)?.toFixed(2)} accountName={accountName}  TotalValue={((valueSum/100)*ROI)?.toFixed(2)}/>;\r\n                                                // const asPdf:any = pdf(); \r\n                                                // asPdf.updateContainer(doc);\r\n                                                // const blob = await asPdf.toBlob();\r\n                                                // saveAs(blob, 'ValueIQ.pdf');\r\n                                              }}\r\n                                        >\r\n                                            Download PDF\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Button startIcon={<Icon>save</Icon>}\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            onClick={() => props.saveChart(spend,customerType,FutureVariables,inputSelection1,inputSelection2,futureValue,futureCategory,futureSpend,AccountOwner,PrimarySalesEngineer,category, Variables, ROI, NPV, valueFormula, accountName, domain, props?.rowData?.ValueIQID)}>Save</Button>\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n                                \r\n                                    </>\r\n                        \r\n                        }   \r\n                        </>}      \r\n                    </Grid>\r\n                    \r\n                    \r\n                </Grid>\r\n\r\n            </div>\r\n            <ModalDialog    \r\n                fullScreen={true}   \r\n                maxWidth=\"lg\"\r\n                title={`Adjust Projection Settings`}\r\n                component={<DialogPredictionSettings onClose={handlerOnCloseFormulaSelector} \r\n                handlerSave={handlerProjectedSave}\r\n                futureSpend={futureSpend.data}\r\n                futureValue={futureValue}\r\n                futureCategory={futureCategory}\r\n                futureVariables={FutureVariables}\r\n                setFutureVariables={setFutureVariables}\r\n                />}\r\n                open={ShowFormulaSelector}\r\n                onClose={handlerOnCloseFormulaSelector}\r\n                \r\n            />                     \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ValueChart;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\Dialog\\ContactAddDialog.tsx",["2071","2072"],"import { Button, Grid, Stack, TextField } from '@mui/material'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport supportContact from '../../services/supportContact'\r\ninterface ContactForm{\r\n    name: '',\r\n    email: '',\r\n    phone: ''\r\n}\r\nconst ContactAddDialog = (props: any) => {\r\n    \r\n    const [contactInfo, setContactInfo] = useState<any>({\r\n        name: '',\r\n        email: '',\r\n        phone: ''\r\n    })\r\n    const [isUpdated, setIsUpdated] = useState<boolean>(false)\r\n    const UserID = useSelector((state: any) =>\r\n    state.user ? state.user.id : null\r\n    );\r\n\r\n    const getSupportContact = async () => {\r\n        let res = await supportContact.get({\r\n            UserID: UserID\r\n        })\r\n        if (res.success) {\r\n            if (res?.data) {\r\n                setContactInfo({\r\n                    name: res?.data?.Name,\r\n                    email: res?.data?.Email,\r\n                    phone: res?.data?.Phone,\r\n                })\r\n                setIsUpdated(true)\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n      \r\n        getSupportContact()\r\n        return () => {\r\n            setIsUpdated(false)\r\n        }\r\n    }, [])\r\n    \r\n    const addContact = async () => {\r\n        let res\r\n        if (isUpdated) {\r\n            res = await supportContact.update({\r\n                Name: contactInfo.name,\r\n                Email: contactInfo.email,\r\n                Phone: contactInfo.phone,\r\n                UserID: UserID\r\n            })\r\n        } else {\r\n            res = await supportContact.create({\r\n                Name: contactInfo.name,\r\n                Email: contactInfo.email,\r\n                Phone: contactInfo.phone,\r\n                UserID: UserID\r\n            })\r\n        }\r\n        \r\n        if (res?.success) {\r\n            props.onClose();\r\n            if (isUpdated) window.snakAlert.success(\"Contact updated successfully\")\r\n            else window.snakAlert.success(\"Contact added successfully\")\r\n          } else {\r\n            props.onClose();\r\n            window.snakAlert.error(res?.message);\r\n          }\r\n    }\r\n  \r\n    const handleContactSubmit = () => {\r\n        // Hit API for adding form info\r\n        addContact()\r\n    }\r\n    const handleInputChange = (e) => {\r\n        setContactInfo({\r\n            ...contactInfo,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container spacing={3} mt={3}>\r\n                    <Grid item md={12}>\r\n                        <TextField size=\"small\" id=\"full-width-text-field\" onChange={(e) => handleInputChange(e)} label=\"Name\" name=\"name\" fullWidth value={contactInfo?.name} />\r\n                    </Grid>\r\n                    <Grid item md={12}>\r\n                        <TextField size=\"small\" id=\"full-width-text-field\" onChange={(e) => handleInputChange(e)} label=\"Email\" name=\"email\" fullWidth value={contactInfo?.email} />\r\n                    </Grid>\r\n                    <Grid item md={12}>\r\n                        <TextField size=\"small\" id=\"full-width-text-field\" onChange={(e) => handleInputChange(e)} label=\"Phone\" name=\"phone\" fullWidth value={contactInfo?.phone} />\r\n                    </Grid>\r\n                    <Grid item md={12}>\r\n                    <Stack justifyContent=\"right\" direction=\"row\">\r\n                        <Button disabled={contactInfo?.phone?.length < 1} variant=\"contained\" color=\"secondary\" onClick={handleContactSubmit} autoFocus>Submit</Button>\r\n                    </Stack>\r\n                    </Grid>\r\n                \r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ContactAddDialog","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\CSPImage.tsx",["2073","2074","2075","2076","2077"],"import React from 'react';\r\n\r\nimport { CSP_TYPE } from '../const';\r\n\r\nimport imgAWS from '../assets/images/aws.png';\r\nimport imgAzure from '../assets/images/azure.png';\r\nimport imgGCP from '../assets/images/gcp.png';\r\nimport imgOCI from '../assets/images/oci.png';\r\n\r\nconst CSPImage = ({name,size})=>{\r\n    let img:any = null;\r\n    if(name.toLowerCase() == CSP_TYPE.AWS) img = imgAWS;\r\n    if(name.toLowerCase() == CSP_TYPE.AZURE) img = imgAzure;\r\n    if(name.toLowerCase() == CSP_TYPE.GCP) img = imgGCP;\r\n    if(name.toLowerCase() == CSP_TYPE.OCI) img = imgOCI;\r\n    if(size==null) size=\"90px\"\r\n    return (\r\n        <>\r\n            <img style={{width:size}} src={img}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CSPImage;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\edp\\index.tsx",["2078","2079","2080","2081","2082","2083","2084","2085","2086","2087","2088","2089","2090"],"import React,{useState,useEffect} from 'react';\r\nimport { Grid, Paper,Stack,Button, Icon, Tooltip, IconButton, LinearProgress } from '@mui/material';\r\nimport DataTable, { ExpanderComponentProps,TableRow }  from 'react-data-table-component';\r\n\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport ListFilter from './ListFilter';\r\n\r\nimport ModalDialog from '../../../components/ModalDialog';\r\nimport billingConfigurator from '../../../services/billingConfigurator';\r\nimport { BILLING_PLAN_STATUS } from '../../../const';\r\nimport helper from '../../../helper';\r\n\r\n\r\nconst mockData = [\r\n    {Account:\"FBUTest\",Domain:\"FBUtest.com\",Status:\"PENDING\",CreatedBy:\"Admin\",DateCreated:\"2022-01-01\"},\r\n    {Account:\"COMCAST\",Domain:\"comcast.com\",Status:\"APPROVED\",CreatedBy:\"Admin\",DateCreated:\"2022-01-01\"},\r\n    {Account:\"DXC\",Domain:\"dxc.com\",Status:\"PENDING\",CreatedBy:\"Admin\",DateCreated:\"2022-01-01\"}\r\n]\r\n\r\nconst EDP = ()=>{\r\n    const initData = {rows:mockData,count:0,page:1};\r\n    const [Data,setData] = useState<any>(initData);\r\n    const [Filter,setFilter] = useState<any>({page:1});\r\n    const [loading,setloading] = useState<boolean>(false);\r\n\r\n    const[InfoDialog, setInfoDialog] = useState<any>({show:false,id:null});\r\n    const[FeedDialog, setFeedDialog] = useState<any>({show:false,id:null});\r\n\r\n    const handlerFilterChange = (filter:any)=>{\r\n        setFilter({...filter});\r\n    }\r\n\r\n    const onPagingChange = (page:number)=>{\r\n        setFilter({...Filter,page:page});\r\n    }\r\n\r\n    const load = async()=>{\r\n        setloading(true);\r\n        \r\n        /*let res:any = await billingConfigurator.planList({...Filter});\r\n        if(res.success){\r\n            setData(res.data)\r\n        }*/\r\n        setloading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(Object.keys(Filter).length > 0)\r\n            load();\r\n    }, [Filter])\r\n\r\n    \r\n    const handlerCloseInfoDialog = (refresh:boolean=false)=> {\r\n        setInfoDialog({id:null,show:false});\r\n        if(refresh){\r\n            load();\r\n        }\r\n    }\r\n    const handlerShowInfoDialog = (id)=> {\r\n        setInfoDialog({id:id,show:true});\r\n    }\r\n\r\n    const handlerShowFeedDialog = (id)=> {\r\n        setFeedDialog({id:id,show:true});\r\n    }\r\n\r\n    const handlerOnCloseFeedDialog = ()=>{\r\n        setFeedDialog({...FeedDialog,show:false});\r\n    }\r\n\r\n    const columns:any = [\r\n        {\r\n            name: 'Account',\r\n            selector: 'Account',\r\n            compact:true,\r\n            width:'160px',\r\n        },\r\n        {\r\n            name: 'Domain',\r\n            selector: 'Domain',\r\n            compact:true,\r\n            //hide:1200,\r\n        },\r\n        {\r\n            name: 'Status',\r\n            selector: 'Status',\r\n            compact:true,\r\n            //hide:1200,\r\n        },\r\n        {\r\n            name: 'Created By',\r\n            selector: 'CreatedBy',\r\n            compact:true,\r\n            width:'140px',\r\n            //hide:1200,\r\n        },\r\n        {\r\n            name: 'Date Created',\r\n            selector: 'DateCreated',\r\n            compact:true,\r\n            width:'140px',\r\n            //hide:1200,\r\n        },\r\n        {\r\n            name: '',\r\n            //selector: 'MPID',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                    <Tooltip title=\"Edit\" >\r\n                        <IconButton size=\"small\" className=\"action\" component={RLink} to={`/billing/configurator/plan/${row.PlanID}`}>\r\n                            <Icon className=\"icon-blue\">edit</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    \r\n                    <Tooltip title=\"View Billing Plan\">\r\n                        <IconButton size=\"small\" className=\"action\" \r\n                            onClick={()=>{\r\n                                handlerShowInfoDialog(row.PlanID);\r\n                            }}>\r\n                            <Icon className=\"icon-blue\">library_add_check</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    \r\n                </>\r\n          }\r\n      ];\r\n\r\n    return (\r\n        <>\r\n            <div className=\"page-content\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={5} lg={6} xs={12}>\r\n                        <h2>Enterprise Discount Program <span>List of all Accounts</span></h2>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    <ListFilter onChangeFilter={handlerFilterChange}/>\r\n                </Paper>\r\n                \r\n                {loading && <LinearProgress className=\"mt--4\"/>}\r\n\r\n                <Paper elevation={1} className=\"section mt-14\">\r\n                    <DataTable className='table'\r\n                        title=\"\"\r\n                        noHeader={true}\r\n                        columns={columns}\r\n                        dense={true}\r\n                        \r\n                        data={Data.rows}\r\n                        highlightOnHover={true}\r\n                        pagination={true}\r\n                        paginationServer={true}\r\n                        paginationTotalRows={Data.count}\r\n                        paginationPerPage={20}\r\n                        paginationComponentOptions={ {noRowsPerPage: true}}\r\n                        paginationDefaultPage={Filter.page}\r\n                        //paginationResetDefaultPage={!Filter.page}\r\n                        onChangePage={(page:number)=>{onPagingChange(page)}}\r\n                        //expandableRows \r\n                        //expandableRowsComponent={ExpandedComponent}\r\n                        //conditionalRowStyles={conditionalRowStyles}\r\n                    />        \r\n                </Paper>\r\n\r\n            </div>\r\n             \r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EDP;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\splitbilling\\index.tsx",["2091","2092","2093","2094","2095","2096","2097","2098","2099","2100","2101","2102","2103"],"import React,{useState,useEffect} from 'react';\r\nimport { Grid, Paper,Stack,Button, Icon, Tooltip, IconButton, LinearProgress } from '@mui/material';\r\nimport DataTable, { ExpanderComponentProps,TableRow }  from 'react-data-table-component';\r\n\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport ListFilter from './ListFilter';\r\n\r\nimport ModalDialog from '../../../components/ModalDialog';\r\nimport billingConfigurator from '../../../services/billingConfigurator';\r\nimport { BILLING_PLAN_STATUS } from '../../../const';\r\nimport helper from '../../../helper';\r\n\r\n\r\nconst mockData = [\r\n    {Account:\"FBUTest\",Domain:\"FBUtest.com\",Status:\"PENDING\",CreatedBy:\"Admin\",DateCreated:\"2022-01-01\"},\r\n    {Account:\"COMCAST\",Domain:\"comcast.com\",Status:\"APPROVED\",CreatedBy:\"Admin\",DateCreated:\"2022-01-01\"},\r\n    {Account:\"DXC\",Domain:\"dxc.com\",Status:\"PENDING\",CreatedBy:\"Admin\",DateCreated:\"2022-01-01\"}\r\n]\r\n\r\nconst SplitBillingAccounts = ()=>{\r\n    const initData = {rows:mockData,count:0,page:1};\r\n    const [Data,setData] = useState<any>(initData);\r\n    const [Filter,setFilter] = useState<any>({page:1});\r\n    const [loading,setloading] = useState<boolean>(false);\r\n\r\n    const[InfoDialog, setInfoDialog] = useState<any>({show:false,id:null});\r\n    const[FeedDialog, setFeedDialog] = useState<any>({show:false,id:null});\r\n\r\n    const handlerFilterChange = (filter:any)=>{\r\n        setFilter({...filter});\r\n    }\r\n\r\n    const onPagingChange = (page:number)=>{\r\n        setFilter({...Filter,page:page});\r\n    }\r\n\r\n    const load = async()=>{\r\n        setloading(true);\r\n        \r\n        /*let res:any = await billingConfigurator.planList({...Filter});\r\n        if(res.success){\r\n            setData(res.data)\r\n        }*/\r\n        setloading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(Object.keys(Filter).length > 0)\r\n            load();\r\n    }, [Filter])\r\n\r\n    \r\n    const handlerCloseInfoDialog = (refresh:boolean=false)=> {\r\n        setInfoDialog({id:null,show:false});\r\n        if(refresh){\r\n            load();\r\n        }\r\n    }\r\n    const handlerShowInfoDialog = (id)=> {\r\n        setInfoDialog({id:id,show:true});\r\n    }\r\n\r\n    const handlerShowFeedDialog = (id)=> {\r\n        setFeedDialog({id:id,show:true});\r\n    }\r\n\r\n    const handlerOnCloseFeedDialog = ()=>{\r\n        setFeedDialog({...FeedDialog,show:false});\r\n    }\r\n\r\n    const columns:any = [\r\n        {\r\n            name: 'Account',\r\n            selector: 'Account',\r\n            compact:true,\r\n            width:'160px',\r\n        },\r\n        {\r\n            name: 'Domain',\r\n            selector: 'Domain',\r\n            compact:true,\r\n            //hide:1200,\r\n        },\r\n        {\r\n            name: 'Status',\r\n            selector: 'Status',\r\n            compact:true,\r\n            //hide:1200,\r\n        },\r\n        {\r\n            name: 'Created By',\r\n            selector: 'CreatedBy',\r\n            compact:true,\r\n            width:'140px',\r\n            //hide:1200,\r\n        },\r\n        {\r\n            name: 'Date Created',\r\n            selector: 'DateCreated',\r\n            compact:true,\r\n            width:'140px',\r\n            //hide:1200,\r\n        },\r\n        {\r\n            name: '',\r\n            //selector: 'MPID',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                    <Tooltip title=\"Edit\" >\r\n                        <IconButton size=\"small\" className=\"action\" component={RLink} to={`/billing/configurator/plan/${row.PlanID}`}>\r\n                            <Icon className=\"icon-blue\">edit</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    \r\n                    <Tooltip title=\"View Billing Plan\">\r\n                        <IconButton size=\"small\" className=\"action\" \r\n                            onClick={()=>{\r\n                                handlerShowInfoDialog(row.PlanID);\r\n                            }}>\r\n                            <Icon className=\"icon-blue\">library_add_check</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    \r\n                </>\r\n          }\r\n      ];\r\n\r\n    return (\r\n        <>\r\n            <div className=\"page-content\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={5} lg={6} xs={12}>\r\n                        <h2>Multi-Cloud Split Billing <span>List of all Accounts</span></h2>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    <ListFilter onChangeFilter={handlerFilterChange}/>\r\n                </Paper>\r\n                \r\n                {loading && <LinearProgress className=\"mt--4\"/>}\r\n\r\n                <Paper elevation={1} className=\"section mt-14\">\r\n                    <DataTable className='table'\r\n                        title=\"\"\r\n                        noHeader={true}\r\n                        columns={columns}\r\n                        dense={true}\r\n                        \r\n                        data={Data.rows}\r\n                        highlightOnHover={true}\r\n                        pagination={true}\r\n                        paginationServer={true}\r\n                        paginationTotalRows={Data.count}\r\n                        paginationPerPage={20}\r\n                        paginationComponentOptions={ {noRowsPerPage: true}}\r\n                        paginationDefaultPage={Filter.page}\r\n                        //paginationResetDefaultPage={!Filter.page}\r\n                        onChangePage={(page:number)=>{onPagingChange(page)}}\r\n                        //expandableRows \r\n                        //expandableRowsComponent={ExpandedComponent}\r\n                        //conditionalRowStyles={conditionalRowStyles}\r\n                    />        \r\n                </Paper>\r\n\r\n            </div>\r\n             \r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SplitBillingAccounts;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\supportContact.ts",["2104"],"import client from \"./client\";\r\n\r\nconst create = async(params)=>{\r\n    let res:any = await client.post(\"supportContact/create\",params);\r\n    return res;\r\n}\r\n\r\nconst get = async(params)=>{\r\n    let res:any = await client.get(\"supportContact/get\",params);\r\n    return res;\r\n}\r\n\r\nconst update = async(params)=>{\r\n    let res:any = await client.post(\"supportContact/update\",params);\r\n    return res;\r\n}\r\nexport default {\r\n    create,\r\n    get,\r\n    update\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\edp\\ListFilter.tsx",["2105","2106","2107","2108","2109","2110"],"import { Button, FormControl, Grid, Icon, InputLabel, MenuItem, Paper, Select, Stack, TextField, Tooltip } from '@mui/material';\r\nimport React,{useState} from 'react';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport ModalDialog from '../../../components/ModalDialog';\r\nimport ModelSplitBilling from './ModelEDP';\r\n\r\nconst ListFilter = (props:any)=>{\r\n\r\n    const [Status,setStatus] = useState('')\r\n    const [Term,setTerm] = useState('')\r\n    \r\n    const[ShowSplitBilling, setShowSplitBilling] = useState<boolean>(false);\r\n    \r\n    const handlerChangeTerm = (e:any)=> setTerm(e.target.value)\r\n\r\n    const handlerClickSearch = ()=>{\r\n        props.onChangeFilter({page:1,status:Status,term:Term});\r\n    }\r\n\r\n    const handlerClickClear = ()=>{\r\n        props.onChangeFilter({status:'',page:1});\r\n        setTerm('');\r\n        setStatus('');\r\n    }\r\n\r\n    const handlerShowSplitBilling = ()=> setShowSplitBilling(true)\r\n    const handlerOnCloseSplitBilling = ()=> setShowSplitBilling(false);\r\n    \r\n    return (\r\n        <>\r\n            <Grid container spacing={3} >\r\n                <Grid item md={3} sm={6} xs={12}>\r\n                    <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search by Account / Domain\" value={Term} onChange={handlerChangeTerm} />\r\n                </Grid>\r\n                <Grid item md={2} sm={6} xs={6}>\r\n                    <Tooltip title=\"Search\">\r\n                        <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={handlerClickSearch}>\r\n                            <Icon>search</Icon>\r\n                        </Button>\r\n                    </Tooltip>\r\n                    &nbsp;\r\n                    <Tooltip title=\"Clear Search\">\r\n                        <Button size=\"large\" variant=\"contained\" onClick={handlerClickClear}>\r\n                            <Icon>settings_backup_restore</Icon>\r\n                        </Button>\r\n                    </Tooltip>\r\n                </Grid> \r\n                <Grid item md={7} sm={6} xs={6}>\r\n                    <Stack direction=\"row\" justifyContent=\"right\" >\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={handlerShowSplitBilling}>\r\n                            <Icon>post_add</Icon> &nbsp; New EDP\r\n                        </Button>\r\n                    </Stack>\r\n                </Grid> \r\n            </Grid>\r\n\r\n            <ModalDialog    \r\n                fullScreen={true}   \r\n                title={`Manage EDP`}\r\n                component={<ModelSplitBilling />}\r\n                open={ShowSplitBilling}\r\n                onClose={handlerOnCloseSplitBilling}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListFilter;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\splitbilling\\ListFilter.tsx",["2111","2112","2113","2114","2115","2116"],"import { Button, FormControl, Grid, Icon, InputLabel, MenuItem, Paper, Select, Stack, TextField, Tooltip } from '@mui/material';\r\nimport React,{useState} from 'react';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport ModalDialog from '../../../components/ModalDialog';\r\nimport ModelSplitBilling from './ModelSplitBilling';\r\n\r\nconst ListFilter = (props:any)=>{\r\n\r\n    const [Status,setStatus] = useState('')\r\n    const [Term,setTerm] = useState('')\r\n    \r\n    const[ShowSplitBilling, setShowSplitBilling] = useState<boolean>(false);\r\n    \r\n    const handlerChangeTerm = (e:any)=> setTerm(e.target.value)\r\n\r\n    const handlerClickSearch = ()=>{\r\n        props.onChangeFilter({page:1,status:Status,term:Term});\r\n    }\r\n\r\n    const handlerClickClear = ()=>{\r\n        props.onChangeFilter({status:'',page:1});\r\n        setTerm('');\r\n        setStatus('');\r\n    }\r\n\r\n    const handlerShowSplitBilling = ()=> setShowSplitBilling(true)\r\n    const handlerOnCloseSplitBilling = ()=> setShowSplitBilling(false);\r\n    \r\n    return (\r\n        <>\r\n            <Grid container spacing={3} >\r\n                <Grid item md={3} sm={6} xs={12}>\r\n                    <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search by Account / Domain\" value={Term} onChange={handlerChangeTerm} />\r\n                </Grid>\r\n                <Grid item md={2} sm={6} xs={6}>\r\n                    <Tooltip title=\"Search\">\r\n                        <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={handlerClickSearch}>\r\n                            <Icon>search</Icon>\r\n                        </Button>\r\n                    </Tooltip>\r\n                    &nbsp;\r\n                    <Tooltip title=\"Clear Search\">\r\n                        <Button size=\"large\" variant=\"contained\" onClick={handlerClickClear}>\r\n                            <Icon>settings_backup_restore</Icon>\r\n                        </Button>\r\n                    </Tooltip>\r\n                </Grid> \r\n                <Grid item md={7} sm={6} xs={6}>\r\n                    <Stack direction=\"row\" justifyContent=\"right\" >\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={handlerShowSplitBilling}>\r\n                            <Icon>post_add</Icon> &nbsp; New Split Billing\r\n                        </Button>\r\n                    </Stack>\r\n                </Grid> \r\n            </Grid>\r\n\r\n            <ModalDialog    \r\n                fullScreen={true}   \r\n                title={`Multi-Cloud Split Billing`}\r\n                component={<ModelSplitBilling onClose={handlerOnCloseSplitBilling} />}\r\n                open={ShowSplitBilling}\r\n                onClose={handlerOnCloseSplitBilling}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListFilter;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\edp\\ModelEDP.tsx",["2117","2118","2119","2120","2121","2122","2123","2124","2125","2126","2127","2128","2129","2130","2131","2132","2133","2134","2135","2136","2137","2138","2139","2140","2141","2142","2143","2144"],"import React,{useState,useCallback} from 'react';\r\nimport { Grid, Paper,Stack,Button, Icon, Dialog, DialogTitle, DialogContent, DialogActions, Divider, LinearProgress, Table, TableHead, TableRow, TableCell ,Checkbox, TableBody,\r\n    Radio ,RadioGroup,FormLabel, FormControl, Typography, TextField, InputAdornment, InputLabel, Select, MenuItem, IconButton, Tooltip  } from '@mui/material';\r\n\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Switch from '@mui/material/Switch';\r\nimport Slider from '@mui/material/Slider';\r\nimport { CSP_TYPE } from '../../../const';\r\nimport u from '../../../services/util';\r\n\r\nimport SearchableDropdown from '../../../components/SearchableDropdown';\r\nimport {useHistory} from 'react-router-dom';\r\nimport CSPImage from '../../../components/CSPImage';\r\n\r\nconst ActiveBillingPlan = {\"plan\":{\"PlanID\":58,\"Status\":\"Approved\",\"Title\":\"DXC Metered ABU 2022\",\"SfdcAccountID\":\"0011P00001ChCNzQAN\",\"SfdcAccountName\":\"C360 TestAccount\",\"SfdcOppID\":\"0061P00000Z8kALQAZ\",\"SfdcOppName\":\"C360 Test Opp\",\"SfdcDomain\":null,\"SfdcContactName\":null,\"SfdcContactEmail\":null,\"SfdcQuoteID\":\"a3h1P000000HKmAQAW\",\"SfdcQuoteNumber\":\"Q-03844\",\"BillingModelID\":\"\",\"BillingModelName\":\"\"},\"parameters\":{\"security_services\":0.21,\"inter_tunnels\":0.66,\"intra_tunnels\":0.21,\"vpn_user_licenses\":0.03},\"splitBilling\":{}}\r\n\r\n// SplitType = percentage|credit\r\nconst SPLIT_BILLING_TYPE = {\r\n    PERCENTAGE:'percentage',FIXED:'fixed',\r\n}\r\n\r\nconst ModelEDP = (props:any)=>{\r\n    //const {data} = props;\r\n    let initState:any = [];\r\n    if(CSP_TYPE){\r\n        Object.keys(CSP_TYPE).forEach((k)=>{\r\n            let selectedCSP:any;\r\n            /*if(data && data.length > 0){\r\n                selectedCSP = data.filter((csp:any)=>csp.name === k);\r\n                if(selectedCSP && selectedCSP.length > 0)\r\n                    selectedCSP = selectedCSP[0];\r\n                else\r\n                    selectedCSP = null;\r\n            }*/\r\n            initState.push({\r\n                name:k,\r\n                percentage:0, //selectedCSP? parseFloat(selectedCSP.percentage) :0,\r\n                value:0,\r\n                enabled:false, //selectedCSP?selectedCSP.enabled:false\r\n            })\r\n        \r\n        })\r\n    }\r\n    const [Data,setData] = useState<any|null>(initState);\r\n\r\n    const [Account,setAccount] = useState<string|null>(null);\r\n    \r\n    const [BillingType,setBillingType] = useState<number>(1);\r\n    const [Discount,setDiscount] = useState<boolean>(false);\r\n    const [Term,setTerm] = useState<boolean>(false);\r\n\r\n    \r\n\r\n    const [OverConsumption,setOverConsumption] = useState(\"\");\r\n    const [SurrenderFee,setSurrenderFee] = useState(false);\r\n\r\n    const handlerSelectAccount = (account:any)=>{\r\n        setAccount(account);\r\n    }\r\n\r\n    const handlerChangeBillingType = (e:any)=>{\r\n        setBillingType(e.target.value);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <br/>\r\n            <Grid container spacing={0}>\r\n                <Grid item md={8}>\r\n                    <h2>Configure EDP<span>{Account?Account.text:'Select Account'}</span></h2>\r\n                </Grid>\r\n                <Grid item md={4}>\r\n                    <Grid container justifyContent=\"right\">\r\n                        <Grid item md={12}>\r\n                            <SearchableDropdown \r\n                                label=\"Search Account\" \r\n                                action=\"searchSfdcLiveAccount\" \r\n                                onSelect={(value:any)=> handlerSelectAccount(value) } \r\n                            />        \r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Divider/><br/>\r\n\r\n            {1==1 && <>\r\n            <Grid container spacing={4}>\r\n                <Grid item md={6}>\r\n                    \r\n                    <Grid container  spacing={2}>\r\n                        <Grid item md={12}>\r\n                            <FormControl  variant=\"standard\" fullWidth>\r\n                                <InputLabel id=\"billing_type\">Billing Type </InputLabel>\r\n                                <Select\r\n                                    id=\"billing_type_id\"\r\n                                    labelId=\"billing_type\"\r\n                                    value={'csp'}\r\n                                    label=\"Age\"\r\n                                    //onChange={handleChange}\r\n                                >\r\n                                    <MenuItem value={'csp'}>CSP</MenuItem>\r\n                                    <MenuItem value={'direct'}>Aviatrix Direct</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n                            <FormControl  variant=\"standard\" fullWidth>\r\n                                <InputLabel id=\"billing_type\">Billing Plan </InputLabel>\r\n                                <Select\r\n                                    id=\"billing_type_id\"\r\n                                    labelId=\"billing_type\"\r\n                                    value={BillingType}\r\n                                    label=\"Age\"\r\n                                    onChange={handlerChangeBillingType}\r\n                                >\r\n                                    <MenuItem value={'1'}>Metered EDP with Tiers</MenuItem>\r\n                                    <MenuItem value={'2'}>Metered EDP with Volume</MenuItem>\r\n                                    <MenuItem value={'3'}>Fixed EDP with Monthly Billing</MenuItem>\r\n                                    <MenuItem value={'4'}>Fixed EDP With One-Time Upfront Billing</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                \r\n                </Grid>\r\n                <Grid item md={6}>\r\n                    \r\n                    <fieldset>\r\n                        <legend>Active Billing Plan</legend>\r\n                            <div className='grid-result-list'>\r\n                                <strong>{ActiveBillingPlan.plan.Title}</strong>\r\n                                <Grid container spacing={0} className=\"mt-10\">\r\n                                    {ActiveBillingPlan.parameters && Object.keys(ActiveBillingPlan.parameters).map((key:any,index:number)=>(\r\n                                        <Grid item md={4}>\r\n                                        <div className='field' key={index}>\r\n                                            <div className='key' style={{width:'75%'}}>{key}</div>\r\n                                            <div className='value' style={{width:'25%'}}>{ u.format.currency(ActiveBillingPlan.parameters[key]) }</div>\r\n                                        </div>\r\n                                        </Grid>\r\n                                    ))}\r\n                                </Grid>\r\n                            </div>\r\n                    </fieldset>\r\n                        \r\n                    \r\n                </Grid>\r\n            </Grid>\r\n            \r\n            <Grid container spacing={3}>\r\n                <Grid item md={12}>\r\n                    <h3>Configure Billing Plan</h3>\r\n                    <Grid container spacing={4} sx={{marginTop:'10px',marginBottom:'10px'}}>\r\n                        <Grid item md={4} style={{borderRight:'1px solid #e1e1e1',paddingRight:'20px'}}>\r\n                            <h4 className='font-12' style={{marginTop:0,paddingTop:0}}>General</h4>\r\n\r\n                            <Grid container spacing={3}>\r\n                                <Grid item md={12}>\r\n                                    <TextField fullWidth size=\"small\" variant=\"standard\" label=\"EDP Title \" placeholder='EDP Title'/>\r\n                                </Grid>\r\n                                <Grid item md={12}>\r\n                                    <FormControl variant=\"standard\" fullWidth>\r\n                                        <InputLabel id=\"billing_type\">EDP Length </InputLabel>\r\n                                        <Select\r\n                                            id=\"billing_type_id\"\r\n                                            labelId=\"billing_type\"\r\n                                            value={'csp'}\r\n                                            label=\"Age\"\r\n                                            //onChange={handleChange}\r\n                                        >\r\n                                            <MenuItem value={'csp'}>1 Year</MenuItem>\r\n                                            <MenuItem value={'direct'}>2 Years</MenuItem>\r\n                                            <MenuItem value={'direct'}>3 Years</MenuItem>\r\n                                            <MenuItem value={'direct'}>4 Years</MenuItem>\r\n                                            <MenuItem value={'direct'}>5 Years</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item md={12}>\r\n                                    <TextField size=\"small\" fullWidth variant=\"standard\" label=\"Start Date\" placeholder='2022/01/01'/>\r\n                                </Grid>\r\n                                \r\n                                <Grid item md={12}>\r\n                                    <TextField size=\"small\" fullWidth variant=\"standard\" label=\"End Date\"  placeholder='2022/01/01'/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item md={4} style={{borderRight:'1px solid #e1e1e1',paddingRight:'20px'}}>\r\n                            <h4 className='font-12' style={{marginTop:0,paddingTop:0}}>Over Consumption Conditions</h4>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item md={12}>\r\n                                    <FormControl>\r\n                                        <RadioGroup\r\n                                            defaultValue=\"female\"\r\n                                            name=\"radio-buttons-group\"\r\n                                            onChange={(e:any)=>{\r\n                                                setOverConsumption(e.target.value)\r\n                                            }}\r\n                                        >\r\n                                            <FormControlLabel value=\"keep_discounting\" control={<Radio size=\"small\"/>} label=\"Keep Discounting\" />\r\n                                            <FormControlLabel value=\"standard_plan\" control={<Radio size=\"small\" />} label=\"Apply Standard Plan\" />\r\n                                            <FormControlLabel value=\"remove_discount\" control={<Radio size=\"small\"/>} label=\"Remove Discount\" />\r\n                                            <FormControlLabel value=\"custom\" control={<Radio size=\"small\"/>} label=\"Custom Discount\" />\r\n                                            \r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                {OverConsumption == \"custom\" && \r\n                                <Grid item>\r\n                                    <TextField size=\"small\" variant=\"standard\" label=\"Discount %\"  placeholder='%'/>\r\n                                </Grid>\r\n                                }\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <h4 className='font-12' style={{marginTop:0,paddingTop:0}}>Under Consumption Conditions</h4>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item md={12}>\r\n                                    <FormGroup>\r\n                                        <FormControlLabel control={<Checkbox checked={SurrenderFee} onChange={(e)=>{setSurrenderFee(e.target.checked)}} size=\"small\" />} label=\"Enable Surrender Fee\" />\r\n                                    </FormGroup>\r\n                                </Grid>\r\n                                {SurrenderFee && \r\n                                <Grid item md={12}>\r\n                                    <TextField size=\"small\" fullWidth variant=\"standard\" label=\"Surrender Fee Amount\"  placeholder=''/>\r\n                                </Grid>\r\n                                }\r\n                            </Grid>\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <br/>\r\n            {BillingType==1 && <>\r\n            <h3>Metered EDP with Tiers</h3>\r\n            <Grid container spacing={3}>\r\n                <Grid item md={6}>\r\n                    \r\n                    <Grid container spacing={2}>\r\n                        <Grid item>\r\n                            <Stack justifyContent=\"right\" direction=\"row\">\r\n                                <Tooltip title=\"Add New Discount\">\r\n                                    <Button variant=\"contained\" size=\"small\">\r\n                                        <Icon className=\"icon-white\">add</Icon>\r\n                                    </Button>\r\n                                </Tooltip>\r\n                            </Stack>\r\n                            \r\n                            <Table sx={{ minWidth: 750 }} size=\"small\" className=\"grid-table mt-10\">\r\n                                <TableHead className='blue'>\r\n                                    <TableRow>\r\n                                        <TableCell>Tier Name</TableCell>\r\n                                        <TableCell>Usage From (USD)</TableCell>\r\n                                        <TableCell>Usage To (USD)</TableCell>\r\n                                        <TableCell>Discount (%)</TableCell>\r\n                                        <TableCell></TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell><TextField fullWidth size=\"small\" variant=\"standard\" value=\"Tier 1\" margin=\"dense\" /></TableCell>\r\n                                        <TableCell><TextField fullWidth size=\"small\" variant=\"standard\" value=\"0\" margin=\"dense\" /></TableCell>\r\n                                        <TableCell><TextField fullWidth size=\"small\" variant=\"standard\" value=\"500,000\" margin=\"dense\" /></TableCell>\r\n                                        <TableCell><TextField fullWidth size=\"small\" variant=\"standard\" value=\"5\" margin=\"dense\" /></TableCell>\r\n                                        <TableCell>\r\n                                            <Stack justifyContent=\"right\" direction=\"row\">\r\n                                                <IconButton className=\"mr10\" size=\"small\">\r\n                                                    <Icon>close</Icon>\r\n                                                </IconButton>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell><TextField fullWidth size=\"small\" variant=\"standard\" value=\"Tier 2\" margin=\"dense\" /></TableCell>\r\n                                        <TableCell><TextField fullWidth size=\"small\" variant=\"standard\" value=\"500,000\" margin=\"dense\" placeholder='Usage'/></TableCell>\r\n                                        <TableCell><TextField fullWidth size=\"small\" variant=\"standard\" value=\"1,000,000\" margin=\"dense\" placeholder='Usage'/></TableCell>\r\n                                        <TableCell><TextField fullWidth size=\"small\" variant=\"standard\" value=\"10\" margin=\"dense\" placeholder='Discount %'/></TableCell>\r\n                                        <TableCell>\r\n                                            <Stack justifyContent=\"right\" direction=\"row\">\r\n                                                <IconButton className=\"mr10\" size=\"small\">\r\n                                                    <Icon>close</Icon>\r\n                                                </IconButton>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell><TextField fullWidth size=\"small\" variant=\"standard\" value=\"Tier 3\" margin=\"dense\" /></TableCell>\r\n                                        <TableCell><TextField fullWidth size=\"small\" variant=\"standard\" value=\"1,000,000\" margin=\"dense\" placeholder='Usage'/></TableCell>\r\n                                        <TableCell><TextField fullWidth size=\"small\" variant=\"standard\" value=\"2,000,000\" margin=\"dense\" placeholder='Usage'/></TableCell>\r\n                                        <TableCell><TextField fullWidth size=\"small\" variant=\"standard\" value=\"20\" margin=\"dense\" placeholder='Discount %'/></TableCell>\r\n                                        <TableCell>\r\n                                            <Stack justifyContent=\"right\" direction=\"row\">\r\n                                                <IconButton className=\"mr10\" size=\"small\">\r\n                                                    <Icon>close</Icon>\r\n                                                </IconButton>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Grid>\r\n                    </Grid>\r\n                    \r\n                </Grid>\r\n            </Grid>\r\n            </>}\r\n            {BillingType==2 && <>\r\n            <h3>Metered EDP with Volume</h3>\r\n            <Grid container spacing={3}>\r\n                <Grid item md={3}>\r\n                    <TextField fullWidth size=\"small\" variant=\"standard\" label=\"Volume $\"  placeholder='Volume $'/>\r\n                </Grid>\r\n            </Grid>\r\n            </>}\r\n            {BillingType==3 && <>\r\n            <h3>Fixed EDP with Monthly Billing</h3>\r\n            <Grid container spacing={5}>\r\n                <Grid item md={3}>\r\n                    <TextField fullWidth size=\"small\" variant=\"standard\" label=\"Contract Amount $\"  placeholder='Contract Amount $'/>\r\n                </Grid>\r\n                <Grid item md={3}>\r\n                    <TextField fullWidth size=\"small\" variant=\"standard\" label=\"Monthly Bill $\"  placeholder='Monthly Bill $'/>\r\n                </Grid>\r\n                <Grid item md={3}>\r\n                    <TextField fullWidth size=\"small\" variant=\"standard\" label=\"Billing Day\"  placeholder='05'/>\r\n                </Grid>\r\n            </Grid>\r\n            </>}\r\n            {BillingType==4 && <>\r\n            <h3>Fixed EDP With One-Time Upfront Billing</h3>\r\n            <Grid container spacing={3}>\r\n                <Grid item md={3}>\r\n                    <TextField fullWidth size=\"small\" variant=\"standard\" label=\"Contract Amount $\"  placeholder='Contract Amount $'/>\r\n                </Grid>\r\n                <Grid item md={3}>\r\n                    <TextField fullWidth size=\"small\" variant=\"standard\" label=\"Billing Date\"  placeholder='05/01/2022'/>\r\n                </Grid>\r\n            </Grid>\r\n            </>}\r\n            <br/>\r\n            <Divider/>\r\n            <Grid container>\r\n                <Grid item md={12} className=\"mt-10\">\r\n                    <Stack justifyContent=\"right\" direction=\"row\">\r\n                        <Button variant=\"contained\" color=\"secondary\" startIcon={<Icon>save</Icon>}> Save</Button>\r\n                    </Stack>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            </>}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModelEDP;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\splitbilling\\ModelSplitBilling.tsx",["2145","2146","2147","2148","2149","2150","2151","2152","2153","2154","2155","2156","2157","2158"],"import React,{useState,useCallback} from 'react';\r\nimport { Grid, Paper,Stack,Button, Icon, Dialog, DialogTitle, DialogContent, DialogActions, Divider, LinearProgress, Table, TableHead, TableRow, TableCell ,Checkbox, TableBody,\r\n    Radio ,RadioGroup,FormLabel, FormControl, Typography, TextField,InputAdornment  } from '@mui/material';\r\n\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Switch from '@mui/material/Switch';\r\nimport Slider from '@mui/material/Slider';\r\nimport { CSP_TYPE } from '../../../const';\r\n\r\nimport SearchableDropdown from '../../../components/SearchableDropdown';\r\nimport {useHistory} from 'react-router-dom';\r\nimport CSPImage from '../../../components/CSPImage';\r\n\r\n// SplitType = percentage|credit\r\nconst SPLIT_BILLING_TYPE = {\r\n    PERCENTAGE:'percentage',FIXED:'fixed',\r\n}\r\n\r\nconst ModelSplitBilling = (props:any)=>{\r\n    //const {data} = props;\r\n    let initState:any = [];\r\n    if(CSP_TYPE){\r\n        Object.keys(CSP_TYPE).forEach((k)=>{\r\n            let selectedCSP:any;\r\n            /*if(data && data.length > 0){\r\n                selectedCSP = data.filter((csp:any)=>csp.name === k);\r\n                if(selectedCSP && selectedCSP.length > 0)\r\n                    selectedCSP = selectedCSP[0];\r\n                else\r\n                    selectedCSP = null;\r\n            }*/\r\n            initState.push({\r\n                name:k,\r\n                percentage:0, //selectedCSP? parseFloat(selectedCSP.percentage) :0,\r\n                value:0,\r\n                enabled:false, //selectedCSP?selectedCSP.enabled:false\r\n            })\r\n        \r\n        })\r\n    }\r\n    const [Data,setData] = useState<any|null>(initState);\r\n\r\n    const [Account,setAccount] = useState<string|null>(null);\r\n    \r\n    const [SplitType,setSplitType] = useState<string>();\r\n    \r\n    const handlerSelectAccount = (account:any)=>{\r\n        setAccount(account);\r\n    }\r\n\r\n    // auto-calculate percentage \r\n    const calculate = (data)=>{\r\n        let _data = [...data];\r\n        setData(_data);\r\n    }\r\n\r\n    const setCspPercentage = useCallback((name,percentage)=>{\r\n        let _data = [...Data];\r\n        for(let csp of _data){\r\n            if(csp.name === name){\r\n                csp.percentage = percentage;\r\n            }\r\n        }\r\n        calculate(_data);\r\n    },[Data])\r\n\r\n    const setCspAmountValue = useCallback((name,value)=>{\r\n        let _data = [...Data];\r\n        for(let csp of _data){\r\n            if(csp.name === name){\r\n                csp.value = value;\r\n            }\r\n        }\r\n        calculate(_data);\r\n    },[Data])\r\n\r\n    const handlerChangeCSP = (name,checked)=>{\r\n        let _data = [...Data];\r\n        for(let csp of _data){\r\n            if(csp.name === name){\r\n                csp.percentage = 0;\r\n                csp.value = 0;\r\n                csp.enabled = checked;\r\n            }\r\n        }\r\n        calculate(_data);\r\n    }\r\n    \r\n    const getTotal = ()=>{\r\n        return Data.reduce((n,csp)=>{\r\n            n = n + csp.percentage\r\n            return n\r\n        },0)  \r\n    }\r\n    \r\n    const handlerOnChangeSplitType = (e:React.ChangeEvent<HTMLInputElement>)=>{\r\n        setSplitType(e.target.value)\r\n    }\r\n\r\n\r\n    const tempAWSEnabled = ()=>{\r\n        debugger\r\n        let aws = Data.filter((csp)=>csp.name == 'AWS');\r\n        if(aws?.length > 0){\r\n            return aws[0].enabled;\r\n        }else\r\n            return false;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Grid container spacing={0}>\r\n                <Grid item md={8}>\r\n                    <h2>{Account?Account.text:'Select Account'} <span>Selected account</span></h2>\r\n                </Grid>\r\n                <Grid item md={4}>\r\n                    <Grid container justifyContent=\"right\">\r\n                        <Grid item md={12}>\r\n                            <SearchableDropdown \r\n                                label=\"Search Account\" \r\n                                action=\"searchSfdcLiveAccount\" \r\n                                onSelect={(value:any)=> handlerSelectAccount(value) } \r\n                            />        \r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Divider/><br/>\r\n\r\n            <Grid container spacing={2}>\r\n            \r\n                <Grid item md={12}>\r\n                    {Account  && <>\r\n                    <Grid container spacing={4} justifyContent=\"center\" style={{position:\"relative\"}}>\r\n                        <Grid item md={12}>\r\n                            <strong>Split Type:</strong> \r\n                            <RadioGroup row value={SplitType} onChange={handlerOnChangeSplitType}>\r\n                                <FormControlLabel value={SPLIT_BILLING_TYPE.PERCENTAGE} control={<Radio size=\"small\" />} label=\"Percentage\" />\r\n                                <FormControlLabel value={SPLIT_BILLING_TYPE.FIXED} control={<Radio size=\"small\"/>} label=\"Fixed\" />\r\n                            </RadioGroup>\r\n                            <Divider/><br/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    </>}\r\n                    {SplitType==SPLIT_BILLING_TYPE.PERCENTAGE && \r\n                    <Grid container spacing={0} justifyContent=\"center\">\r\n                        <Grid item md={12}>\r\n                            <strong className='font-14'>Multi-Cloud Split Billing Overall Percentage: {getTotal()}%</strong>\r\n                            <LinearProgress className='mt-10' color=\"secondary\" variant=\"buffer\" value={getTotal()} valueBuffer={getTotal()+10} />\r\n                            <br/><Divider/><br/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    }\r\n                    {Account && SplitType && <>\r\n                    <Grid container spacing={4} justifyContent=\"center\" >    \r\n                        {Data && Data.map((csp:any)=>(\r\n                            <>\r\n                                <Grid item lg={1} md={2}>\r\n                                    <CSPImage name={csp.name}/>\r\n                                </Grid>\r\n                                <Grid item lg={1} md={1}>\r\n                                    <FormGroup>\r\n                                        <FormControlLabel control={<Switch checked={csp.enabled} color=\"secondary\" onChange={(e:any)=>{handlerChangeCSP(csp.name,e.target.checked)}}  />} label=\"\" />\r\n                                    </FormGroup>\r\n                                </Grid>\r\n                                {SplitType==SPLIT_BILLING_TYPE.PERCENTAGE ? <>\r\n                                <Grid item lg={6} md={6}>\r\n                                    <Slider\r\n                                        aria-label=\"Always visible\"\r\n                                        defaultValue={0}\r\n                                        value={csp.percentage}\r\n                                        disabled={!csp.enabled}\r\n                                        step={1}\r\n                                        valueLabelDisplay=\"off\"\r\n                                        onChange={(e:any)=>{setCspPercentage(csp.name,e.target.value)}}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={4} md={4}>\r\n                                    <strong>{csp.percentage}%</strong>\r\n                                </Grid>\r\n                                </>\r\n                                :\r\n                                <>\r\n                                <Grid item lg={10} md={9}>\r\n                                    <TextField size=\"small\" \r\n                                        value={csp.value} \r\n                                        disabled={!csp.enabled}\r\n                                        onChange={(e:any)=>{setCspAmountValue(csp.name,e.target.value)}} \r\n                                        placeholder={`${csp.name} Amount`}\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                              <InputAdornment position=\"start\">\r\n                                                <Icon>attach_money</Icon>\r\n                                              </InputAdornment>\r\n                                            ),\r\n                                          }}\r\n                                    />\r\n                                </Grid>\r\n                                </>}\r\n                                \r\n                            </>\r\n                        ))}\r\n                    </Grid>\r\n                    <br/><Divider/>\r\n                    </>}\r\n                </Grid>\r\n                \r\n                {tempAWSEnabled() && <>\r\n                <Grid item md={10}>    \r\n                    <h4>Accounts List</h4>\r\n                    <Table sx={{ minWidth: 750 }} size=\"small\" className=\"grid-table\">\r\n                        <TableHead className='blue'>\r\n                            <TableRow>\r\n                                <TableCell width=\"80px\">\r\n                                    <Checkbox size=\"small\" sx={{padding:0}} />\r\n                                </TableCell>\r\n                                <TableCell width='300px'>Account Name</TableCell>\r\n                                <TableCell width='160px'>Tag</TableCell>\r\n                                <TableCell>Email</TableCell>\r\n                                <TableCell>Billing Plan</TableCell>\r\n                                <TableCell>CSP</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Checkbox size=\"small\" sx={{padding:0}} />\r\n                                </TableCell>\r\n                                <TableCell>17816f98-798a-4a9c-b4af-01ac2fb8b58e</TableCell>\r\n                                <TableCell>Finance</TableCell>\r\n                                <TableCell>emeree@FBUtest.com</TableCell>\r\n                                <TableCell>standard</TableCell>\r\n                                <TableCell><CSPImage name=\"aws\" size=\"80px\" /></TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Checkbox size=\"small\" sx={{padding:0}} />\r\n                                </TableCell>\r\n                                <TableCell>712c4ae5-08f6-4eac-8b46-a79019cced9b</TableCell>\r\n                                <TableCell>Admin</TableCell>\r\n                                <TableCell>nadeem@FBUtest.com</TableCell>\r\n                                <TableCell>dkcn4li3l0wjm4n3</TableCell>\r\n                                <TableCell><CSPImage name=\"azure\" size=\"80px\" /></TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Checkbox size=\"small\" sx={{padding:0}} />\r\n                                </TableCell>\r\n                                <TableCell>3344-08f6-432-8b46-a79019cced9b</TableCell>\r\n                                <TableCell>IT</TableCell>\r\n                                <TableCell>testing@FBUtest.com</TableCell>\r\n                                <TableCell>standard</TableCell>\r\n                                <TableCell><CSPImage name=\"azure\" size=\"80px\" /></TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </Grid>\r\n                <Grid item md={10} className=\"mt-10\">\r\n                    <Button variant=\"contained\" color=\"secondary\" startIcon={<Icon>save</Icon>}\r\n                    onClick={props.onClose}\r\n                    > Save</Button>\r\n                </Grid>\r\n                </>}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModelSplitBilling;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\valueIQ.ts",["2159"],"import client from './client';\r\nconst checkForDomain = async (params) => {\r\n\r\n    let res: any = await client.get('/valueIQ/checkForDomain', params);\r\n    return res;\r\n}\r\nconst save = async (params) => {\r\n\r\n    let res: any = await client.post('/valueIQ/save', params);\r\n    return res;\r\n}\r\nconst listing = async (params) => {\r\n    let res: any = await client.get('/valueIQ/list', params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\nconst remove = async (params) => {\r\n    let res: any = await client.delete('/valueIQ/remove', params);\r\n    return res;\r\n}\r\nconst activate = async (params) => {\r\n    let res: any = await client.post(\"/valueIQ/activate\", params);\r\n    return res;\r\n}\r\nconst update = async (params) => {\r\n    let res: any = await client.post(\"/valueIQ/update\", params);\r\n    return res;\r\n}\r\n\r\nconst existingUsage = async (params) => {\r\n    let res: any = await client.get(\"/valueIQ/existingUsage\", params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\n\r\nconst getversion1Chart = async (params) => {\r\n    let res: any = await client.get(\"/valueIQ/getversion1Chart\", params);\r\n    if (res.success) {\r\n        return res;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport default {\r\n    checkForDomain, save, listing, remove, activate, update, existingUsage, getversion1Chart\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\Filter.tsx",["2160","2161"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField} from '@mui/material';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n    const [UserType,setUserType] = useState('active');\r\n    useEffect(()=>{\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({userType:UserType,term:Term,page:1});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        setUserType('active');\r\n        props.onSearch({userType:'active',term:'',page:1});\r\n    }\r\n \r\n    return (\r\n        <Grid container spacing={3} >\r\n            <Grid item md={3} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Domain / AccountName\"\r\n                    value={Term}\r\n                    onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Status</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setUserType(e.target.value)}}\r\n                        value={UserType}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"active\" key=\"active\">Active</MenuItem>\r\n                        <MenuItem value=\"deleted\" key=\"deleted\">Deleted</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button onClick={handlerSearch} size=\"large\" variant=\"contained\" color=\"primary\">\r\n                    <Icon>search</Icon>\r\n                </Button> &nbsp;\r\n                <Button onClick={handlerClear} size=\"large\" variant=\"contained\">\r\n                    <Icon>settings_backup_restore</Icon>\r\n                </Button>\r\n            </Grid> \r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\Download.tsx",["2162"],"import React from \"react\";\r\nimport {\r\n  Page,\r\n  Text,\r\n  View,\r\n  Document,\r\n  StyleSheet,\r\n  Image,\r\n  Font\r\n} from \"@react-pdf/renderer\";\r\nimport img from '../../assets/images/aviatrix-logo.jpg'\r\nimport coin from './assets/coin.png'\r\nFont.register({\r\n  family: 'Oswald',\r\n  src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  body: {\r\n    paddingTop: 15,\r\n    paddingBottom: 20,\r\n    paddingHorizontal: 10,\r\n  },\r\n  image: {\r\n    paddingLeft:50,\r\n    height:300,\r\n    paddingRight:30\r\n  },\r\n  logo:{\r\n    alignSelf:'flex-end',\r\n    width:200,\r\n    paddingBottom:20,\r\n    paddingRight:20,\r\n  },\r\n  row:{\r\n    paddingTop:30,\r\n    flexDirection: 'row', justifyContent:'space-between',\r\n    alignItems:'center',\r\n    fontSize:15,\r\n    color:'gray'\r\n  },\r\n  lineStyle:{\r\n    borderWidth: 0.5,\r\n    borderColor:'black',\r\n    margin:10,\r\n},\r\ntitle: {\r\n  fontSize: 24,\r\n  textAlign: 'center',\r\n  fontFamily: 'Oswald'\r\n},\r\ncol:{\r\n  width:'20%'\r\n},\r\nicon:{\r\n  width:30,\r\n}\r\n});\r\n\r\nexport function PdfDocument(props:any) {\r\n\r\n  console.log(\"props\",props)\r\n  return (\r\n    <Document>\r\n      <Page size=\"A4\" orientation=\"landscape\" style={styles.body}>\r\n          <Image style={styles.logo} src={img}/>\r\n          <View style = {styles.lineStyle} />\r\n          <Text style={styles.title}>Aviatrix ValueIQ Report: {props.accountName}</Text>\r\n          <View style = {styles.lineStyle} />\r\n          <Image style={styles.image} src={props.Image}  />\r\n          <View style = {styles.lineStyle} />\r\n            <View style={styles.row}>\r\n              <Text style={{width:'40%'}}>ROI:  {props.ROI}%</Text>\r\n              <Text style={{width:'40%'}}>NPV:  ${props.NPV}</Text>\r\n              <Text style={styles.col}>Payback:  {props.Payback} Months</Text>\r\n            </View>\r\n            <View style={styles.row}>\r\n              <Text style={{width:'40%'}}>Total Cost:  ${props.TotalCost}</Text>\r\n              <Text style={{width:'40%'}}>Total Benefit:  ${props.TotalBenefit}</Text>\r\n              <Text style={styles.col}>TotalValue:  ${props.TotalValue}</Text>\r\n            </View>\r\n             \r\n      </Page>\r\n    </Document>\r\n  );\r\n}\r\n",["2163","2164"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\billing\\reports\\BillingReportStandard.tsx",["2165","2166","2167","2168","2169","2170","2171","2172","2173","2174","2175"],"import React, { useEffect, useState } from 'react';\r\nimport { Grid, Paper, LinearProgress, TextField, Icon, Typography, IconButton, Collapse } from '@mui/material'\r\nimport SearchableDropdown from \"../../../components/SearchableDropdown\";\r\n\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\n\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport CDateRangePicker from '../../../components/CDateRangePicker';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport METER from '../../../services/METER';\r\nimport u from '../../../services/util';\r\nimport { USER_TYPE } from \"../../../const\";\r\n\r\nconst BillingReportStandard = () => {\r\n    const accid = useSelector((state: any) => state.user ? state.user.accid : null);\r\n    const UserType = useSelector((state: any) => state.user ? state.user.type : null);\r\n\r\n    const [RDateRange, setRDateRange] = useState<any>();\r\n    const [Account, setAccount] = useState<any | null>(null);\r\n    const [GridData, setGridData] = useState<any | null>(null);\r\n    const [loading, setloading] = useState<boolean>(false);\r\n\r\n    const [SelectedRow, setSelectedRow] = useState(-1); // accordition \r\n\r\n    const handlerOnSelectAccount = (value: any) => {\r\n        setAccount(value.id);\r\n    }\r\n\r\n    const handlerSetDate = (dateRange: any) => {\r\n        if (dateRange) {\r\n            setRDateRange(dateRange);\r\n        }\r\n    }\r\n\r\n    const load = async () => {\r\n        setloading(true)\r\n        const res: any = await METER.getReport({ id: Account, ...RDateRange });\r\n        if (res.success) {\r\n            setGridData(res.data)\r\n        } else {\r\n            window.snakAlert.error(res.message)\r\n        }\r\n        setloading(false)\r\n    }\r\n    const selectRow = (index: number) => {\r\n        if (SelectedRow == index) {\r\n            setSelectedRow(-1)\r\n        } else {\r\n            setSelectedRow(index)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (Account && RDateRange) {\r\n            load();\r\n        }\r\n    }, [Account, RDateRange])\r\n\r\n    useEffect(() => {\r\n        if (UserType === USER_TYPE.CUSTOMER) {\r\n            setAccount(accid);\r\n        }\r\n    }, [UserType]);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"page-content\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={6}>\r\n                        <h2>Billing Report <span>Meter Usage</span></h2>\r\n                    </Grid>\r\n                    <Grid item md={6}>\r\n                        <Grid container spacing={3} justifyContent=\"right\">\r\n                            <Grid item md={6}>\r\n                                <CDateRangePicker\r\n                                    initialDateRange='Last Week'\r\n                                    onSetDate={handlerSetDate}\r\n                                />\r\n                            </Grid>\r\n                            {UserType != USER_TYPE.CUSTOMER &&\r\n                                <Grid item md={6}>\r\n                                    <SearchableDropdown action=\"searchAccount\" onSelect={(value: any) => handlerOnSelectAccount(value)} />\r\n                                </Grid>\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {loading && <LinearProgress />}\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n\r\n                    {!GridData && <div style={{ fontSize: '12px', textAlign: 'center' }}>No records found</div>}\r\n                    {GridData && GridData.summary &&\r\n                        <>\r\n                            <TableContainer component={Paper}>\r\n                                <Table sx={{ minWidth: 650 }} size=\"small\" className='grid-table' aria-label=\"simple table\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell width=\"60px\"></TableCell>\r\n                                            <TableCell>Date</TableCell>\r\n                                            <TableCell>Usage</TableCell>\r\n                                            <TableCell>Cost</TableCell> \r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {GridData.records && GridData.records.map((row: any, ind: number) => (\r\n                                            <>\r\n                                                <TableRow key={ind}>\r\n                                                    <TableCell>\r\n                                                        <IconButton\r\n                                                            aria-label=\"expand row\"\r\n                                                            size=\"small\"\r\n                                                            onClick={() => selectRow(ind)}\r\n                                                        >\r\n                                                            {SelectedRow == ind ? <KeyboardArrowUpIcon sx={{ fontSize: '16px' }} /> : <KeyboardArrowDownIcon sx={{ fontSize: '16px' }} />}\r\n                                                        </IconButton>\r\n                                                    </TableCell>\r\n                                                    <TableCell>{row.date}</TableCell>\r\n                                                    <TableCell>{row.value}</TableCell>\r\n                                                    <TableCell>{u.format.currency(row.revenue)}</TableCell> \r\n                                                </TableRow>\r\n                                                <TableRow key={`${ind}_${row.date}`} className={`${SelectedRow == ind ? 'expandable' : 'no-border'}`}>\r\n                                                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={5}>\r\n                                                        <Collapse in={ind == SelectedRow} timeout=\"auto\" unmountOnExit>\r\n\r\n                                                            <DetailBreakdown account={Account} date={row.date} />\r\n\r\n                                                        </Collapse>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            </>\r\n                                        ))}\r\n                                        <TableRow className='summary'>\r\n                                            <TableCell></TableCell>\r\n                                            <TableCell><strong>Grand Total</strong></TableCell>\r\n                                            <TableCell><strong>{GridData.summary.value}</strong></TableCell>\r\n                                            <TableCell><strong>{u.format.currency(GridData.summary.revenue)}</strong></TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </>\r\n                    }\r\n                </Paper>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst DetailBreakdown = ({ account, date }) => {\r\n    const [Data, setData] = useState<any | null>(null);\r\n    const [loading, setloading] = useState<boolean>(false);\r\n\r\n    const load = async () => {\r\n        setloading(true)\r\n        const res: any = await METER.getBreakdown({ id: account, date });\r\n        if (res.success) {\r\n            setData(res.data)\r\n        } else {\r\n            window.snakAlert.error(res.message)\r\n        }\r\n        setloading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        load()\r\n    }, [account, date])\r\n\r\n    const isColumnAvailable = (records, column) => {\r\n        if (records && Array.isArray(records) && records.length > 0) {\r\n            return (records[0] && records[0][column]!=null) ? true : false\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loading && <LinearProgress className='mt--6' />}\r\n            <Grid container spacing={4} className='mb-12'>\r\n                {Data && Data.map((series: any, ind: number) => (\r\n                    <Grid item md={6}>\r\n                        <h4 key={`${series.name}`}>{series.name}</h4>\r\n                        <TableContainer component={Paper} key={ind}>\r\n                            <Table size=\"small\" className='grid-table blue' aria-label=\"simple table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Name</TableCell>\r\n                                        \r\n                                        {isColumnAvailable(series.records, \"value\") &&\r\n                                            <TableCell>Meter Usage</TableCell>\r\n                                        }\r\n                                        {isColumnAvailable(series.records, \"usage\") &&\r\n                                            <TableCell>Usage</TableCell>\r\n                                        }\r\n                                        {isColumnAvailable(series.records, \"rate\") &&\r\n                                            <TableCell>Rate</TableCell>\r\n                                        }\r\n                                        \r\n                                        <TableCell>Cost</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {series.records.map((row: any, ind: number) => (\r\n                                        <TableRow key={ind}>\r\n                                            <TableCell>{row.name}</TableCell>\r\n                                            {row.value && <TableCell>{row.value}</TableCell>}\r\n                                            {row.usage && <TableCell>{row.usage}</TableCell>}\r\n                                            {row.rate && <TableCell>{row.rate}</TableCell>}\r\n                                            <TableCell>{u.format.currency(row.revenue)}</TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BillingReportStandard;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\supplierPortal\\orderTracking\\DialogStatusSelector.tsx",["2176","2177","2178","2179","2180","2181","2182","2183","2184","2185","2186","2187","2188","2189","2190","2191","2192","2193","2194","2195","2196","2197","2198","2199","2200","2201","2202","2203","2204","2205","2206","2207","2208"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Grid, FormControl, Paper, Stack, Button, Icon, Dialog, DialogTitle, DialogContent, DialogActions, Divider, InputLabel, Select, MenuItem } from '@mui/material';\r\nimport sfdc from '../../../services/sfdc';\r\nimport SearchableDropdown from '../../../components/SearchableDropdown';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Link as RLink } from 'react-router-dom';\r\nimport { Autocomplete, CircularProgress, TextField } from '@mui/material';\r\nimport { useSelector } from 'react-redux';\r\nimport MultipleValueTextInput from 'react-multivalue-text-input';\r\nimport orderService from '../../../services/supplierportal';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport './style.css';\r\n\r\nconst DialogAccountSelector = (props: any) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [Account, setAccount] = useState<string | any>(null);\r\n    const [searchContact, setSearchContact] = useState<string | null>(null);\r\n    const [ContactName, setContactName] = useState('JJJ');\r\n    const [ContactID, setContactID] = useState<string | any>(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [status, setStatus] = useState('Ordered');\r\n    //const [items,setItems]=useState<{} | any>(null);\r\n    const [items,setItems]=useState<string[]>([]);;\r\n    const handleChangeSearchContact = (event) => {\r\n        setSearchContact(event.target.value);\r\n\r\n    };\r\n    const [data, setData] = useState<any>();\r\n    const [ContactData, setContactData] = useState<any>();\r\n    const UserRole = useSelector((state: any) =>\r\n        state.user ? state.user.role : null\r\n    );\r\n    useEffect(() => {\r\n        //getOrderData()\r\n        //console.log(props.orderID,\"OrderID\")\r\n        getOrderTracking();\r\n    }, [])\r\n    const getOrderTracking = async () => {\r\n        let res: any;\r\n        if (UserRole === 'Admin' || UserRole === 'Supplier Admin') {\r\n            //console.log(props.orderID,\"OrderID\")\r\n            res = await orderService.orders.getOrderTracking(props);\r\n            console.log(res, \"Response is\")\r\n        } else if (UserRole === 'Supplier') {\r\n            res = await orderService.orders.getOrderTracking(props)\r\n        }\r\n        if (!res.success) {\r\n            window.snakAlert.error(res.message);\r\n        } else {\r\n            if (res.success) {\r\n              console.log(res.data,\"data get\")\r\n                setTrackingData(res.data.orderTracking)\r\n                setStatus(res.data?.orderTracking.Status);\r\n            } else {\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n    }\r\n    // const setData2 = (data: any) => {\r\n    //     if (data) {\r\n    //         setContactID(data.Id);\r\n    //         setContactName(data.Name);\r\n    //     } else {\r\n    //         setContactID(null);\r\n    //         setContactName('');\r\n    //     }\r\n    // }\r\n\r\n    // const load = async () => {\r\n    //     //For all salsforce Accounts\r\n    //     setData(null);\r\n    //     let res: any = await sfdc.getAll();\r\n    //     if (res.success) {\r\n    //         setData(res.data);\r\n    //     }\r\n    // }\r\n\r\n    // const load2 = async () => {\r\n    //     //For contacts\r\n    //     setContactData(null);\r\n    //     let res: any = await sfdc.getAccountRelatedDocs(Account.id);\r\n    //     setLoading(true);\r\n    //     if (res.success) {\r\n    //         setContactData(res.data);\r\n    //         setData2(res.data);\r\n    //         setLoading(false);\r\n    //     }\r\n    // }\r\n\r\n\r\n    const [trackingData, setTrackingData] = useState({\r\n        Status: '',\r\n        ShippingDate: '',\r\n        TrackingInfo: '',\r\n        ShippingTracking: '',\r\n        SerialNo:''\r\n      })\r\n    const updateOrderTracking = async () => {\r\n        let res: any;\r\n        console.log(props.id,\"OrderID\")\r\n        let payload = { ...trackingData, OrderID: props.id}\r\n        console.log(payload);\r\n        if (UserRole === 'Admin' || UserRole === 'Supplier Admin') {\r\n          res = await orderService.orders.updateOrderTrackingstatusModal(payload)\r\n        } else if (UserRole === 'Supplier') {\r\n          res = await orderService.orders.updateOrderTrackingstatusModal(payload)\r\n        }\r\n        if (!res.success) {\r\n          window.snakAlert.error(res.message);\r\n        } else {\r\n          if (res.success) {\r\n            console.log(res.data,\"Data is\")\r\n            setTrackingData(res.data?.updatedTrackingOrder)\r\n            window.snakAlert.success(\"Order status updated successfully\")\r\n          } else {\r\n            window.snakAlert.error(res.message);\r\n          }\r\n        }\r\n      }\r\n      const sendEmail = async () => {\r\n        let res: any;\r\n        console.log(items,\"Items are\")\r\n        let payload = {items,OrderID:props.id,Status:props.status}\r\n        console.log(payload,\"payload is\")\r\n        if (UserRole === 'Admin' || UserRole === 'Supplier Admin' || UserRole === 'Supplier') {\r\n          res = await orderService.orders.sendOrderEmail(payload)\r\n          props.onClose();\r\n        } \r\n        if (!res.success) {\r\n          props.onClose();\r\n          window.snakAlert.error(res.message);\r\n        } else {\r\n          if (res.success) {\r\n            props.onClose();\r\n            window.snakAlert.success(\"Order Email Sent successfully\")\r\n          } else {\r\n            props.onClose();\r\n            window.snakAlert.error(res.message);\r\n          }\r\n        }\r\n      }\r\n    const handleChangeStatus = (e: any) => {\r\n        setStatus(e.target.value);\r\n        setTrackingData({ ...trackingData, Status: e.target.value });\r\n      }\r\n    const handleAccountSubmit = () => {\r\n        updateOrderTracking();\r\n        sendEmail();\r\n    }\r\n    const handleEmails = (email) => {\r\n        console.log(email,\"Current Email is\")\r\n        setItems([...items, email])\r\n        console.log(email,\"Emails are\")\r\n    }\r\n    return (\r\n        <>\r\n            <br />\r\n            <Grid container spacing={4}>\r\n                <Grid item md={12}>\r\n                    <FormControl fullWidth>\r\n                        <InputLabel>Status</InputLabel>\r\n                        <Select\r\n                            value={status}\r\n                            label=\"Status\"\r\n                            size=\"small\"\r\n                            onChange={handleChangeStatus}\r\n                        >\r\n                            <MenuItem value={'Ordered'}>Ordered</MenuItem>\r\n                            <MenuItem value={'Shipped'}>Shipped</MenuItem>\r\n                            <MenuItem value={'Received'}>Received</MenuItem>\r\n                            <MenuItem value={'Fulfilled'}>Fulfilled</MenuItem>\r\n                            <MenuItem value={'Returned'}>Returned</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <br></br>\r\n                    <br></br>\r\n                </Grid>\r\n                <Grid item md={12}>\r\n                    <MultipleValueTextInput\r\n                        class=\"custom-multiinput\"\r\n                        onItemAdded={(item, allItems) => setItems([...items, item])}\r\n                        // onItemAdded={(item, allItems) => handleEmails(item)}\r\n                        onItemDeleted={(item, allItems) => console.log(`Item removed: ${item}`)}\r\n                        label=\"Add Email\"\r\n                        name=\"item-input\"\r\n                        placeholder=\"Enter whatever emails you want; separate them with COMMA or ENTER.\"\r\n                        values={[]}\r\n                    />\r\n                </Grid>\r\n                <Grid item md={12}>\r\n                    <Stack justifyContent=\"right\" direction=\"row\">\r\n                        <Button disabled={!(status)} size=\"small\" variant=\"contained\" color=\"secondary\" onClick={handleAccountSubmit} autoFocus>Submit</Button>\r\n                    </Stack>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\nexport default DialogAccountSelector;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\METER.ts",["2209"],"/**\r\n * ABU billing unit \r\n*/\r\nimport client from './client';\r\nconst getReport = async(params)=>{\r\n     \r\n    let res:any = await client.get('/billing/report/meter',params);\r\n    if(res.success){\r\n        return res;\r\n    }\r\n    return {success:true,data:[]};\r\n}\r\n\r\nconst getBreakdown = async(params)=>{\r\n     \r\n    let res:any = await client.get('/billing/report/meter/breakdown',params);\r\n    if(res.success){\r\n        return res;\r\n    }\r\n    return {success:true,data:[]};\r\n}\r\n\r\n\r\nexport default {\r\n    getReport,getBreakdown\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\valueIQ\\StackedColumn.tsx",["2210","2211","2212","2213","2214","2215"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, LinearProgress, Paper, Tab, Tabs } from \"@mui/material\";\r\nimport { COLOR_SERIES } from \"../../../const\";\r\n\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport HC_more from \"highcharts/highcharts-more\";\r\nrequire(\"highcharts/modules/exporting\")(Highcharts);\r\nHC_more(Highcharts);\r\n\r\nconst StackedColumn = React.forwardRef((props: any,ref:any) => {\r\n  const { series, category, title, updateTiles,Value,spend } = props;\r\n  \r\n\r\n  const options: any = {\r\n    chart: {\r\n        type: 'column',\r\n\r\n    },\r\n    title: {\r\n        text: title\r\n    },\r\n    xAxis: {\r\n        categories: category\r\n    },\r\n    yAxis: {\r\n        min: 0,\r\n        title: {\r\n            text: title\r\n        },\r\n        stackLabels: {\r\n            enabled: true,\r\n            style: {\r\n                fontWeight: 'bold',\r\n            },\r\n            formatter:  function() {\r\n              let t:any = this\r\n                if (t.total > 1000)\r\n                return (t.total/1000).toFixed(0) + 'k'\r\n                else\r\n                return t.total.toFixed(0)\r\n            }\r\n        }\r\n    },\r\n    colors: COLOR_SERIES,\r\n\r\n\r\n    tooltip: {\r\n        formatter(){\r\n          let t:any = this || {};\r\n          if (t?.point?.y > 1000)\r\n          return `${t?.series?.name}: <b>${(t?.point?.y/1000).toFixed(0)}k</b>`\r\n          else \r\n          return `${t?.series?.name}: <b>${t?.point?.y.toFixed(0)}</b>`\r\n      },\r\n       \r\n    },\r\n    plotOptions: {\r\n        column: {\r\n            stacking: 'normal',\r\n            dataLabels: {\r\n                // enabled: true\r\n            }\r\n        }\r\n    },\r\n    series: series\r\n}\r\n  const [option, setOption] = useState<any>(options);\r\n  const [loading, setloading] = useState(true);\r\n  const [ShowGraph, setShowGraph] = useState<boolean>(false);\r\n  const [value, setValue] = React.useState(1);\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n  useEffect(() => {\r\n    setloading(true);\r\n    setShowGraph(false);\r\n    if (value == 3){\r\n        let cat1 = {...option.xAxis, categories:category.slice(9,category.length) }\r\n        let tempSeries:any = []\r\n        for( let i=0 ;i< series.length;i++){ \r\n             tempSeries.push( {...option.series[i], data: series[i].data.slice(9,series[i].data.length)})\r\n        }\r\n        setOption({...option,series:tempSeries,xAxis:cat1 })\r\n        updateTiles(Value.slice(9,Value.length),spend.slice(9,spend.length))\r\n    }\r\n    if (value == 2){\r\n        let cat1 = {...option.xAxis, categories:category.slice(6,category.length) }\r\n        let tempSeries:any = []\r\n        for( let i=0 ;i< series.length;i++){ \r\n             tempSeries.push( {...option.series[i], data: series[i].data.slice(6,series[i].data.length)})\r\n        }\r\n        setOption({...option,series:tempSeries,xAxis:cat1 })\r\n        updateTiles(Value.slice(6,Value.length),spend.slice(6,spend.length))\r\n    }\r\n    if (value == 1){\r\n        let cat1 = {...option.xAxis, categories:category }\r\n        let tempSeries:any = []\r\n        for( let i=0 ;i< series.length;i++){ \r\n             tempSeries.push( {...option.series[i], data: series[i].data})\r\n        }\r\n        setOption({...option,series:tempSeries,xAxis:cat1 })\r\n        updateTiles([...Value],[...spend])\r\n    }\r\n    setloading(false);\r\n    setShowGraph(true);\r\n    // console.log(\"afnan\",Highcharts.getSVG())\r\n\r\n  }, [series, category, value]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      <Grid container justifyContent='flex-end' mb={4}>\r\n        <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\r\n            <Tab label=\"Last 12 Months\" value={1} />\r\n            <Tab label=\"Last 6 Months\"  value={2}/>\r\n            <Tab label=\"Last 3 Months\" value={3} />\r\n            \r\n        </Tabs>\r\n      </Grid>\r\n      \r\n      {!loading && ShowGraph && (\r\n        <>\r\n        \r\n          <HighchartsReact highcharts={Highcharts} options={option} ref={ref}/>\r\n       </>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default StackedColumn;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\valueIQ\\StackedArea.tsx",["2216","2217","2218","2219"],"import React, { useEffect, useState } from \"react\";\r\nimport { LinearProgress, Paper } from \"@mui/material\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { COLOR_SERIES } from \"../../../const\";\r\n\r\nconst StackedArea = (props: any) => {\r\n  const { series, category, title, description } = props;\r\n  let subTitle = description && description[title] ? description[title] : \"\";\r\n  const options = {\r\n    chart: {\r\n      type: \"area\",\r\n    },\r\n    colors: COLOR_SERIES,\r\n    title: {\r\n      text: title,\r\n    },\r\n    subtitle: {\r\n      text: subTitle,\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: title,\r\n      },\r\n      labels: {},\r\n    },\r\n    xAxis: {\r\n      title: {\r\n        text: \"Date\",\r\n      },\r\n      categories: category,\r\n      crosshair: true,\r\n    },\r\n    tooltip: {\r\n    //   pointFormat: '<span style=\"color:{series.color}\">\\u25CF</span> {series.name} <b>{point.y:.2f}</b>',\r\n      formatter(){\r\n        let t:any = this || {};\r\n        let style = ``\r\n        for(let i=0;i<t.points.length;i++){\r\n          let temp = `<span style=\"color:${t?.points[i]?.series?.color}\">\\u25CF</span> ${t?.points[i]?.series?.name}: <b>${t?.points[i]?.point?.y >1000 ? (t?.points[i]?.point?.y/1000).toFixed(0)+'k':t?.points[i]?.point?.y.toFixed(0)}</b><br/><br/>`\r\n          style = style+temp\r\n        }\r\n        return style\r\n    },\r\n      split: true,\r\n    },\r\n    // tooltip: {\r\n    //     split: true,\r\n    // },\r\n    plotOptions: {\r\n      area: {\r\n        stacking: \"normal\",\r\n        lineWidth: 1,\r\n        //fillColor:'#e244060f',\r\n      },\r\n      column: {\r\n        pointPadding: 0.2,\r\n        borderWidth: 0,\r\n      },\r\n    },\r\n    series: series,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StackedArea;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\logs\\index.tsx",["2220","2221","2222","2223"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\logs\\Filter.tsx",["2224","2225","2226","2227","2228","2229","2230","2231","2232","2233"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\admin\\logs\\Listing.tsx",["2234","2235","2236","2237","2238","2239","2240","2241","2242","2243","2244","2245","2246","2247","2248","2249","2250","2251","2252","2253","2254","2255","2256","2257","2258","2259"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@mui/material';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable, { ExpanderComponentProps,TableRow }  from 'react-data-table-component';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {USER_TYPE} from '../../../const';\r\n\r\nconst Listing = (props:any)=>{\r\n    const [tagDialog,setTagDialog]:any = useState({open:false,row:{}});\r\n    \r\n    const handlerShowTagDialog = (row:any)=>{\r\n        setTagDialog({...tagDialog,open:true,row:row});\r\n    }\r\n\r\n    const columns:any = [\r\n        {\r\n          name: 'Name',\r\n          selector: 'UserName',\r\n          compact:true,\r\n          //width:'170px',\r\n        },  \r\n        {\r\n            name: 'Email',\r\n            selector: 'Email',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Controller',\r\n            selector: 'Controller',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Role',\r\n            selector: 'UserRole',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200\r\n        },\r\n        {\r\n            name: 'Date',\r\n            selector: 'Date',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200,\r\n            cell:(row:any)=><>{u.format.datetime(row.DateCreated)}</>\r\n        },\r\n        {\r\n            name: 'Error',\r\n            selector: 'Error',\r\n            // compact:true,\r\n            width:'160px',\r\n            // right:true,\r\n            hide:600,\r\n            cell:(row:any)=><>{row.Error ? '   True':'    False'}</>\r\n        },\r\n        \r\n        \r\n        \r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            expandableRows\r\n            expandableRowsComponent={ExpandedComponent}\r\n            \r\n        />\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nconst ExpandedComponent:React.FC<ExpanderComponentProps<TableRow>> = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n                \r\n                <div className=\"field\">\r\n                    <span className=\"key\">Full Name:</span>\r\n                    <div className=\"value\"> {data.UserName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Email:</span>\r\n                    <div className=\"value\"> {data.Email} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Role:</span>\r\n                    <div className=\"value\"> {data.UserRole} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Path:</span>\r\n                    <div className=\"value\"> {data.Path} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Method:</span>\r\n                    <div className=\"value\"> {data.Method} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Controller:</span>\r\n                    <div className=\"value\"> {data.Controller} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateCreated)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Error:</span>\r\n                    <div className=\"value\"> {data.Error ? data.Error:'False'} </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Listing;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\logs\\StackedBar.tsx",["2260","2261","2262","2263","2264","2265"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\logs\\PieChart.tsx",["2266","2267","2268","2269","2270","2271","2272","2273","2274","2275","2276","2277","2278","2279","2280"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\logs\\BubbleChart.tsx",["2281","2282","2283","2284","2285","2286","2287","2288","2289","2290","2291","2292","2293","2294","2295","2296"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\logs\\ColumnChart.tsx",["2297","2298","2299","2300","2301","2302","2303","2304","2305","2306","2307","2308","2309","2310"],"D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\components\\graphs\\valueIQ\\FutureChart.tsx",["2311","2312","2313","2314","2315"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, LinearProgress, Paper, Tab, Tabs } from \"@mui/material\";\r\nimport { COLOR_SERIES } from \"../../../const\";\r\n\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport HC_more from \"highcharts/highcharts-more\";\r\nrequire(\"highcharts/modules/exporting\")(Highcharts);\r\nHC_more(Highcharts);\r\n\r\nconst FutureChart = (props: any) => {\r\n  const { futureSeries,futureSpend,pastSeries,pastSpend, pastCategory,futureCategory, title,futureValue,updateTiles } = props;\r\n  \r\n\r\n  const options: any = {\r\n    chart: {\r\n        type: 'column',\r\n\r\n    },\r\n    title: {\r\n        text: title\r\n    },\r\n    xAxis: {\r\n        categories: futureCategory\r\n    },\r\n    yAxis: {\r\n        min: 0,\r\n        title: {\r\n            text: title\r\n        },\r\n        stackLabels: {\r\n            enabled: true,\r\n            style: {\r\n                fontWeight: 'bold',\r\n            },\r\n            formatter:  function() {\r\n              let t:any = this\r\n                if (t.total > 1000)\r\n                return (t.total/1000).toFixed(0) + 'k'\r\n                else\r\n                return t.total.toFixed(0)\r\n            }\r\n        }\r\n    },\r\n    colors: COLOR_SERIES,\r\n\r\n\r\n    tooltip: {\r\n        formatter(){\r\n          let t:any = this || {};\r\n          if (t?.point?.y > 1000)\r\n          return `${t?.series?.name}: <b>${(t?.point?.y/1000).toFixed(0)}k</b>`\r\n          else \r\n          return `${t?.series?.name}: <b>${t?.point?.y.toFixed(0)}</b>`\r\n      },\r\n       \r\n    },\r\n    plotOptions: {\r\n        column: {\r\n            stacking: 'normal',\r\n            dataLabels: {\r\n                // enabled: true\r\n            }\r\n        }\r\n    },\r\n    series: [] \r\n}\r\n  const [option, setOption] = useState<any>(options);\r\n  const [loading, setloading] = useState(true);\r\n  const [ShowGraph, setShowGraph] = useState<boolean>(false);\r\n  const [value, setValue] = React.useState(1);\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n    // updateDuration(newValue)\r\n  };\r\n  useEffect(() => {\r\n    debugger\r\n    setloading(true);\r\n    setShowGraph(false);\r\n    // if (value == 2){\r\n    //     let cat1 = {...option.xAxis, categories:category.slice(0,category.length-12) }\r\n    //     let tempSeries:any = []\r\n    //     for( let i=0 ;i< series.length;i++){ \r\n    //          tempSeries.push( {...option.series[i], data: series[i].data.slice(0,series[i].data.length-12)})\r\n    //     }\r\n    //     setOption({...option,series:tempSeries,xAxis:cat1 })\r\n        \r\n    // }\r\n    if (value == 1){\r\n        let cat1 = {...option.xAxis, categories:futureCategory }\r\n        let p = {...futureSpend,data:[...futureSpend.data]}\r\n        // let series = [...option.series, futureSeries.slice(1,futureSeries.length),futureSpend]\r\n        let tempSeries:any = []\r\n        for( let i=1 ;i< futureSeries.length;i++){ \r\n             tempSeries.push( {...futureSeries[i], data: [...futureSeries[i].data]})\r\n        }\r\n        // setOption({...option,series:tempSeries,xAxis:cat1 })\r\n        setOption({...option,series:[...tempSeries,p ],xAxis:cat1 })\r\n        updateTiles([...futureValue],[...futureSpend.data])\r\n    }\r\n    if (value == 2){\r\n        let cat1 = {...option.xAxis, categories:pastCategory }\r\n        let p = {...pastSpend,data:[...pastSpend.data]}\r\n        // let series = [...option.series, futureSeries.slice(1,futureSeries.length),futureSpend]\r\n        let tempSeries:any = []\r\n        for( let i=1 ;i< pastSeries.length;i++){ \r\n             tempSeries.push( {...pastSeries[i], data: [...pastSeries[i].data]})\r\n        }\r\n        setOption({...option,series:[...tempSeries,p ],xAxis:cat1 })\r\n        updateTiles([...pastSeries[0].data],[...pastSpend.data])\r\n        \r\n    }\r\n    setloading(false);\r\n    setShowGraph(true);\r\n    // console.log(\"afnan\",Highcharts.getSVG())\r\n\r\n  }, [futureSeries,futureSpend,pastSeries,pastSpend, pastCategory,futureCategory, value]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <LinearProgress />}\r\n      <Grid container justifyContent='flex-end' mb={4}>\r\n        <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\r\n            {/* <Tab label=\"All Months\" value={0} /> */}\r\n            <Tab label=\"Next 12 Months\" value={1} />\r\n            <Tab label=\"Last 12 Months\"  value={2}/>\r\n           \r\n            \r\n            \r\n           \r\n            {/* <Tab label=\"Next 3 Months\" value={3} /> */}\r\n            \r\n        </Tabs>\r\n      </Grid>\r\n      \r\n      {!loading && ShowGraph && (\r\n        <>\r\n        \r\n          <HighchartsReact highcharts={Highcharts} options={option} />\r\n       </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FutureChart;\r\n","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\pages\\valueIQ\\DialogPredictionSettings.tsx",["2316","2317","2318","2319","2320","2321","2322","2323","2324","2325","2326","2327","2328","2329","2330","2331","2332","2333","2334","2335","2336","2337","2338"],"import React,{useEffect, useState} from 'react';\r\nimport { Grid, Paper,Stack,Button, Icon, Dialog, DialogTitle, DialogContent, DialogActions, Divider, InputLabel, FormControl, Select, MenuItem, TextField, InputAdornment, Slider } from '@mui/material';\r\nimport './assets/style.css';\r\n\r\n\r\n\r\nconst DialogPredictionSettings = (props:any)=>{\r\n    \r\n    // console.log(category)\r\n    const  {onClose,handlerSave,futureSpend, futureValue,futureCategory, futureVariables,setFutureVariables} = props\r\n    const [initialSpend, setInitialSpend] = useState<any>(0);\r\n    const [percentSpend, setPercentSpend] = useState<any>(0);\r\n\r\n    const [initialValue, setInitialValue] = useState<any>(0);\r\n    const [percentValue, setPercentValue] = useState<any>(0);\r\n    \r\n\r\n    const [category,setCategory] =useState<any|null>([...futureCategory])\r\n    const [projectedSpend, setProjectedSpend] =useState<any[]>([...futureSpend])\r\n    const [projectedValue, setProjectedValue] =useState<any[]>([...futureValue]) \r\n \r\n    const handlerChangeSpend = (e,index)=>{\r\n        let temp =[...projectedSpend]\r\n        if(e.target.value == '') temp[index] = 0\r\n        else temp[index] = parseInt(e.target.value)\r\n        setProjectedSpend(temp)\r\n    }\r\n    const populateSpend =()=>{\r\n        if(percentSpend!='' && initialSpend !=''){\r\n            let temp:any[]= []\r\n            const partialSum = (parseInt(percentSpend)/100)*parseInt(initialSpend);\r\n            temp.push(parseInt(initialSpend))\r\n            let sum:any = parseInt(initialSpend)\r\n            for(let i = 1; i<projectedSpend.length;i++){\r\n                sum=partialSum+sum\r\n                temp.push(parseFloat(sum.toFixed(2)))\r\n            }\r\n            \r\n            setProjectedSpend(temp)\r\n        }\r\n    }\r\n    const handlerChangeValue = (e,index)=>{\r\n        let temp =[...projectedValue]\r\n        if(e.target.value == '') temp[index] = 0\r\n        else temp[index] = parseInt(e.target.value)\r\n        setProjectedValue(temp)\r\n    }\r\n    const populateValue =()=>{\r\n        if(percentValue!='' && initialValue !=''){\r\n            let temp:any[]= []\r\n            const partialSum = (parseInt(percentValue)/100)*parseInt(initialValue);\r\n            temp.push(parseInt(initialValue))\r\n            let sum:any = parseInt(initialValue)\r\n            for(let i = 1; i<projectedValue.length;i++){\r\n                sum=partialSum+sum\r\n                temp.push(parseFloat(sum.toFixed(2)))\r\n            }\r\n            \r\n            setProjectedValue(temp)\r\n        }\r\n    }\r\n    const getSliderValue = (name:string)=>{\r\n        let v = futureVariables.filter((v)=>v.name==name);\r\n        if(v?.length > 0){\r\n            return v[0].value;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    const setSliderValue = (name:string,val:any)=>{\r\n        let _variables = [...futureVariables];\r\n        let v = _variables.filter((v)=>v.name==name);\r\n        if(v?.length > 0){\r\n            let vfilter = _variables.filter((v)=>v.name!=name);\r\n            let total = vfilter.map(v => v.value).reduce((oldV, newV) => oldV + newV) + val;\r\n            if(total > 100){\r\n                v[0].value = val - (total-100) ;\r\n            }else{\r\n                v[0].value = val;\r\n            }\r\n        }\r\n        setFutureVariables(_variables)\r\n    }\r\n    function valueLabelFormat(value: any) { \r\n        return `${value}%`;\r\n    }\r\n\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"v-iq\">\r\n                <h2 className='mt-10'>Configure Projections</h2>\r\n                <Divider/>\r\n            <br/>\r\n                <Grid container spacing={4}>\r\n                    <Grid item md={3}>\r\n                            <Paper elevation={1} className=\"section\">\r\n                                    <div className='slider-section'>\r\n                                        {futureVariables && futureVariables.map((variable: any, ind: number) => (\r\n                                            <>\r\n                                                <label>{variable.name} <span className='s-v'>{getSliderValue(variable.name)}%</span></label>\r\n                                                <Slider\r\n                                                    aria-label=\"Custom marks\"\r\n                                                    defaultValue={25}\r\n                                                    value={getSliderValue(variable.name)}\r\n                                                    // getAriaValueText={valuetext1}\r\n                                                    valueLabelFormat={valueLabelFormat}\r\n                                                    step={1}\r\n                                                    valueLabelDisplay=\"auto\"\r\n                                                    onChange={(event, newValue) => { setSliderValue(variable.name, newValue); } }\r\n                                                    // marks={marks}\r\n                                                    min={0}\r\n                                                    max={100} />\r\n                                                <Divider />\r\n                                            </>\r\n                                        ))}\r\n\r\n                                    </div>\r\n                                </Paper>\r\n                    </Grid>\r\n                    <Grid item md={9}>\r\n                        <h4 style={{marginTop:'0px',marginBottom:'2px'}} >Configure Cost</h4>\r\n                        <Divider className='mb-10'/>\r\n                        \r\n                        <Paper elevation={1} className=\"section\">\r\n                        <Grid container spacing={4}>\r\n                            <Grid  item md={6}>\r\n                                                <TextField size=\"small\" id=\"full-width-text-field\"\r\n                                                    name=\"initial\" label=\"Initial Cost\" fullWidth\r\n                                                    onChange={(e) => setInitialSpend(e.target.value)} onBlur={populateSpend} value={initialSpend} required />\r\n                                </Grid>\r\n                                <Grid item md={6}>\r\n\r\n                                <TextField size=\"small\" id=\"full-width-text-field\"\r\n                                InputProps={{\r\n                                    startAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n                                }}\r\n                                                    name=\"percent\" label=\"Percentage Increase\" fullWidth\r\n                                                    onChange={(e) => setPercentSpend(e.target.value)} onBlur={populateSpend} value={percentSpend} required \r\n                                                \r\n                                                    \r\n                                                    />    \r\n                                </Grid>\r\n                            <br />\r\n                            <Grid item md={12}>\r\n                                <Grid container spacing={4}>\r\n                                        {category.map((e:any,index)=>(\r\n                                            <>\r\n                                                <Grid key={index} item md={6}>\r\n                                                <TextField size=\"small\" id=\"full-width-text-field\"\r\n                                                    name={e} label={e} fullWidth\r\n                                                    onChange={(e) => handlerChangeSpend(e, index)} value={projectedSpend[index]} required />\r\n                                                </Grid>\r\n                                            </>\r\n                                        ))}\r\n                                    \r\n                                </Grid>\r\n                            </Grid>\r\n                            <br />\r\n                                <Divider />\r\n                                <Button className=\"project\" disabled={ percentSpend==0} size=\"small\" variant=\"contained\" color=\"secondary\" \r\n                                    startIcon={<Icon>timeline</Icon>} \r\n                                    // onClick={()=> handlerSave(projectedSpend)}\r\n                                    >Project Cost\r\n                                </Button>\r\n                            </Grid>                 \r\n                        </Paper>\r\n                            \r\n    \r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container direction=\"row\" justifyContent=\"flex-end\" >\r\n                <Grid item md={9} className=\"mt-10\">\r\n                \r\n                    <h4 style={{marginTop:'0px',marginBottom:'2px'}} >Configure Value</h4>\r\n                    <Divider className='mb-10'/>\r\n                    \r\n                        <Paper elevation={1} className=\"section\">\r\n                        \r\n                        <Grid container spacing={4} >\r\n                        \r\n                            <Grid  item md={6}>\r\n                                                <TextField size=\"small\" id=\"full-width-text-field\"\r\n                                                    name=\"initial\" label=\"Initial Value\" fullWidth\r\n                                                    onChange={(e) => setInitialValue(e.target.value)} onBlur={populateValue} value={initialValue} required />\r\n                                </Grid>\r\n                                <Grid item md={6}>\r\n\r\n                                <TextField size=\"small\" id=\"full-width-text-field\"\r\n                                InputProps={{\r\n                                    startAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n                                }}\r\n                                                    name=\"percent\" label=\"Percentage Increase\" fullWidth\r\n                                                    onChange={(e) => setPercentValue(e.target.value)} onBlur={populateValue} value={percentValue} required \r\n                                                \r\n                                                    \r\n                                                    />    \r\n                                </Grid>\r\n                            <br />\r\n                            <Grid item md={12}>\r\n                                <Grid container spacing={4}>\r\n                                        {category.map((e:any,index)=>(\r\n                                            <>\r\n                                                <Grid key={index} item md={6}>\r\n                                                <TextField size=\"small\" id=\"full-width-text-field\"\r\n                                                    name={e} label={e} fullWidth\r\n                                                    onChange={(e) => handlerChangeValue(e, index)} value={projectedValue[index]} required />\r\n                                                </Grid>\r\n                                            </>\r\n                                        ))}\r\n                                    \r\n                                </Grid>\r\n                            </Grid>\r\n                            <br />\r\n                                <Divider />\r\n                                <Button className=\"project\" disabled={ percentValue==0} size=\"small\" variant=\"contained\" color=\"secondary\" \r\n                                    startIcon={<Icon>timeline</Icon>} \r\n                                    // onClick={()=> handlerSave(projectedSpend)}\r\n                                    >Project Value\r\n                                </Button>\r\n                            </Grid>                 \r\n                        </Paper>\r\n                            \r\n    \r\n                    </Grid>\r\n                   \r\n                </Grid>\r\n                <Grid container direction=\"row\" justifyContent=\"flex-end\">\r\n                <Divider />\r\n                                <Button className=\"project\"  size=\"small\" variant=\"contained\" color=\"secondary\" \r\n                                    startIcon={<Icon>save</Icon>} \r\n                                    onClick={()=> handlerSave(projectedSpend,projectedValue)}\r\n                                    >Save\r\n                                </Button>\r\n                </Grid>\r\n                    \r\n               \r\n            </div>\r\n           \r\n               \r\n        </>\r\n    )\r\n}\r\n\r\nexport default DialogPredictionSettings;","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\logs\\index.ts",["2339"],"import logs from './logs'\r\n\r\n\r\n\r\nexport default {\r\n    logs\r\n}","D:\\Workspace\\react\\aviatrix360\\stage\\customer360-app\\src\\services\\logs\\logs.ts",["2340"],"/**\r\n * Salesforce Service\r\n */\r\n\r\nimport client from '../client';\r\n\r\nconst listing = async (params) => {\r\n    let res: any = await client.get(\"/logs/list\", params);\r\n    return res;\r\n}\r\n\r\nexport default {\r\n    listing\r\n}","D:\\Workspace\\react\\test\\src\\index.tsx",[],["2341","2342"],"D:\\Workspace\\react\\test\\src\\reportWebVitals.ts",[],"D:\\Workspace\\react\\test\\src\\App.tsx",[],"D:\\Workspace\\react\\test\\src\\WithClearCache.tsx",[],"D:\\Workspace\\react\\test\\src\\AppInitializer.tsx",["2343"],"D:\\Workspace\\react\\test\\src\\common\\Footer.tsx",[],"D:\\Workspace\\react\\test\\src\\common\\Header.tsx",[],"D:\\Workspace\\react\\test\\src\\routes\\index.tsx",[],"D:\\Workspace\\react\\test\\src\\store\\index.ts",[],"D:\\Workspace\\react\\test\\src\\store\\actions.js",[],["2344","2345"],"D:\\Workspace\\react\\test\\src\\services\\auth.ts",["2346"],"D:\\Workspace\\react\\test\\src\\routes\\routing.tsx",[],"D:\\Workspace\\react\\test\\src\\store\\actionTypes.js",[],"D:\\Workspace\\react\\test\\src\\services\\client.ts",[],"D:\\Workspace\\react\\test\\src\\pages\\Login.tsx",[],"D:\\Workspace\\react\\test\\src\\components\\AlertMessage.tsx",["2347","2348"],["2349","2350"],"D:\\Workspace\\react\\test\\src\\pages\\index.tsx",[],"D:\\Workspace\\react\\test\\src\\components\\SnakAlert.tsx",["2351"],{"ruleId":"2352","replacedBy":"2353"},{"ruleId":"2354","replacedBy":"2355"},{"ruleId":"2356","severity":1,"message":"2357","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":24,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2361","line":5,"column":36,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2357","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2362","line":5,"column":10,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":14},{"ruleId":"2363","severity":1,"message":"2364","line":43,"column":7,"nodeType":"2365","endLine":43,"endColumn":16,"suggestions":"2366"},{"ruleId":"2367","severity":1,"message":"2368","line":59,"column":17,"nodeType":"2369","endLine":59,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2370","line":17,"column":10,"nodeType":"2358","messageId":"2359","endLine":17,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2371","line":93,"column":7,"nodeType":"2358","messageId":"2359","endLine":93,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":24,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2372","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2373","line":12,"column":11,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":15},{"ruleId":"2352","replacedBy":"2353"},{"ruleId":"2354","replacedBy":"2355"},{"ruleId":"2374","severity":1,"message":"2375","line":40,"column":5,"nodeType":"2376","messageId":"2377","endLine":48,"endColumn":6},{"ruleId":"2378","severity":1,"message":"2379","line":27,"column":1,"nodeType":"2380","endLine":29,"endColumn":2},{"ruleId":"2356","severity":1,"message":"2381","line":3,"column":10,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2382","line":3,"column":22,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2383","line":5,"column":10,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":21},{"ruleId":"2384","severity":1,"message":"2385","line":17,"column":64,"nodeType":"2386","messageId":"2387","endLine":17,"endColumn":66},{"ruleId":"2363","severity":1,"message":"2388","line":19,"column":7,"nodeType":"2365","endLine":19,"endColumn":21,"suggestions":"2389"},{"ruleId":"2384","severity":1,"message":"2385","line":42,"column":23,"nodeType":"2386","messageId":"2387","endLine":42,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2390","line":15,"column":11,"nodeType":"2358","messageId":"2359","endLine":15,"endColumn":21},{"ruleId":"2384","severity":1,"message":"2385","line":31,"column":27,"nodeType":"2386","messageId":"2387","endLine":31,"endColumn":29},{"ruleId":"2384","severity":1,"message":"2385","line":39,"column":36,"nodeType":"2386","messageId":"2387","endLine":39,"endColumn":38},{"ruleId":"2356","severity":1,"message":"2391","line":2,"column":17,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2392","line":3,"column":8,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2393","line":7,"column":17,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2394","line":8,"column":8,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2395","line":1,"column":8,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2396","line":1,"column":20,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":28},{"ruleId":"2356","severity":1,"message":"2397","line":52,"column":7,"nodeType":"2358","messageId":"2359","endLine":52,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2398","line":53,"column":7,"nodeType":"2358","messageId":"2359","endLine":53,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2357","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2399","line":1,"column":18,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2362","line":1,"column":35,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":39},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2401","line":3,"column":17,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2402","line":17,"column":11,"nodeType":"2358","messageId":"2359","endLine":17,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2403","line":63,"column":11,"nodeType":"2358","messageId":"2359","endLine":63,"endColumn":21},{"ruleId":"2363","severity":1,"message":"2404","line":71,"column":7,"nodeType":"2365","endLine":71,"endColumn":9,"suggestions":"2405"},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":24,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2406","line":2,"column":18,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2407","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":35},{"ruleId":"2356","severity":1,"message":"2362","line":2,"column":43,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":47},{"ruleId":"2356","severity":1,"message":"2408","line":2,"column":49,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":59},{"ruleId":"2356","severity":1,"message":"2409","line":2,"column":61,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":65},{"ruleId":"2356","severity":1,"message":"2410","line":2,"column":85,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":92},{"ruleId":"2356","severity":1,"message":"2411","line":2,"column":93,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":99},{"ruleId":"2356","severity":1,"message":"2412","line":2,"column":101,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":109},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":111,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":122},{"ruleId":"2356","severity":1,"message":"2414","line":2,"column":124,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":134},{"ruleId":"2356","severity":1,"message":"2415","line":3,"column":17,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2416","line":11,"column":12,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":22},{"ruleId":"2384","severity":1,"message":"2385","line":16,"column":61,"nodeType":"2386","messageId":"2387","endLine":16,"endColumn":63},{"ruleId":"2367","severity":1,"message":"2368","line":85,"column":37,"nodeType":"2369","endLine":85,"endColumn":80},{"ruleId":"2356","severity":1,"message":"2413","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2417","line":1,"column":23,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":29,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":39},{"ruleId":"2356","severity":1,"message":"2412","line":1,"column":41,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":49},{"ruleId":"2356","severity":1,"message":"2411","line":1,"column":58,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":64},{"ruleId":"2356","severity":1,"message":"2406","line":1,"column":65,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":69},{"ruleId":"2356","severity":1,"message":"2407","line":1,"column":71,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":82},{"ruleId":"2356","severity":1,"message":"2391","line":1,"column":83,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":89},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2418","severity":1,"message":"2419","line":31,"column":15,"nodeType":"2369","endLine":31,"endColumn":87},{"ruleId":"2356","severity":1,"message":"2420","line":10,"column":17,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":24},{"ruleId":"2384","severity":1,"message":"2385","line":100,"column":72,"nodeType":"2386","messageId":"2387","endLine":100,"endColumn":74},{"ruleId":"2356","severity":1,"message":"2399","line":1,"column":18,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2362","line":1,"column":35,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":39},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":57,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":66},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2363","severity":1,"message":"2422","line":37,"column":8,"nodeType":"2365","endLine":37,"endColumn":10,"suggestions":"2423"},{"ruleId":"2356","severity":1,"message":"2399","line":1,"column":18,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2362","line":1,"column":35,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":39},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":57,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":66},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2424","line":8,"column":10,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2425","line":8,"column":17,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":27},{"ruleId":"2363","severity":1,"message":"2426","line":51,"column":8,"nodeType":"2365","endLine":51,"endColumn":10,"suggestions":"2427"},{"ruleId":"2356","severity":1,"message":"2413","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2417","line":1,"column":23,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":29,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":39},{"ruleId":"2356","severity":1,"message":"2412","line":1,"column":41,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":49},{"ruleId":"2356","severity":1,"message":"2411","line":1,"column":58,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":64},{"ruleId":"2356","severity":1,"message":"2406","line":1,"column":65,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":69},{"ruleId":"2356","severity":1,"message":"2407","line":1,"column":71,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":82},{"ruleId":"2356","severity":1,"message":"2391","line":1,"column":83,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":89},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2418","severity":1,"message":"2419","line":31,"column":15,"nodeType":"2369","endLine":31,"endColumn":87},{"ruleId":"2384","severity":1,"message":"2385","line":96,"column":14,"nodeType":"2386","messageId":"2387","endLine":96,"endColumn":16},{"ruleId":"2384","severity":1,"message":"2385","line":116,"column":14,"nodeType":"2386","messageId":"2387","endLine":116,"endColumn":16},{"ruleId":"2363","severity":1,"message":"2428","line":133,"column":6,"nodeType":"2365","endLine":133,"endColumn":8,"suggestions":"2429"},{"ruleId":"2384","severity":1,"message":"2385","line":140,"column":24,"nodeType":"2386","messageId":"2387","endLine":140,"endColumn":26},{"ruleId":"2384","severity":1,"message":"2385","line":143,"column":15,"nodeType":"2386","messageId":"2387","endLine":143,"endColumn":17},{"ruleId":"2384","severity":1,"message":"2385","line":243,"column":23,"nodeType":"2386","messageId":"2387","endLine":243,"endColumn":25},{"ruleId":"2384","severity":1,"message":"2385","line":265,"column":24,"nodeType":"2386","messageId":"2387","endLine":265,"endColumn":26},{"ruleId":"2384","severity":1,"message":"2385","line":265,"column":63,"nodeType":"2386","messageId":"2387","endLine":265,"endColumn":65},{"ruleId":"2356","severity":1,"message":"2430","line":1,"column":64,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":73},{"ruleId":"2356","severity":1,"message":"2431","line":1,"column":87,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":92},{"ruleId":"2356","severity":1,"message":"2382","line":4,"column":22,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2415","line":4,"column":42,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":47},{"ruleId":"2356","severity":1,"message":"2432","line":14,"column":12,"nodeType":"2358","messageId":"2359","endLine":14,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2433","line":14,"column":27,"nodeType":"2358","messageId":"2359","endLine":14,"endColumn":43},{"ruleId":"2363","severity":1,"message":"2434","line":36,"column":8,"nodeType":"2365","endLine":36,"endColumn":10,"suggestions":"2435"},{"ruleId":"2356","severity":1,"message":"2362","line":1,"column":41,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":45},{"ruleId":"2356","severity":1,"message":"2408","line":1,"column":47,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":57},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":59,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":69},{"ruleId":"2356","severity":1,"message":"2410","line":1,"column":116,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":123},{"ruleId":"2356","severity":1,"message":"2431","line":1,"column":125,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":130},{"ruleId":"2356","severity":1,"message":"2436","line":3,"column":10,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2437","line":3,"column":24,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":37},{"ruleId":"2356","severity":1,"message":"2438","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2439","line":5,"column":21,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":43},{"ruleId":"2356","severity":1,"message":"2440","line":5,"column":44,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":52},{"ruleId":"2384","severity":1,"message":"2441","line":23,"column":32,"nodeType":"2386","messageId":"2387","endLine":23,"endColumn":34},{"ruleId":"2363","severity":1,"message":"2442","line":122,"column":7,"nodeType":"2365","endLine":122,"endColumn":17,"suggestions":"2443"},{"ruleId":"2384","severity":1,"message":"2441","line":128,"column":27,"nodeType":"2386","messageId":"2387","endLine":128,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2357","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":24,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2406","line":2,"column":18,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2407","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":35},{"ruleId":"2356","severity":1,"message":"2408","line":2,"column":49,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":59},{"ruleId":"2356","severity":1,"message":"2409","line":2,"column":61,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":65},{"ruleId":"2356","severity":1,"message":"2421","line":2,"column":74,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":83},{"ruleId":"2356","severity":1,"message":"2410","line":2,"column":85,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":92},{"ruleId":"2356","severity":1,"message":"2411","line":2,"column":93,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":99},{"ruleId":"2356","severity":1,"message":"2412","line":2,"column":101,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":109},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":111,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":122},{"ruleId":"2356","severity":1,"message":"2414","line":2,"column":124,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":134},{"ruleId":"2356","severity":1,"message":"2413","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2417","line":1,"column":23,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":29,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":39},{"ruleId":"2356","severity":1,"message":"2412","line":1,"column":41,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":49},{"ruleId":"2356","severity":1,"message":"2411","line":1,"column":58,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":64},{"ruleId":"2356","severity":1,"message":"2406","line":1,"column":65,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":69},{"ruleId":"2356","severity":1,"message":"2407","line":1,"column":71,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":82},{"ruleId":"2356","severity":1,"message":"2391","line":1,"column":83,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":89},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2418","severity":1,"message":"2419","line":31,"column":15,"nodeType":"2369","endLine":31,"endColumn":87},{"ruleId":"2356","severity":1,"message":"2399","line":1,"column":18,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2362","line":1,"column":35,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":39},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":57,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":66},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2360","line":2,"column":32,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2401","line":3,"column":17,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2402","line":16,"column":11,"nodeType":"2358","messageId":"2359","endLine":16,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2406","line":1,"column":65,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":69},{"ruleId":"2356","severity":1,"message":"2407","line":1,"column":71,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":82},{"ruleId":"2356","severity":1,"message":"2444","line":6,"column":8,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2394","line":9,"column":8,"nodeType":"2358","messageId":"2359","endLine":9,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2445","line":10,"column":8,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2446","line":11,"column":8,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2383","line":32,"column":21,"nodeType":"2358","messageId":"2359","endLine":32,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2447","line":97,"column":9,"nodeType":"2358","messageId":"2359","endLine":97,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2448","line":98,"column":21,"nodeType":"2358","messageId":"2359","endLine":98,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2449","line":100,"column":10,"nodeType":"2358","messageId":"2359","endLine":100,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2450","line":100,"column":23,"nodeType":"2358","messageId":"2359","endLine":100,"endColumn":38},{"ruleId":"2356","severity":1,"message":"2451","line":101,"column":10,"nodeType":"2358","messageId":"2359","endLine":101,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2452","line":101,"column":20,"nodeType":"2358","messageId":"2359","endLine":101,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2453","line":634,"column":17,"nodeType":"2358","messageId":"2359","endLine":634,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2454","line":635,"column":19,"nodeType":"2358","messageId":"2359","endLine":635,"endColumn":30},{"ruleId":"2363","severity":1,"message":"2455","line":639,"column":6,"nodeType":"2365","endLine":639,"endColumn":23,"suggestions":"2456"},{"ruleId":"2363","severity":1,"message":"2457","line":643,"column":6,"nodeType":"2365","endLine":643,"endColumn":8,"suggestions":"2458"},{"ruleId":"2356","severity":1,"message":"2459","line":698,"column":7,"nodeType":"2358","messageId":"2359","endLine":698,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2460","line":708,"column":7,"nodeType":"2358","messageId":"2359","endLine":708,"endColumn":12},{"ruleId":"2356","severity":1,"message":"2461","line":801,"column":7,"nodeType":"2358","messageId":"2359","endLine":801,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2460","line":803,"column":7,"nodeType":"2358","messageId":"2359","endLine":803,"endColumn":12},{"ruleId":"2356","severity":1,"message":"2462","line":804,"column":7,"nodeType":"2358","messageId":"2359","endLine":804,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2463","line":889,"column":7,"nodeType":"2358","messageId":"2359","endLine":889,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2460","line":891,"column":7,"nodeType":"2358","messageId":"2359","endLine":891,"endColumn":12},{"ruleId":"2356","severity":1,"message":"2462","line":892,"column":7,"nodeType":"2358","messageId":"2359","endLine":892,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2464","line":992,"column":7,"nodeType":"2358","messageId":"2359","endLine":992,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2460","line":1002,"column":7,"nodeType":"2358","messageId":"2359","endLine":1002,"endColumn":12},{"ruleId":"2356","severity":1,"message":"2465","line":1091,"column":7,"nodeType":"2358","messageId":"2359","endLine":1091,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2460","line":1093,"column":7,"nodeType":"2358","messageId":"2359","endLine":1093,"endColumn":12},{"ruleId":"2356","severity":1,"message":"2462","line":1094,"column":7,"nodeType":"2358","messageId":"2359","endLine":1094,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2466","line":1175,"column":7,"nodeType":"2358","messageId":"2359","endLine":1175,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2460","line":1177,"column":7,"nodeType":"2358","messageId":"2359","endLine":1177,"endColumn":12},{"ruleId":"2356","severity":1,"message":"2462","line":1178,"column":7,"nodeType":"2358","messageId":"2359","endLine":1178,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2437","line":18,"column":25,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":38},{"ruleId":"2356","severity":1,"message":"2467","line":20,"column":10,"nodeType":"2358","messageId":"2359","endLine":20,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2468","line":20,"column":20,"nodeType":"2358","messageId":"2359","endLine":20,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2469","line":30,"column":10,"nodeType":"2358","messageId":"2359","endLine":30,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2470","line":31,"column":10,"nodeType":"2358","messageId":"2359","endLine":31,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2471","line":31,"column":22,"nodeType":"2358","messageId":"2359","endLine":31,"endColumn":35},{"ruleId":"2356","severity":1,"message":"2472","line":33,"column":10,"nodeType":"2358","messageId":"2359","endLine":33,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2473","line":34,"column":12,"nodeType":"2358","messageId":"2359","endLine":34,"endColumn":33},{"ruleId":"2363","severity":1,"message":"2474","line":94,"column":6,"nodeType":"2365","endLine":94,"endColumn":8,"suggestions":"2475"},{"ruleId":"2356","severity":1,"message":"2476","line":100,"column":9,"nodeType":"2358","messageId":"2359","endLine":100,"endColumn":30},{"ruleId":"2384","severity":1,"message":"2385","line":131,"column":44,"nodeType":"2386","messageId":"2387","endLine":131,"endColumn":46},{"ruleId":"2384","severity":1,"message":"2385","line":132,"column":44,"nodeType":"2386","messageId":"2387","endLine":132,"endColumn":46},{"ruleId":"2384","severity":1,"message":"2385","line":133,"column":44,"nodeType":"2386","messageId":"2387","endLine":133,"endColumn":46},{"ruleId":"2384","severity":1,"message":"2385","line":134,"column":44,"nodeType":"2386","messageId":"2387","endLine":134,"endColumn":46},{"ruleId":"2384","severity":1,"message":"2385","line":135,"column":44,"nodeType":"2386","messageId":"2387","endLine":135,"endColumn":46},{"ruleId":"2356","severity":1,"message":"2477","line":164,"column":9,"nodeType":"2358","messageId":"2359","endLine":164,"endColumn":16},{"ruleId":"2384","severity":1,"message":"2385","line":176,"column":51,"nodeType":"2386","messageId":"2387","endLine":176,"endColumn":53},{"ruleId":"2384","severity":1,"message":"2385","line":177,"column":51,"nodeType":"2386","messageId":"2387","endLine":177,"endColumn":53},{"ruleId":"2384","severity":1,"message":"2385","line":178,"column":51,"nodeType":"2386","messageId":"2387","endLine":178,"endColumn":53},{"ruleId":"2384","severity":1,"message":"2385","line":179,"column":51,"nodeType":"2386","messageId":"2387","endLine":179,"endColumn":53},{"ruleId":"2384","severity":1,"message":"2385","line":180,"column":51,"nodeType":"2386","messageId":"2387","endLine":180,"endColumn":53},{"ruleId":"2356","severity":1,"message":"2478","line":1,"column":18,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2479","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":44},{"ruleId":"2356","severity":1,"message":"2480","line":1,"column":46,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":55},{"ruleId":"2356","severity":1,"message":"2411","line":1,"column":85,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":91},{"ruleId":"2356","severity":1,"message":"2413","line":1,"column":92,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":103},{"ruleId":"2356","severity":1,"message":"2412","line":1,"column":105,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":113},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":115,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":125},{"ruleId":"2356","severity":1,"message":"2481","line":6,"column":8,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2402","line":30,"column":12,"nodeType":"2358","messageId":"2359","endLine":30,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2482","line":31,"column":21,"nodeType":"2358","messageId":"2359","endLine":31,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2483","line":32,"column":12,"nodeType":"2358","messageId":"2359","endLine":32,"endColumn":22},{"ruleId":"2384","severity":1,"message":"2385","line":79,"column":17,"nodeType":"2386","messageId":"2387","endLine":79,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2484","line":96,"column":11,"nodeType":"2358","messageId":"2359","endLine":96,"endColumn":27},{"ruleId":"2384","severity":1,"message":"2385","line":131,"column":17,"nodeType":"2386","messageId":"2387","endLine":131,"endColumn":19},{"ruleId":"2363","severity":1,"message":"2485","line":150,"column":8,"nodeType":"2365","endLine":150,"endColumn":10,"suggestions":"2486"},{"ruleId":"2384","severity":1,"message":"2385","line":160,"column":42,"nodeType":"2386","messageId":"2387","endLine":160,"endColumn":44},{"ruleId":"2384","severity":1,"message":"2385","line":162,"column":22,"nodeType":"2386","messageId":"2387","endLine":162,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2478","line":1,"column":18,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2479","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":44},{"ruleId":"2356","severity":1,"message":"2480","line":1,"column":46,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":55},{"ruleId":"2356","severity":1,"message":"2411","line":1,"column":86,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":92},{"ruleId":"2356","severity":1,"message":"2413","line":1,"column":94,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":105},{"ruleId":"2356","severity":1,"message":"2412","line":1,"column":107,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":115},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":117,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":127},{"ruleId":"2356","severity":1,"message":"2481","line":6,"column":8,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2487","line":8,"column":10,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2488","line":10,"column":10,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2489","line":13,"column":7,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2402","line":28,"column":12,"nodeType":"2358","messageId":"2359","endLine":28,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2490","line":29,"column":12,"nodeType":"2358","messageId":"2359","endLine":29,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2491","line":29,"column":21,"nodeType":"2358","messageId":"2359","endLine":29,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2492","line":33,"column":12,"nodeType":"2358","messageId":"2359","endLine":33,"endColumn":22},{"ruleId":"2384","severity":1,"message":"2385","line":132,"column":18,"nodeType":"2386","messageId":"2387","endLine":132,"endColumn":20},{"ruleId":"2384","severity":1,"message":"2385","line":133,"column":22,"nodeType":"2386","messageId":"2387","endLine":133,"endColumn":24},{"ruleId":"2384","severity":1,"message":"2385","line":140,"column":26,"nodeType":"2386","messageId":"2387","endLine":140,"endColumn":28},{"ruleId":"2384","severity":1,"message":"2385","line":184,"column":18,"nodeType":"2386","messageId":"2387","endLine":184,"endColumn":20},{"ruleId":"2384","severity":1,"message":"2385","line":186,"column":26,"nodeType":"2386","messageId":"2387","endLine":186,"endColumn":28},{"ruleId":"2384","severity":1,"message":"2385","line":192,"column":26,"nodeType":"2386","messageId":"2387","endLine":192,"endColumn":28},{"ruleId":"2384","severity":1,"message":"2385","line":197,"column":25,"nodeType":"2386","messageId":"2387","endLine":197,"endColumn":27},{"ruleId":"2363","severity":1,"message":"2493","line":219,"column":8,"nodeType":"2365","endLine":219,"endColumn":10,"suggestions":"2494"},{"ruleId":"2356","severity":1,"message":"2495","line":236,"column":11,"nodeType":"2358","messageId":"2359","endLine":236,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2496","line":256,"column":11,"nodeType":"2358","messageId":"2359","endLine":256,"endColumn":23},{"ruleId":"2384","severity":1,"message":"2385","line":264,"column":44,"nodeType":"2386","messageId":"2387","endLine":264,"endColumn":46},{"ruleId":"2356","severity":1,"message":"2497","line":1,"column":25,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2498","line":1,"column":104,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":116},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":27,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2415","line":4,"column":18,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2499","line":6,"column":8,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2500","line":13,"column":8,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2501","line":14,"column":8,"nodeType":"2358","messageId":"2359","endLine":14,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2502","line":15,"column":8,"nodeType":"2358","messageId":"2359","endLine":15,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2488","line":17,"column":10,"nodeType":"2358","messageId":"2359","endLine":17,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2503","line":20,"column":8,"nodeType":"2358","messageId":"2359","endLine":20,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2504","line":156,"column":12,"nodeType":"2358","messageId":"2359","endLine":156,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2505","line":156,"column":31,"nodeType":"2358","messageId":"2359","endLine":156,"endColumn":51},{"ruleId":"2356","severity":1,"message":"2506","line":274,"column":12,"nodeType":"2358","messageId":"2359","endLine":274,"endColumn":30},{"ruleId":"2363","severity":1,"message":"2507","line":515,"column":8,"nodeType":"2365","endLine":515,"endColumn":10,"suggestions":"2508"},{"ruleId":"2509","severity":1,"message":"2510","line":661,"column":30,"nodeType":"2511","messageId":"2512","endLine":661,"endColumn":32},{"ruleId":"2509","severity":1,"message":"2510","line":675,"column":40,"nodeType":"2511","messageId":"2512","endLine":675,"endColumn":42},{"ruleId":"2509","severity":1,"message":"2510","line":694,"column":39,"nodeType":"2511","messageId":"2512","endLine":694,"endColumn":41},{"ruleId":"2384","severity":1,"message":"2385","line":816,"column":83,"nodeType":"2386","messageId":"2387","endLine":816,"endColumn":85},{"ruleId":"2384","severity":1,"message":"2441","line":867,"column":38,"nodeType":"2386","messageId":"2387","endLine":867,"endColumn":40},{"ruleId":"2384","severity":1,"message":"2385","line":902,"column":89,"nodeType":"2386","messageId":"2387","endLine":902,"endColumn":91},{"ruleId":"2384","severity":1,"message":"2385","line":939,"column":69,"nodeType":"2386","messageId":"2387","endLine":939,"endColumn":71},{"ruleId":"2384","severity":1,"message":"2385","line":968,"column":91,"nodeType":"2386","messageId":"2387","endLine":968,"endColumn":93},{"ruleId":"2384","severity":1,"message":"2385","line":1002,"column":72,"nodeType":"2386","messageId":"2387","endLine":1002,"endColumn":74},{"ruleId":"2356","severity":1,"message":"2513","line":1024,"column":13,"nodeType":"2358","messageId":"2359","endLine":1024,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2514","line":1025,"column":11,"nodeType":"2358","messageId":"2359","endLine":1025,"endColumn":16},{"ruleId":"2363","severity":1,"message":"2515","line":1078,"column":8,"nodeType":"2365","endLine":1078,"endColumn":14,"suggestions":"2516"},{"ruleId":"2356","severity":1,"message":"2517","line":1117,"column":11,"nodeType":"2358","messageId":"2359","endLine":1117,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2518","line":1121,"column":12,"nodeType":"2358","messageId":"2359","endLine":1121,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2519","line":1121,"column":25,"nodeType":"2358","messageId":"2359","endLine":1121,"endColumn":39},{"ruleId":"2356","severity":1,"message":"2520","line":1175,"column":11,"nodeType":"2358","messageId":"2359","endLine":1175,"endColumn":29},{"ruleId":"2363","severity":1,"message":"2515","line":1208,"column":8,"nodeType":"2365","endLine":1208,"endColumn":14,"suggestions":"2521"},{"ruleId":"2384","severity":1,"message":"2441","line":1276,"column":46,"nodeType":"2386","messageId":"2387","endLine":1276,"endColumn":48},{"ruleId":"2363","severity":1,"message":"2515","line":1364,"column":8,"nodeType":"2365","endLine":1364,"endColumn":14,"suggestions":"2522"},{"ruleId":"2356","severity":1,"message":"2421","line":2,"column":36,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":45},{"ruleId":"2356","severity":1,"message":"2362","line":2,"column":46,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":50},{"ruleId":"2356","severity":1,"message":"2523","line":2,"column":51,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":61},{"ruleId":"2384","severity":1,"message":"2385","line":54,"column":24,"nodeType":"2386","messageId":"2387","endLine":54,"endColumn":26},{"ruleId":"2363","severity":1,"message":"2442","line":65,"column":7,"nodeType":"2365","endLine":65,"endColumn":27,"suggestions":"2524"},{"ruleId":"2363","severity":1,"message":"2525","line":71,"column":8,"nodeType":"2365","endLine":71,"endColumn":18,"suggestions":"2526"},{"ruleId":"2384","severity":1,"message":"2441","line":91,"column":39,"nodeType":"2386","messageId":"2387","endLine":91,"endColumn":41},{"ruleId":"2384","severity":1,"message":"2385","line":127,"column":61,"nodeType":"2386","messageId":"2387","endLine":127,"endColumn":63},{"ruleId":"2384","severity":1,"message":"2385","line":135,"column":99,"nodeType":"2386","messageId":"2387","endLine":135,"endColumn":101},{"ruleId":"2384","severity":1,"message":"2385","line":137,"column":62,"nodeType":"2386","messageId":"2387","endLine":137,"endColumn":64},{"ruleId":"2363","severity":1,"message":"2442","line":181,"column":7,"nodeType":"2365","endLine":181,"endColumn":21,"suggestions":"2527"},{"ruleId":"2356","severity":1,"message":"2394","line":3,"column":8,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2528","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2415","line":5,"column":17,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2529","line":69,"column":7,"nodeType":"2365","endLine":69,"endColumn":16,"suggestions":"2530"},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":25,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2532","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2382","line":5,"column":22,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2415","line":5,"column":42,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":47},{"ruleId":"2356","severity":1,"message":"2394","line":3,"column":8,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2528","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2415","line":5,"column":17,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2529","line":51,"column":7,"nodeType":"2365","endLine":51,"endColumn":16,"suggestions":"2533"},{"ruleId":"2384","severity":1,"message":"2441","line":60,"column":23,"nodeType":"2386","messageId":"2387","endLine":60,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2394","line":3,"column":8,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2528","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2415","line":5,"column":17,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2534","line":11,"column":8,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2535","line":13,"column":8,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":22},{"ruleId":"2384","severity":1,"message":"2385","line":29,"column":22,"nodeType":"2386","messageId":"2387","endLine":29,"endColumn":24},{"ruleId":"2384","severity":1,"message":"2385","line":29,"column":45,"nodeType":"2386","messageId":"2387","endLine":29,"endColumn":47},{"ruleId":"2384","severity":1,"message":"2385","line":54,"column":29,"nodeType":"2386","messageId":"2387","endLine":54,"endColumn":31},{"ruleId":"2384","severity":1,"message":"2385","line":54,"column":52,"nodeType":"2386","messageId":"2387","endLine":54,"endColumn":54},{"ruleId":"2356","severity":1,"message":"2536","line":95,"column":11,"nodeType":"2358","messageId":"2359","endLine":95,"endColumn":26},{"ruleId":"2363","severity":1,"message":"2537","line":128,"column":7,"nodeType":"2365","endLine":128,"endColumn":16,"suggestions":"2538"},{"ruleId":"2356","severity":1,"message":"2394","line":3,"column":8,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2528","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2415","line":5,"column":17,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2487","line":13,"column":10,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2536","line":54,"column":9,"nodeType":"2358","messageId":"2359","endLine":54,"endColumn":24},{"ruleId":"2363","severity":1,"message":"2529","line":74,"column":7,"nodeType":"2365","endLine":74,"endColumn":16,"suggestions":"2539"},{"ruleId":"2356","severity":1,"message":"2394","line":3,"column":8,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2528","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2415","line":5,"column":17,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2529","line":74,"column":7,"nodeType":"2365","endLine":74,"endColumn":16,"suggestions":"2540"},{"ruleId":"2356","severity":1,"message":"2357","line":2,"column":15,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2360","line":2,"column":32,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2541","line":1,"column":16,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2360","line":2,"column":32,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2542","line":9,"column":8,"nodeType":"2358","messageId":"2359","endLine":9,"endColumn":12},{"ruleId":"2356","severity":1,"message":"2543","line":10,"column":8,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2447","line":15,"column":11,"nodeType":"2358","messageId":"2359","endLine":15,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2413","line":1,"column":19,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":38,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":48},{"ruleId":"2356","severity":1,"message":"2541","line":1,"column":50,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":64},{"ruleId":"2356","severity":1,"message":"2412","line":1,"column":66,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":74},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":76,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":81},{"ruleId":"2356","severity":1,"message":"2411","line":1,"column":83,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":89},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2363","severity":1,"message":"2544","line":26,"column":7,"nodeType":"2365","endLine":26,"endColumn":17,"suggestions":"2545"},{"ruleId":"2384","severity":1,"message":"2441","line":35,"column":31,"nodeType":"2386","messageId":"2387","endLine":35,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2531","line":9,"column":3,"nodeType":"2358","messageId":"2359","endLine":9,"endColumn":8},{"ruleId":"2356","severity":1,"message":"2400","line":15,"column":27,"nodeType":"2358","messageId":"2359","endLine":15,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2415","line":16,"column":18,"nodeType":"2358","messageId":"2359","endLine":16,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2546","line":24,"column":27,"nodeType":"2358","messageId":"2359","endLine":24,"endColumn":36},{"ruleId":"2356","severity":1,"message":"2547","line":38,"column":8,"nodeType":"2358","messageId":"2359","endLine":38,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2548","line":39,"column":10,"nodeType":"2358","messageId":"2359","endLine":39,"endColumn":27},{"ruleId":"2384","severity":1,"message":"2385","line":74,"column":24,"nodeType":"2386","messageId":"2387","endLine":74,"endColumn":26},{"ruleId":"2384","severity":1,"message":"2441","line":82,"column":24,"nodeType":"2386","messageId":"2387","endLine":82,"endColumn":26},{"ruleId":"2384","severity":1,"message":"2385","line":86,"column":25,"nodeType":"2386","messageId":"2387","endLine":86,"endColumn":27},{"ruleId":"2384","severity":1,"message":"2385","line":86,"column":49,"nodeType":"2386","messageId":"2387","endLine":86,"endColumn":51},{"ruleId":"2384","severity":1,"message":"2441","line":88,"column":32,"nodeType":"2386","messageId":"2387","endLine":88,"endColumn":34},{"ruleId":"2384","severity":1,"message":"2441","line":88,"column":56,"nodeType":"2386","messageId":"2387","endLine":88,"endColumn":58},{"ruleId":"2384","severity":1,"message":"2441","line":94,"column":16,"nodeType":"2386","messageId":"2387","endLine":94,"endColumn":18},{"ruleId":"2384","severity":1,"message":"2441","line":94,"column":32,"nodeType":"2386","messageId":"2387","endLine":94,"endColumn":34},{"ruleId":"2384","severity":1,"message":"2441","line":130,"column":16,"nodeType":"2386","messageId":"2387","endLine":130,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2549","line":190,"column":9,"nodeType":"2358","messageId":"2359","endLine":190,"endColumn":31},{"ruleId":"2363","severity":1,"message":"2525","line":214,"column":6,"nodeType":"2365","endLine":214,"endColumn":16,"suggestions":"2550"},{"ruleId":"2384","severity":1,"message":"2441","line":226,"column":22,"nodeType":"2386","messageId":"2387","endLine":226,"endColumn":24},{"ruleId":"2384","severity":1,"message":"2441","line":458,"column":21,"nodeType":"2386","messageId":"2387","endLine":458,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2551","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2362","line":1,"column":31,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":35},{"ruleId":"2356","severity":1,"message":"2391","line":1,"column":37,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":43},{"ruleId":"2356","severity":1,"message":"2406","line":1,"column":44,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":48},{"ruleId":"2356","severity":1,"message":"2552","line":1,"column":49,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":63},{"ruleId":"2356","severity":1,"message":"2430","line":1,"column":64,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":73},{"ruleId":"2356","severity":1,"message":"2523","line":1,"column":75,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":85},{"ruleId":"2367","severity":1,"message":"2368","line":15,"column":33,"nodeType":"2369","endLine":15,"endColumn":78},{"ruleId":"2356","severity":1,"message":"2431","line":2,"column":22,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2391","line":2,"column":28,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2439","line":3,"column":21,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":43},{"ruleId":"2356","severity":1,"message":"2440","line":3,"column":44,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":52},{"ruleId":"2356","severity":1,"message":"2553","line":9,"column":8,"nodeType":"2358","messageId":"2359","endLine":9,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2554","line":12,"column":10,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2555","line":14,"column":8,"nodeType":"2358","messageId":"2359","endLine":14,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2442","line":44,"column":8,"nodeType":"2365","endLine":44,"endColumn":16,"suggestions":"2556"},{"ruleId":"2378","severity":1,"message":"2379","line":47,"column":1,"nodeType":"2380","endLine":53,"endColumn":2},{"ruleId":"2356","severity":1,"message":"2396","line":1,"column":35,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":43},{"ruleId":"2356","severity":1,"message":"2372","line":1,"column":44,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":48},{"ruleId":"2356","severity":1,"message":"2362","line":3,"column":36,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2421","line":3,"column":51,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":60},{"ruleId":"2356","severity":1,"message":"2406","line":3,"column":71,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":75},{"ruleId":"2356","severity":1,"message":"2407","line":3,"column":77,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":88},{"ruleId":"2356","severity":1,"message":"2410","line":3,"column":106,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":113},{"ruleId":"2356","severity":1,"message":"2557","line":31,"column":11,"nodeType":"2358","messageId":"2359","endLine":31,"endColumn":18},{"ruleId":"2384","severity":1,"message":"2385","line":92,"column":33,"nodeType":"2386","messageId":"2387","endLine":92,"endColumn":35},{"ruleId":"2384","severity":1,"message":"2385","line":92,"column":59,"nodeType":"2386","messageId":"2387","endLine":92,"endColumn":61},{"ruleId":"2558","severity":1,"message":"2559","line":147,"column":12,"nodeType":"2386","messageId":"2560","endLine":147,"endColumn":28},{"ruleId":"2384","severity":1,"message":"2385","line":147,"column":22,"nodeType":"2386","messageId":"2387","endLine":147,"endColumn":24},{"ruleId":"2384","severity":1,"message":"2385","line":150,"column":27,"nodeType":"2386","messageId":"2387","endLine":150,"endColumn":29},{"ruleId":"2384","severity":1,"message":"2441","line":152,"column":54,"nodeType":"2386","messageId":"2387","endLine":152,"endColumn":56},{"ruleId":"2384","severity":1,"message":"2385","line":179,"column":27,"nodeType":"2386","messageId":"2387","endLine":179,"endColumn":29},{"ruleId":"2384","severity":1,"message":"2385","line":183,"column":41,"nodeType":"2386","messageId":"2387","endLine":183,"endColumn":43},{"ruleId":"2363","severity":1,"message":"2561","line":199,"column":7,"nodeType":"2365","endLine":199,"endColumn":17,"suggestions":"2562"},{"ruleId":"2363","severity":1,"message":"2563","line":204,"column":8,"nodeType":"2365","endLine":204,"endColumn":10,"suggestions":"2564"},{"ruleId":"2356","severity":1,"message":"2362","line":2,"column":36,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2410","line":2,"column":42,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":49},{"ruleId":"2356","severity":1,"message":"2408","line":2,"column":51,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":61},{"ruleId":"2356","severity":1,"message":"2415","line":3,"column":17,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2565","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2566","line":39,"column":11,"nodeType":"2358","messageId":"2359","endLine":39,"endColumn":23},{"ruleId":"2558","severity":1,"message":"2559","line":72,"column":12,"nodeType":"2386","messageId":"2560","endLine":72,"endColumn":28},{"ruleId":"2384","severity":1,"message":"2385","line":72,"column":22,"nodeType":"2386","messageId":"2387","endLine":72,"endColumn":24},{"ruleId":"2384","severity":1,"message":"2385","line":75,"column":27,"nodeType":"2386","messageId":"2387","endLine":75,"endColumn":29},{"ruleId":"2384","severity":1,"message":"2441","line":77,"column":54,"nodeType":"2386","messageId":"2387","endLine":77,"endColumn":56},{"ruleId":"2363","severity":1,"message":"2442","line":103,"column":8,"nodeType":"2365","endLine":103,"endColumn":10,"suggestions":"2567"},{"ruleId":"2363","severity":1,"message":"2568","line":132,"column":7,"nodeType":"2365","endLine":132,"endColumn":21,"suggestions":"2569"},{"ruleId":"2384","severity":1,"message":"2385","line":143,"column":34,"nodeType":"2386","messageId":"2387","endLine":143,"endColumn":36},{"ruleId":"2384","severity":1,"message":"2385","line":70,"column":34,"nodeType":"2386","messageId":"2387","endLine":70,"endColumn":36},{"ruleId":"2378","severity":1,"message":"2379","line":24,"column":1,"nodeType":"2380","endLine":26,"endColumn":2},{"ruleId":"2384","severity":1,"message":"2385","line":76,"column":71,"nodeType":"2386","messageId":"2387","endLine":76,"endColumn":73},{"ruleId":"2363","severity":1,"message":"2570","line":95,"column":7,"nodeType":"2365","endLine":95,"endColumn":9,"suggestions":"2571"},{"ruleId":"2356","severity":1,"message":"2572","line":8,"column":15,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2573","line":8,"column":39,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":50},{"ruleId":"2356","severity":1,"message":"2574","line":56,"column":9,"nodeType":"2358","messageId":"2359","endLine":56,"endColumn":15},{"ruleId":"2363","severity":1,"message":"2575","line":58,"column":8,"nodeType":"2365","endLine":58,"endColumn":17,"suggestions":"2576"},{"ruleId":"2356","severity":1,"message":"2431","line":11,"column":16,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2362","line":11,"column":53,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":57},{"ruleId":"2356","severity":1,"message":"2440","line":11,"column":78,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":86},{"ruleId":"2356","severity":1,"message":"2357","line":12,"column":15,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2400","line":12,"column":24,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2360","line":12,"column":32,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":41},{"ruleId":"2384","severity":1,"message":"2385","line":29,"column":49,"nodeType":"2386","messageId":"2387","endLine":29,"endColumn":51},{"ruleId":"2384","severity":1,"message":"2385","line":44,"column":28,"nodeType":"2386","messageId":"2387","endLine":44,"endColumn":30},{"ruleId":"2384","severity":1,"message":"2385","line":58,"column":122,"nodeType":"2386","messageId":"2387","endLine":58,"endColumn":124},{"ruleId":"2378","severity":1,"message":"2379","line":27,"column":2,"nodeType":"2380","endLine":29,"endColumn":3},{"ruleId":"2378","severity":1,"message":"2379","line":78,"column":1,"nodeType":"2380","endLine":81,"endColumn":2},{"ruleId":"2378","severity":1,"message":"2379","line":11,"column":2,"nodeType":"2380","endLine":18,"endColumn":3},{"ruleId":"2378","severity":1,"message":"2379","line":47,"column":1,"nodeType":"2380","endLine":53,"endColumn":2},{"ruleId":"2384","severity":1,"message":"2385","line":11,"column":47,"nodeType":"2386","messageId":"2387","endLine":11,"endColumn":49},{"ruleId":"2356","severity":1,"message":"2478","line":1,"column":18,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2413","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":39},{"ruleId":"2356","severity":1,"message":"2479","line":1,"column":41,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":57},{"ruleId":"2356","severity":1,"message":"2480","line":1,"column":59,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":68},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":76,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":86},{"ruleId":"2356","severity":1,"message":"2577","line":1,"column":104,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":112},{"ruleId":"2356","severity":1,"message":"2412","line":1,"column":114,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":122},{"ruleId":"2356","severity":1,"message":"2411","line":1,"column":124,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":130},{"ruleId":"2356","severity":1,"message":"2578","line":3,"column":9,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2579","line":4,"column":10,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":40,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":49},{"ruleId":"2352","replacedBy":"2580"},{"ruleId":"2354","replacedBy":"2581"},{"ruleId":"2356","severity":1,"message":"2357","line":17,"column":15,"nodeType":"2358","messageId":"2359","endLine":17,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2400","line":17,"column":24,"nodeType":"2358","messageId":"2359","endLine":17,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2360","line":17,"column":32,"nodeType":"2358","messageId":"2359","endLine":17,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":25,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2396","line":2,"column":15,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2582","line":8,"column":24,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":37},{"ruleId":"2363","severity":1,"message":"2583","line":40,"column":7,"nodeType":"2365","endLine":40,"endColumn":9,"suggestions":"2584"},{"ruleId":"2356","severity":1,"message":"2413","line":1,"column":18,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":37,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":47},{"ruleId":"2356","severity":1,"message":"2577","line":1,"column":49,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":57},{"ruleId":"2356","severity":1,"message":"2412","line":1,"column":59,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":67},{"ruleId":"2356","severity":1,"message":"2411","line":1,"column":69,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":75},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":77,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":86},{"ruleId":"2384","severity":1,"message":"2385","line":13,"column":29,"nodeType":"2386","messageId":"2387","endLine":13,"endColumn":31},{"ruleId":"2378","severity":1,"message":"2379","line":53,"column":1,"nodeType":"2380","endLine":56,"endColumn":2},{"ruleId":"2356","severity":1,"message":"2408","line":1,"column":78,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":88},{"ruleId":"2356","severity":1,"message":"2577","line":1,"column":96,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":104},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":157,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":166},{"ruleId":"2356","severity":1,"message":"2573","line":2,"column":34,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":45},{"ruleId":"2384","severity":1,"message":"2385","line":16,"column":13,"nodeType":"2386","messageId":"2387","endLine":16,"endColumn":15},{"ruleId":"2384","severity":1,"message":"2385","line":17,"column":18,"nodeType":"2386","messageId":"2387","endLine":17,"endColumn":20},{"ruleId":"2384","severity":1,"message":"2385","line":18,"column":18,"nodeType":"2386","messageId":"2387","endLine":18,"endColumn":20},{"ruleId":"2384","severity":1,"message":"2385","line":19,"column":18,"nodeType":"2386","messageId":"2387","endLine":19,"endColumn":20},{"ruleId":"2384","severity":1,"message":"2385","line":20,"column":18,"nodeType":"2386","messageId":"2387","endLine":20,"endColumn":20},{"ruleId":"2384","severity":1,"message":"2385","line":52,"column":40,"nodeType":"2386","messageId":"2387","endLine":52,"endColumn":42},{"ruleId":"2384","severity":1,"message":"2385","line":56,"column":59,"nodeType":"2386","messageId":"2387","endLine":56,"endColumn":61},{"ruleId":"2384","severity":1,"message":"2441","line":81,"column":27,"nodeType":"2386","messageId":"2387","endLine":81,"endColumn":29},{"ruleId":"2384","severity":1,"message":"2385","line":101,"column":23,"nodeType":"2386","messageId":"2387","endLine":101,"endColumn":25},{"ruleId":"2384","severity":1,"message":"2385","line":121,"column":110,"nodeType":"2386","messageId":"2387","endLine":121,"endColumn":112},{"ruleId":"2384","severity":1,"message":"2385","line":121,"column":131,"nodeType":"2386","messageId":"2387","endLine":121,"endColumn":133},{"ruleId":"2384","severity":1,"message":"2385","line":134,"column":65,"nodeType":"2386","messageId":"2387","endLine":134,"endColumn":67},{"ruleId":"2384","severity":1,"message":"2385","line":136,"column":70,"nodeType":"2386","messageId":"2387","endLine":136,"endColumn":72},{"ruleId":"2384","severity":1,"message":"2385","line":147,"column":32,"nodeType":"2386","messageId":"2387","endLine":147,"endColumn":34},{"ruleId":"2363","severity":1,"message":"2585","line":153,"column":8,"nodeType":"2365","endLine":153,"endColumn":49,"suggestions":"2586"},{"ruleId":"2384","severity":1,"message":"2385","line":159,"column":54,"nodeType":"2386","messageId":"2387","endLine":159,"endColumn":56},{"ruleId":"2384","severity":1,"message":"2441","line":175,"column":64,"nodeType":"2386","messageId":"2387","endLine":175,"endColumn":66},{"ruleId":"2363","severity":1,"message":"2587","line":182,"column":8,"nodeType":"2365","endLine":182,"endColumn":20,"suggestions":"2588"},{"ruleId":"2367","severity":1,"message":"2368","line":228,"column":55,"nodeType":"2369","endLine":228,"endColumn":114},{"ruleId":"2367","severity":1,"message":"2368","line":249,"column":55,"nodeType":"2369","endLine":249,"endColumn":114},{"ruleId":"2363","severity":1,"message":"2442","line":26,"column":7,"nodeType":"2365","endLine":26,"endColumn":11,"suggestions":"2589"},{"ruleId":"2356","severity":1,"message":"2372","line":1,"column":24,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":28},{"ruleId":"2356","severity":1,"message":"2396","line":1,"column":29,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":37},{"ruleId":"2356","severity":1,"message":"2480","line":2,"column":25,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2479","line":2,"column":35,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":51},{"ruleId":"2356","severity":1,"message":"2590","line":2,"column":52,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":58},{"ruleId":"2356","severity":1,"message":"2591","line":6,"column":8,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":14},{"ruleId":"2363","severity":1,"message":"2442","line":34,"column":7,"nodeType":"2365","endLine":34,"endColumn":11,"suggestions":"2592"},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":65,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":70},{"ruleId":"2356","severity":1,"message":"2415","line":3,"column":17,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":3,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2414","line":4,"column":3,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2412","line":6,"column":3,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":11},{"ruleId":"2356","severity":1,"message":"2411","line":8,"column":3,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2391","line":11,"column":3,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2362","line":12,"column":3,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":7},{"ruleId":"2356","severity":1,"message":"2593","line":13,"column":3,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":6},{"ruleId":"2356","severity":1,"message":"2400","line":17,"column":27,"nodeType":"2358","messageId":"2359","endLine":17,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2565","line":18,"column":8,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2594","line":20,"column":8,"nodeType":"2358","messageId":"2359","endLine":20,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2595","line":21,"column":8,"nodeType":"2358","messageId":"2359","endLine":21,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2596","line":22,"column":8,"nodeType":"2358","messageId":"2359","endLine":22,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2597","line":23,"column":8,"nodeType":"2358","messageId":"2359","endLine":23,"endColumn":22},{"ruleId":"2384","severity":1,"message":"2385","line":49,"column":18,"nodeType":"2386","messageId":"2387","endLine":49,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2598","line":56,"column":9,"nodeType":"2358","messageId":"2359","endLine":56,"endColumn":12},{"ruleId":"2363","severity":1,"message":"2442","line":126,"column":6,"nodeType":"2365","endLine":126,"endColumn":45,"suggestions":"2599"},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":3,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2414","line":4,"column":3,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2412","line":6,"column":3,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":11},{"ruleId":"2356","severity":1,"message":"2411","line":8,"column":3,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2391","line":11,"column":3,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2362","line":12,"column":3,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":7},{"ruleId":"2356","severity":1,"message":"2593","line":13,"column":3,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":6},{"ruleId":"2356","severity":1,"message":"2600","line":14,"column":3,"nodeType":"2358","messageId":"2359","endLine":14,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2400","line":17,"column":27,"nodeType":"2358","messageId":"2359","endLine":17,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2565","line":18,"column":8,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2594","line":20,"column":8,"nodeType":"2358","messageId":"2359","endLine":20,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2595","line":21,"column":8,"nodeType":"2358","messageId":"2359","endLine":21,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2596","line":22,"column":8,"nodeType":"2358","messageId":"2359","endLine":22,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2597","line":23,"column":8,"nodeType":"2358","messageId":"2359","endLine":23,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2601","line":26,"column":8,"nodeType":"2358","messageId":"2359","endLine":26,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2602","line":27,"column":8,"nodeType":"2358","messageId":"2359","endLine":27,"endColumn":21},{"ruleId":"2363","severity":1,"message":"2442","line":100,"column":6,"nodeType":"2365","endLine":100,"endColumn":45,"suggestions":"2603"},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":3,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2414","line":4,"column":3,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2412","line":6,"column":3,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":11},{"ruleId":"2356","severity":1,"message":"2411","line":8,"column":3,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2551","line":10,"column":3,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":10},{"ruleId":"2356","severity":1,"message":"2391","line":11,"column":3,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2362","line":12,"column":3,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":7},{"ruleId":"2356","severity":1,"message":"2593","line":13,"column":3,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":6},{"ruleId":"2356","severity":1,"message":"2400","line":15,"column":27,"nodeType":"2358","messageId":"2359","endLine":15,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2565","line":16,"column":8,"nodeType":"2358","messageId":"2359","endLine":16,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2594","line":18,"column":8,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2595","line":19,"column":8,"nodeType":"2358","messageId":"2359","endLine":19,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2596","line":20,"column":8,"nodeType":"2358","messageId":"2359","endLine":20,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2597","line":21,"column":8,"nodeType":"2358","messageId":"2359","endLine":21,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2604","line":22,"column":10,"nodeType":"2358","messageId":"2359","endLine":22,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2605","line":25,"column":7,"nodeType":"2358","messageId":"2359","endLine":25,"endColumn":28},{"ruleId":"2363","severity":1,"message":"2442","line":64,"column":6,"nodeType":"2365","endLine":64,"endColumn":45,"suggestions":"2606"},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":3,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2414","line":4,"column":3,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2412","line":6,"column":3,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":11},{"ruleId":"2356","severity":1,"message":"2411","line":8,"column":3,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2551","line":10,"column":3,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":10},{"ruleId":"2356","severity":1,"message":"2391","line":11,"column":3,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2362","line":12,"column":3,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":7},{"ruleId":"2356","severity":1,"message":"2593","line":13,"column":3,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":6},{"ruleId":"2356","severity":1,"message":"2400","line":15,"column":27,"nodeType":"2358","messageId":"2359","endLine":15,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2565","line":16,"column":8,"nodeType":"2358","messageId":"2359","endLine":16,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2594","line":18,"column":8,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2595","line":19,"column":8,"nodeType":"2358","messageId":"2359","endLine":19,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2596","line":20,"column":8,"nodeType":"2358","messageId":"2359","endLine":20,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2597","line":21,"column":8,"nodeType":"2358","messageId":"2359","endLine":21,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2462","line":35,"column":9,"nodeType":"2358","messageId":"2359","endLine":35,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2607","line":36,"column":9,"nodeType":"2358","messageId":"2359","endLine":36,"endColumn":20},{"ruleId":"2363","severity":1,"message":"2442","line":108,"column":6,"nodeType":"2365","endLine":108,"endColumn":45,"suggestions":"2608"},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":3,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2414","line":4,"column":3,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2412","line":6,"column":3,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":11},{"ruleId":"2356","severity":1,"message":"2411","line":8,"column":3,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2391","line":11,"column":3,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2362","line":12,"column":3,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":7},{"ruleId":"2356","severity":1,"message":"2593","line":13,"column":3,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":6},{"ruleId":"2356","severity":1,"message":"2400","line":17,"column":27,"nodeType":"2358","messageId":"2359","endLine":17,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2565","line":18,"column":8,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2594","line":21,"column":8,"nodeType":"2358","messageId":"2359","endLine":21,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2595","line":22,"column":8,"nodeType":"2358","messageId":"2359","endLine":22,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2596","line":23,"column":8,"nodeType":"2358","messageId":"2359","endLine":23,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2597","line":24,"column":8,"nodeType":"2358","messageId":"2359","endLine":24,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2609","line":39,"column":10,"nodeType":"2358","messageId":"2359","endLine":39,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2610","line":39,"column":16,"nodeType":"2358","messageId":"2359","endLine":39,"endColumn":22},{"ruleId":"2384","severity":1,"message":"2441","line":49,"column":25,"nodeType":"2386","messageId":"2387","endLine":49,"endColumn":27},{"ruleId":"2363","severity":1,"message":"2442","line":126,"column":6,"nodeType":"2365","endLine":126,"endColumn":45,"suggestions":"2611"},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":3,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2414","line":4,"column":3,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2412","line":6,"column":3,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":11},{"ruleId":"2356","severity":1,"message":"2411","line":8,"column":3,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2391","line":11,"column":3,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2362","line":12,"column":3,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":7},{"ruleId":"2356","severity":1,"message":"2593","line":13,"column":3,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":6},{"ruleId":"2356","severity":1,"message":"2400","line":23,"column":27,"nodeType":"2358","messageId":"2359","endLine":23,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2565","line":24,"column":8,"nodeType":"2358","messageId":"2359","endLine":24,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2612","line":27,"column":8,"nodeType":"2358","messageId":"2359","endLine":27,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2613","line":30,"column":8,"nodeType":"2358","messageId":"2359","endLine":30,"endColumn":12},{"ruleId":"2356","severity":1,"message":"2614","line":31,"column":8,"nodeType":"2358","messageId":"2359","endLine":31,"endColumn":12},{"ruleId":"2356","severity":1,"message":"2605","line":33,"column":7,"nodeType":"2358","messageId":"2359","endLine":33,"endColumn":28},{"ruleId":"2356","severity":1,"message":"2615","line":41,"column":9,"nodeType":"2358","messageId":"2359","endLine":41,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2616","line":113,"column":10,"nodeType":"2358","messageId":"2359","endLine":113,"endColumn":14},{"ruleId":"2363","severity":1,"message":"2442","line":149,"column":6,"nodeType":"2365","endLine":149,"endColumn":45,"suggestions":"2617"},{"ruleId":"2378","severity":1,"message":"2379","line":9,"column":1,"nodeType":"2380","endLine":11,"endColumn":2},{"ruleId":"2378","severity":1,"message":"2379","line":27,"column":1,"nodeType":"2380","endLine":29,"endColumn":2},{"ruleId":"2378","severity":1,"message":"2379","line":23,"column":1,"nodeType":"2380","endLine":25,"endColumn":2},{"ruleId":"2378","severity":1,"message":"2379","line":27,"column":1,"nodeType":"2380","endLine":29,"endColumn":2},{"ruleId":"2378","severity":1,"message":"2379","line":27,"column":1,"nodeType":"2380","endLine":29,"endColumn":2},{"ruleId":"2356","severity":1,"message":"2391","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2413","line":1,"column":18,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2417","line":1,"column":31,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":35},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":37,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":47},{"ruleId":"2356","severity":1,"message":"2577","line":1,"column":49,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":57},{"ruleId":"2356","severity":1,"message":"2411","line":1,"column":69,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":75},{"ruleId":"2363","severity":1,"message":"2618","line":16,"column":7,"nodeType":"2365","endLine":16,"endColumn":14,"suggestions":"2619"},{"ruleId":"2378","severity":1,"message":"2379","line":47,"column":1,"nodeType":"2380","endLine":49,"endColumn":2},{"ruleId":"2378","severity":1,"message":"2379","line":71,"column":1,"nodeType":"2380","endLine":73,"endColumn":2},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2620","line":58,"column":10,"nodeType":"2358","messageId":"2359","endLine":58,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2621","line":58,"column":18,"nodeType":"2358","messageId":"2359","endLine":58,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2622","line":60,"column":10,"nodeType":"2358","messageId":"2359","endLine":60,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2623","line":60,"column":17,"nodeType":"2358","messageId":"2359","endLine":60,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2624","line":61,"column":10,"nodeType":"2358","messageId":"2359","endLine":61,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2625","line":61,"column":18,"nodeType":"2358","messageId":"2359","endLine":61,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2626","line":62,"column":10,"nodeType":"2358","messageId":"2359","endLine":62,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2627","line":62,"column":18,"nodeType":"2358","messageId":"2359","endLine":62,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":16,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2362","line":2,"column":36,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2628","line":2,"column":42,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":48},{"ruleId":"2356","severity":1,"message":"2629","line":2,"column":50,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":61},{"ruleId":"2356","severity":1,"message":"2630","line":2,"column":63,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":76},{"ruleId":"2356","severity":1,"message":"2631","line":2,"column":78,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":91},{"ruleId":"2356","severity":1,"message":"2551","line":2,"column":93,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":100},{"ruleId":"2384","severity":1,"message":"2385","line":73,"column":37,"nodeType":"2386","messageId":"2387","endLine":73,"endColumn":39},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2632","line":3,"column":10,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2620","line":69,"column":10,"nodeType":"2358","messageId":"2359","endLine":69,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2621","line":69,"column":18,"nodeType":"2358","messageId":"2359","endLine":69,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2622","line":71,"column":10,"nodeType":"2358","messageId":"2359","endLine":71,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2623","line":71,"column":17,"nodeType":"2358","messageId":"2359","endLine":71,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2624","line":72,"column":10,"nodeType":"2358","messageId":"2359","endLine":72,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2625","line":72,"column":18,"nodeType":"2358","messageId":"2359","endLine":72,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2626","line":73,"column":10,"nodeType":"2358","messageId":"2359","endLine":73,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2627","line":73,"column":18,"nodeType":"2358","messageId":"2359","endLine":73,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2632","line":3,"column":10,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2620","line":70,"column":10,"nodeType":"2358","messageId":"2359","endLine":70,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2621","line":70,"column":18,"nodeType":"2358","messageId":"2359","endLine":70,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2622","line":72,"column":10,"nodeType":"2358","messageId":"2359","endLine":72,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2623","line":72,"column":17,"nodeType":"2358","messageId":"2359","endLine":72,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2624","line":73,"column":10,"nodeType":"2358","messageId":"2359","endLine":73,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2625","line":73,"column":18,"nodeType":"2358","messageId":"2359","endLine":73,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2626","line":74,"column":10,"nodeType":"2358","messageId":"2359","endLine":74,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2627","line":74,"column":18,"nodeType":"2358","messageId":"2359","endLine":74,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2632","line":3,"column":10,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2460","line":11,"column":29,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2620","line":105,"column":10,"nodeType":"2358","messageId":"2359","endLine":105,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2621","line":105,"column":18,"nodeType":"2358","messageId":"2359","endLine":105,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2622","line":107,"column":10,"nodeType":"2358","messageId":"2359","endLine":107,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2623","line":107,"column":17,"nodeType":"2358","messageId":"2359","endLine":107,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2624","line":108,"column":10,"nodeType":"2358","messageId":"2359","endLine":108,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2625","line":108,"column":18,"nodeType":"2358","messageId":"2359","endLine":108,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2626","line":109,"column":10,"nodeType":"2358","messageId":"2359","endLine":109,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2627","line":109,"column":18,"nodeType":"2358","messageId":"2359","endLine":109,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":17,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2357","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":36},{"ruleId":"2356","severity":1,"message":"2541","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2378","severity":1,"message":"2379","line":96,"column":1,"nodeType":"2380","endLine":104,"endColumn":2},{"ruleId":"2378","severity":1,"message":"2379","line":36,"column":1,"nodeType":"2380","endLine":38,"endColumn":2},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2632","line":3,"column":10,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2460","line":11,"column":29,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2620","line":102,"column":10,"nodeType":"2358","messageId":"2359","endLine":102,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2621","line":102,"column":18,"nodeType":"2358","messageId":"2359","endLine":102,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2622","line":104,"column":10,"nodeType":"2358","messageId":"2359","endLine":104,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2623","line":104,"column":17,"nodeType":"2358","messageId":"2359","endLine":104,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2624","line":105,"column":10,"nodeType":"2358","messageId":"2359","endLine":105,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2625","line":105,"column":18,"nodeType":"2358","messageId":"2359","endLine":105,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2626","line":106,"column":10,"nodeType":"2358","messageId":"2359","endLine":106,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2627","line":106,"column":18,"nodeType":"2358","messageId":"2359","endLine":106,"endColumn":26},{"ruleId":"2384","severity":1,"message":"2385","line":21,"column":31,"nodeType":"2386","messageId":"2387","endLine":21,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2462","line":13,"column":9,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":19},{"ruleId":"2384","severity":1,"message":"2385","line":25,"column":63,"nodeType":"2386","messageId":"2387","endLine":25,"endColumn":65},{"ruleId":"2356","severity":1,"message":"2633","line":65,"column":13,"nodeType":"2358","messageId":"2359","endLine":65,"endColumn":23},{"ruleId":"2634","severity":1,"message":"2635","line":96,"column":26,"nodeType":"2636","messageId":"2637","endLine":96,"endColumn":110},{"ruleId":"2356","severity":1,"message":"2460","line":12,"column":9,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":14},{"ruleId":"2634","severity":1,"message":"2635","line":66,"column":27,"nodeType":"2636","messageId":"2637","endLine":66,"endColumn":44},{"ruleId":"2634","severity":1,"message":"2635","line":72,"column":24,"nodeType":"2636","messageId":"2637","endLine":72,"endColumn":107},{"ruleId":"2634","severity":1,"message":"2635","line":63,"column":26,"nodeType":"2636","messageId":"2637","endLine":63,"endColumn":116},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2632","line":5,"column":10,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2638","line":9,"column":7,"nodeType":"2358","messageId":"2359","endLine":9,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2620","line":59,"column":10,"nodeType":"2358","messageId":"2359","endLine":59,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2621","line":59,"column":18,"nodeType":"2358","messageId":"2359","endLine":59,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2622","line":61,"column":10,"nodeType":"2358","messageId":"2359","endLine":61,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2623","line":61,"column":17,"nodeType":"2358","messageId":"2359","endLine":61,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2624","line":62,"column":10,"nodeType":"2358","messageId":"2359","endLine":62,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2625","line":62,"column":18,"nodeType":"2358","messageId":"2359","endLine":62,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2626","line":63,"column":10,"nodeType":"2358","messageId":"2359","endLine":63,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2627","line":63,"column":18,"nodeType":"2358","messageId":"2359","endLine":63,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2620","line":50,"column":10,"nodeType":"2358","messageId":"2359","endLine":50,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2621","line":50,"column":18,"nodeType":"2358","messageId":"2359","endLine":50,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2622","line":52,"column":10,"nodeType":"2358","messageId":"2359","endLine":52,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2623","line":52,"column":17,"nodeType":"2358","messageId":"2359","endLine":52,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2624","line":53,"column":10,"nodeType":"2358","messageId":"2359","endLine":53,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2625","line":53,"column":18,"nodeType":"2358","messageId":"2359","endLine":53,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2626","line":54,"column":10,"nodeType":"2358","messageId":"2359","endLine":54,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2627","line":54,"column":18,"nodeType":"2358","messageId":"2359","endLine":54,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2632","line":3,"column":10,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2620","line":69,"column":10,"nodeType":"2358","messageId":"2359","endLine":69,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2621","line":69,"column":18,"nodeType":"2358","messageId":"2359","endLine":69,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2622","line":71,"column":10,"nodeType":"2358","messageId":"2359","endLine":71,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2623","line":71,"column":17,"nodeType":"2358","messageId":"2359","endLine":71,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2624","line":72,"column":10,"nodeType":"2358","messageId":"2359","endLine":72,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2625","line":72,"column":18,"nodeType":"2358","messageId":"2359","endLine":72,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2626","line":73,"column":10,"nodeType":"2358","messageId":"2359","endLine":73,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2627","line":73,"column":18,"nodeType":"2358","messageId":"2359","endLine":73,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":3,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2414","line":4,"column":3,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2412","line":6,"column":3,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":11},{"ruleId":"2356","severity":1,"message":"2411","line":8,"column":3,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2391","line":11,"column":3,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2362","line":12,"column":3,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":7},{"ruleId":"2356","severity":1,"message":"2593","line":13,"column":3,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":6},{"ruleId":"2356","severity":1,"message":"2400","line":17,"column":27,"nodeType":"2358","messageId":"2359","endLine":17,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2565","line":18,"column":8,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2594","line":20,"column":8,"nodeType":"2358","messageId":"2359","endLine":20,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2595","line":21,"column":8,"nodeType":"2358","messageId":"2359","endLine":21,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2596","line":22,"column":8,"nodeType":"2358","messageId":"2359","endLine":22,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2597","line":23,"column":8,"nodeType":"2358","messageId":"2359","endLine":23,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2442","line":105,"column":6,"nodeType":"2365","endLine":105,"endColumn":45,"suggestions":"2639"},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":3,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2414","line":4,"column":3,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2412","line":6,"column":3,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":11},{"ruleId":"2356","severity":1,"message":"2411","line":8,"column":3,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2551","line":10,"column":3,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":10},{"ruleId":"2356","severity":1,"message":"2391","line":11,"column":3,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2362","line":12,"column":3,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":7},{"ruleId":"2356","severity":1,"message":"2593","line":13,"column":3,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":6},{"ruleId":"2356","severity":1,"message":"2400","line":15,"column":27,"nodeType":"2358","messageId":"2359","endLine":15,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2565","line":16,"column":8,"nodeType":"2358","messageId":"2359","endLine":16,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2594","line":18,"column":8,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2595","line":19,"column":8,"nodeType":"2358","messageId":"2359","endLine":19,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2596","line":20,"column":8,"nodeType":"2358","messageId":"2359","endLine":20,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2597","line":21,"column":8,"nodeType":"2358","messageId":"2359","endLine":21,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2442","line":72,"column":6,"nodeType":"2365","endLine":72,"endColumn":45,"suggestions":"2640"},{"ruleId":"2356","severity":1,"message":"2551","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2413","line":1,"column":19,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2417","line":1,"column":32,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":36},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":38,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":48},{"ruleId":"2356","severity":1,"message":"2523","line":1,"column":49,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":59},{"ruleId":"2356","severity":1,"message":"2412","line":1,"column":77,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":85},{"ruleId":"2356","severity":1,"message":"2411","line":1,"column":94,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":100},{"ruleId":"2356","severity":1,"message":"2431","line":1,"column":102,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":107},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2363","severity":1,"message":"2442","line":80,"column":7,"nodeType":"2365","endLine":80,"endColumn":16,"suggestions":"2641"},{"ruleId":"2384","severity":1,"message":"2385","line":84,"column":18,"nodeType":"2386","messageId":"2387","endLine":84,"endColumn":20},{"ruleId":"2384","severity":1,"message":"2385","line":131,"column":47,"nodeType":"2386","messageId":"2387","endLine":131,"endColumn":49},{"ruleId":"2356","severity":1,"message":"2400","line":1,"column":24,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2642","line":5,"column":8,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2643","line":6,"column":8,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2644","line":7,"column":8,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":26},{"ruleId":"2363","severity":1,"message":"2442","line":26,"column":8,"nodeType":"2365","endLine":26,"endColumn":12,"suggestions":"2645"},{"ruleId":"2356","severity":1,"message":"2593","line":1,"column":37,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2646","line":2,"column":34,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2647","line":3,"column":26,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":45},{"ruleId":"2363","severity":1,"message":"2442","line":47,"column":8,"nodeType":"2365","endLine":47,"endColumn":12,"suggestions":"2648"},{"ruleId":"2384","severity":1,"message":"2441","line":64,"column":38,"nodeType":"2386","messageId":"2387","endLine":64,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2649","line":114,"column":7,"nodeType":"2358","messageId":"2359","endLine":114,"endColumn":13},{"ruleId":"2367","severity":1,"message":"2368","line":118,"column":43,"nodeType":"2369","endLine":118,"endColumn":75},{"ruleId":"2356","severity":1,"message":"2400","line":1,"column":24,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":31},{"ruleId":"2363","severity":1,"message":"2442","line":25,"column":8,"nodeType":"2365","endLine":25,"endColumn":12,"suggestions":"2650"},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":27,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":34},{"ruleId":"2363","severity":1,"message":"2651","line":32,"column":8,"nodeType":"2365","endLine":32,"endColumn":12,"suggestions":"2652"},{"ruleId":"2363","severity":1,"message":"2442","line":50,"column":6,"nodeType":"2365","endLine":50,"endColumn":25,"suggestions":"2653"},{"ruleId":"2384","severity":1,"message":"2441","line":92,"column":46,"nodeType":"2386","messageId":"2387","endLine":92,"endColumn":48},{"ruleId":"2356","severity":1,"message":"2551","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2654","line":5,"column":8,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2551","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2593","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2655","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2391","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2406","line":1,"column":36,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2407","line":1,"column":42,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":53},{"ruleId":"2356","severity":1,"message":"2631","line":1,"column":55,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":68},{"ruleId":"2356","severity":1,"message":"2630","line":1,"column":70,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":83},{"ruleId":"2356","severity":1,"message":"2629","line":1,"column":85,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":96},{"ruleId":"2356","severity":1,"message":"2417","line":1,"column":98,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":102},{"ruleId":"2356","severity":1,"message":"2541","line":1,"column":122,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":136},{"ruleId":"2356","severity":1,"message":"2656","line":1,"column":137,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":141},{"ruleId":"2356","severity":1,"message":"2409","line":1,"column":143,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":147},{"ruleId":"2356","severity":1,"message":"2577","line":1,"column":149,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":157},{"ruleId":"2356","severity":1,"message":"2657","line":1,"column":159,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":171},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":173,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":178},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":180,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":189},{"ruleId":"2356","severity":1,"message":"2523","line":1,"column":200,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":210},{"ruleId":"2356","severity":1,"message":"2360","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":34,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2658","line":12,"column":11,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2659","line":15,"column":12,"nodeType":"2358","messageId":"2359","endLine":15,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2660","line":15,"column":18,"nodeType":"2358","messageId":"2359","endLine":15,"endColumn":25},{"ruleId":"2384","severity":1,"message":"2441","line":77,"column":31,"nodeType":"2386","messageId":"2387","endLine":77,"endColumn":33},{"ruleId":"2661","severity":1,"message":"2662","line":118,"column":41,"nodeType":"2386","messageId":"2663","endLine":118,"endColumn":45},{"ruleId":"2356","severity":1,"message":"2431","line":2,"column":79,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":84},{"ruleId":"2356","severity":1,"message":"2565","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":19},{"ruleId":"2363","severity":1,"message":"2664","line":10,"column":7,"nodeType":"2365","endLine":10,"endColumn":9,"suggestions":"2665"},{"ruleId":"2356","severity":1,"message":"2666","line":22,"column":11,"nodeType":"2358","messageId":"2359","endLine":22,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2667","line":24,"column":11,"nodeType":"2358","messageId":"2359","endLine":24,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2668","line":25,"column":11,"nodeType":"2358","messageId":"2359","endLine":25,"endColumn":28},{"ruleId":"2356","severity":1,"message":"2669","line":27,"column":11,"nodeType":"2358","messageId":"2359","endLine":27,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2670","line":31,"column":11,"nodeType":"2358","messageId":"2359","endLine":31,"endColumn":28},{"ruleId":"2356","severity":1,"message":"2671","line":38,"column":11,"nodeType":"2358","messageId":"2359","endLine":38,"endColumn":37},{"ruleId":"2356","severity":1,"message":"2672","line":39,"column":11,"nodeType":"2358","messageId":"2359","endLine":39,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2593","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2655","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2391","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2406","line":1,"column":36,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2407","line":1,"column":42,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":53},{"ruleId":"2356","severity":1,"message":"2631","line":1,"column":55,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":68},{"ruleId":"2356","severity":1,"message":"2630","line":1,"column":70,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":83},{"ruleId":"2356","severity":1,"message":"2629","line":1,"column":85,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":96},{"ruleId":"2356","severity":1,"message":"2417","line":1,"column":98,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":102},{"ruleId":"2356","severity":1,"message":"2541","line":1,"column":122,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":136},{"ruleId":"2356","severity":1,"message":"2656","line":1,"column":137,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":141},{"ruleId":"2356","severity":1,"message":"2409","line":1,"column":143,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":147},{"ruleId":"2356","severity":1,"message":"2577","line":1,"column":149,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":157},{"ruleId":"2356","severity":1,"message":"2657","line":1,"column":159,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":171},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":173,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":178},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":180,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":189},{"ruleId":"2356","severity":1,"message":"2523","line":1,"column":200,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":210},{"ruleId":"2356","severity":1,"message":"2360","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":34,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2658","line":12,"column":11,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2659","line":15,"column":12,"nodeType":"2358","messageId":"2359","endLine":15,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2660","line":15,"column":18,"nodeType":"2358","messageId":"2359","endLine":15,"endColumn":25},{"ruleId":"2384","severity":1,"message":"2441","line":97,"column":31,"nodeType":"2386","messageId":"2387","endLine":97,"endColumn":33},{"ruleId":"2661","severity":1,"message":"2662","line":138,"column":41,"nodeType":"2386","messageId":"2663","endLine":138,"endColumn":45},{"ruleId":"2356","severity":1,"message":"2431","line":2,"column":79,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":84},{"ruleId":"2356","severity":1,"message":"2565","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":19},{"ruleId":"2363","severity":1,"message":"2664","line":10,"column":7,"nodeType":"2365","endLine":10,"endColumn":9,"suggestions":"2673"},{"ruleId":"2356","severity":1,"message":"2666","line":22,"column":11,"nodeType":"2358","messageId":"2359","endLine":22,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2667","line":24,"column":11,"nodeType":"2358","messageId":"2359","endLine":24,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2668","line":25,"column":11,"nodeType":"2358","messageId":"2359","endLine":25,"endColumn":28},{"ruleId":"2356","severity":1,"message":"2669","line":27,"column":11,"nodeType":"2358","messageId":"2359","endLine":27,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2670","line":31,"column":11,"nodeType":"2358","messageId":"2359","endLine":31,"endColumn":28},{"ruleId":"2356","severity":1,"message":"2671","line":38,"column":11,"nodeType":"2358","messageId":"2359","endLine":38,"endColumn":37},{"ruleId":"2356","severity":1,"message":"2672","line":39,"column":11,"nodeType":"2358","messageId":"2359","endLine":39,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2415","line":3,"column":17,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2664","line":11,"column":7,"nodeType":"2365","endLine":11,"endColumn":9,"suggestions":"2674"},{"ruleId":"2356","severity":1,"message":"2667","line":25,"column":11,"nodeType":"2358","messageId":"2359","endLine":25,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2668","line":26,"column":11,"nodeType":"2358","messageId":"2359","endLine":26,"endColumn":28},{"ruleId":"2356","severity":1,"message":"2669","line":28,"column":11,"nodeType":"2358","messageId":"2359","endLine":28,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2670","line":32,"column":11,"nodeType":"2358","messageId":"2359","endLine":32,"endColumn":28},{"ruleId":"2356","severity":1,"message":"2593","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2655","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2391","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2406","line":1,"column":36,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2407","line":1,"column":42,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":53},{"ruleId":"2356","severity":1,"message":"2631","line":1,"column":55,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":68},{"ruleId":"2356","severity":1,"message":"2630","line":1,"column":70,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":83},{"ruleId":"2356","severity":1,"message":"2629","line":1,"column":85,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":96},{"ruleId":"2356","severity":1,"message":"2417","line":1,"column":98,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":102},{"ruleId":"2356","severity":1,"message":"2541","line":1,"column":122,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":136},{"ruleId":"2356","severity":1,"message":"2656","line":1,"column":137,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":141},{"ruleId":"2356","severity":1,"message":"2409","line":1,"column":143,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":147},{"ruleId":"2356","severity":1,"message":"2577","line":1,"column":149,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":157},{"ruleId":"2356","severity":1,"message":"2657","line":1,"column":159,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":171},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":173,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":178},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":180,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":189},{"ruleId":"2356","severity":1,"message":"2523","line":1,"column":200,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":210},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":34,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2658","line":14,"column":11,"nodeType":"2358","messageId":"2359","endLine":14,"endColumn":31},{"ruleId":"2384","severity":1,"message":"2441","line":46,"column":56,"nodeType":"2386","messageId":"2387","endLine":46,"endColumn":58},{"ruleId":"2384","severity":1,"message":"2441","line":62,"column":56,"nodeType":"2386","messageId":"2387","endLine":62,"endColumn":58},{"ruleId":"2384","severity":1,"message":"2441","line":69,"column":56,"nodeType":"2386","messageId":"2387","endLine":69,"endColumn":58},{"ruleId":"2384","severity":1,"message":"2441","line":76,"column":56,"nodeType":"2386","messageId":"2387","endLine":76,"endColumn":58},{"ruleId":"2384","severity":1,"message":"2441","line":120,"column":31,"nodeType":"2386","messageId":"2387","endLine":120,"endColumn":33},{"ruleId":"2661","severity":1,"message":"2662","line":167,"column":41,"nodeType":"2386","messageId":"2663","endLine":167,"endColumn":45},{"ruleId":"2356","severity":1,"message":"2593","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2655","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2391","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2406","line":1,"column":36,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2407","line":1,"column":42,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":53},{"ruleId":"2356","severity":1,"message":"2631","line":1,"column":55,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":68},{"ruleId":"2356","severity":1,"message":"2630","line":1,"column":70,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":83},{"ruleId":"2356","severity":1,"message":"2629","line":1,"column":85,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":96},{"ruleId":"2356","severity":1,"message":"2417","line":1,"column":98,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":102},{"ruleId":"2356","severity":1,"message":"2541","line":1,"column":122,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":136},{"ruleId":"2356","severity":1,"message":"2656","line":1,"column":137,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":141},{"ruleId":"2356","severity":1,"message":"2409","line":1,"column":143,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":147},{"ruleId":"2356","severity":1,"message":"2577","line":1,"column":149,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":157},{"ruleId":"2356","severity":1,"message":"2657","line":1,"column":159,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":171},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":173,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":178},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":180,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":189},{"ruleId":"2356","severity":1,"message":"2523","line":1,"column":200,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":210},{"ruleId":"2356","severity":1,"message":"2360","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":34,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2439","line":3,"column":21,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":43},{"ruleId":"2356","severity":1,"message":"2440","line":3,"column":44,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":52},{"ruleId":"2356","severity":1,"message":"2528","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2415","line":5,"column":17,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2487","line":7,"column":9,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":18},{"ruleId":"2661","severity":1,"message":"2662","line":76,"column":41,"nodeType":"2386","messageId":"2663","endLine":76,"endColumn":45},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":18,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2414","line":2,"column":42,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":52},{"ruleId":"2356","severity":1,"message":"2412","line":2,"column":53,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":61},{"ruleId":"2356","severity":1,"message":"2411","line":2,"column":62,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":68},{"ruleId":"2356","severity":1,"message":"2415","line":3,"column":17,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2675","line":4,"column":10,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2487","line":5,"column":10,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":19},{"ruleId":"2363","severity":1,"message":"2664","line":12,"column":7,"nodeType":"2365","endLine":12,"endColumn":9,"suggestions":"2676"},{"ruleId":"2356","severity":1,"message":"2593","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2655","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2391","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2406","line":1,"column":36,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2407","line":1,"column":42,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":53},{"ruleId":"2356","severity":1,"message":"2631","line":1,"column":55,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":68},{"ruleId":"2356","severity":1,"message":"2630","line":1,"column":70,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":83},{"ruleId":"2356","severity":1,"message":"2629","line":1,"column":85,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":96},{"ruleId":"2356","severity":1,"message":"2417","line":1,"column":98,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":102},{"ruleId":"2356","severity":1,"message":"2541","line":1,"column":122,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":136},{"ruleId":"2356","severity":1,"message":"2656","line":1,"column":137,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":141},{"ruleId":"2356","severity":1,"message":"2409","line":1,"column":143,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":147},{"ruleId":"2356","severity":1,"message":"2577","line":1,"column":149,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":157},{"ruleId":"2356","severity":1,"message":"2657","line":1,"column":159,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":171},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":173,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":178},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":180,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":189},{"ruleId":"2356","severity":1,"message":"2523","line":1,"column":200,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":210},{"ruleId":"2356","severity":1,"message":"2360","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":34,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2658","line":12,"column":11,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":31},{"ruleId":"2384","severity":1,"message":"2441","line":66,"column":31,"nodeType":"2386","messageId":"2387","endLine":66,"endColumn":33},{"ruleId":"2661","severity":1,"message":"2662","line":107,"column":41,"nodeType":"2386","messageId":"2663","endLine":107,"endColumn":45},{"ruleId":"2363","severity":1,"message":"2664","line":10,"column":7,"nodeType":"2365","endLine":10,"endColumn":9,"suggestions":"2677"},{"ruleId":"2378","severity":1,"message":"2379","line":22,"column":1,"nodeType":"2380","endLine":25,"endColumn":2},{"ruleId":"2356","severity":1,"message":"2678","line":6,"column":39,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":53},{"ruleId":"2356","severity":1,"message":"2531","line":6,"column":56,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":61},{"ruleId":"2356","severity":1,"message":"2679","line":7,"column":15,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2442","line":25,"column":7,"nodeType":"2365","endLine":25,"endColumn":11,"suggestions":"2680"},{"ruleId":"2356","severity":1,"message":"2572","line":1,"column":34,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":38},{"ruleId":"2363","severity":1,"message":"2681","line":18,"column":8,"nodeType":"2365","endLine":18,"endColumn":17,"suggestions":"2682"},{"ruleId":"2356","severity":1,"message":"2541","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2683","line":56,"column":19,"nodeType":"2358","messageId":"2359","endLine":56,"endColumn":28},{"ruleId":"2356","severity":1,"message":"2684","line":58,"column":19,"nodeType":"2358","messageId":"2359","endLine":58,"endColumn":28},{"ruleId":"2363","severity":1,"message":"2442","line":86,"column":8,"nodeType":"2365","endLine":86,"endColumn":14,"suggestions":"2685"},{"ruleId":"2356","severity":1,"message":"2573","line":1,"column":38,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":49},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":29,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2362","line":2,"column":51,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":55},{"ruleId":"2356","severity":1,"message":"2628","line":2,"column":57,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":63},{"ruleId":"2356","severity":1,"message":"2629","line":2,"column":65,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":76},{"ruleId":"2356","severity":1,"message":"2630","line":2,"column":78,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":91},{"ruleId":"2356","severity":1,"message":"2631","line":2,"column":93,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":106},{"ruleId":"2356","severity":1,"message":"2551","line":2,"column":108,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":115},{"ruleId":"2356","severity":1,"message":"2415","line":6,"column":18,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2498","line":7,"column":10,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2421","line":7,"column":42,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":51},{"ruleId":"2356","severity":1,"message":"2615","line":34,"column":12,"nodeType":"2358","messageId":"2359","endLine":34,"endColumn":16},{"ruleId":"2363","severity":1,"message":"2686","line":96,"column":8,"nodeType":"2365","endLine":96,"endColumn":17,"suggestions":"2687"},{"ruleId":"2356","severity":1,"message":"2421","line":4,"column":10,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2679","line":7,"column":15,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2442","line":25,"column":7,"nodeType":"2365","endLine":25,"endColumn":11,"suggestions":"2688"},{"ruleId":"2356","severity":1,"message":"2679","line":7,"column":15,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2442","line":25,"column":7,"nodeType":"2365","endLine":25,"endColumn":11,"suggestions":"2689"},{"ruleId":"2356","severity":1,"message":"2679","line":7,"column":15,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2442","line":25,"column":7,"nodeType":"2365","endLine":25,"endColumn":11,"suggestions":"2690"},{"ruleId":"2378","severity":1,"message":"2379","line":25,"column":1,"nodeType":"2380","endLine":27,"endColumn":2},{"ruleId":"2356","severity":1,"message":"2399","line":3,"column":3,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":12},{"ruleId":"2356","severity":1,"message":"2362","line":5,"column":3,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":7},{"ruleId":"2356","severity":1,"message":"2478","line":10,"column":3,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":11},{"ruleId":"2356","severity":1,"message":"2400","line":16,"column":27,"nodeType":"2358","messageId":"2359","endLine":16,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2401","line":17,"column":18,"nodeType":"2358","messageId":"2359","endLine":17,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2691","line":23,"column":10,"nodeType":"2358","messageId":"2359","endLine":23,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2692","line":23,"column":17,"nodeType":"2358","messageId":"2359","endLine":23,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2371","line":28,"column":9,"nodeType":"2358","messageId":"2359","endLine":28,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2693","line":30,"column":9,"nodeType":"2358","messageId":"2359","endLine":30,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2694","line":34,"column":10,"nodeType":"2358","messageId":"2359","endLine":34,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2695","line":34,"column":20,"nodeType":"2358","messageId":"2359","endLine":34,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2696","line":50,"column":10,"nodeType":"2358","messageId":"2359","endLine":50,"endColumn":20},{"ruleId":"2363","severity":1,"message":"2422","line":74,"column":6,"nodeType":"2365","endLine":74,"endColumn":8,"suggestions":"2697"},{"ruleId":"2356","severity":1,"message":"2698","line":75,"column":9,"nodeType":"2358","messageId":"2359","endLine":75,"endColumn":17},{"ruleId":"2384","severity":1,"message":"2441","line":77,"column":13,"nodeType":"2386","messageId":"2387","endLine":77,"endColumn":15},{"ruleId":"2384","severity":1,"message":"2441","line":78,"column":16,"nodeType":"2386","messageId":"2387","endLine":78,"endColumn":18},{"ruleId":"2384","severity":1,"message":"2441","line":79,"column":23,"nodeType":"2386","messageId":"2387","endLine":79,"endColumn":25},{"ruleId":"2384","severity":1,"message":"2441","line":80,"column":24,"nodeType":"2386","messageId":"2387","endLine":80,"endColumn":26},{"ruleId":"2384","severity":1,"message":"2441","line":81,"column":17,"nodeType":"2386","messageId":"2387","endLine":81,"endColumn":19},{"ruleId":"2384","severity":1,"message":"2441","line":82,"column":16,"nodeType":"2386","messageId":"2387","endLine":82,"endColumn":18},{"ruleId":"2367","severity":1,"message":"2368","line":322,"column":27,"nodeType":"2369","endLine":322,"endColumn":73},{"ruleId":"2356","severity":1,"message":"2399","line":1,"column":18,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2362","line":1,"column":35,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":39},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":57,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":66},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2363","severity":1,"message":"2422","line":48,"column":8,"nodeType":"2365","endLine":48,"endColumn":10,"suggestions":"2699"},{"ruleId":"2356","severity":1,"message":"2396","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2421","line":2,"column":36,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":45},{"ruleId":"2356","severity":1,"message":"2523","line":2,"column":51,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":61},{"ruleId":"2356","severity":1,"message":"2408","line":2,"column":63,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":73},{"ruleId":"2356","severity":1,"message":"2700","line":2,"column":74,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":82},{"ruleId":"2356","severity":1,"message":"2431","line":2,"column":84,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":89},{"ruleId":"2356","severity":1,"message":"2551","line":2,"column":91,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":98},{"ruleId":"2356","severity":1,"message":"2481","line":3,"column":8,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2593","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":11},{"ruleId":"2356","severity":1,"message":"2600","line":5,"column":8,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2701","line":8,"column":8,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2702","line":10,"column":8,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2528","line":12,"column":8,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2703","line":36,"column":11,"nodeType":"2358","messageId":"2359","endLine":36,"endColumn":16},{"ruleId":"2384","severity":1,"message":"2385","line":63,"column":17,"nodeType":"2386","messageId":"2387","endLine":63,"endColumn":19},{"ruleId":"2384","severity":1,"message":"2385","line":103,"column":16,"nodeType":"2386","messageId":"2387","endLine":103,"endColumn":18},{"ruleId":"2384","severity":1,"message":"2385","line":175,"column":24,"nodeType":"2386","messageId":"2387","endLine":175,"endColumn":26},{"ruleId":"2363","severity":1,"message":"2529","line":182,"column":7,"nodeType":"2365","endLine":182,"endColumn":16,"suggestions":"2704"},{"ruleId":"2384","severity":1,"message":"2441","line":194,"column":23,"nodeType":"2386","messageId":"2387","endLine":194,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2391","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":34,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":39},{"ruleId":"2634","severity":1,"message":"2635","line":28,"column":21,"nodeType":"2636","messageId":"2637","endLine":28,"endColumn":30},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":16,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2431","line":2,"column":22,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2628","line":2,"column":42,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":48},{"ruleId":"2356","severity":1,"message":"2629","line":2,"column":50,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":61},{"ruleId":"2356","severity":1,"message":"2630","line":2,"column":63,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":76},{"ruleId":"2356","severity":1,"message":"2631","line":2,"column":78,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":91},{"ruleId":"2356","severity":1,"message":"2414","line":2,"column":102,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":112},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":114,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":125},{"ruleId":"2356","severity":1,"message":"2411","line":2,"column":127,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":133},{"ruleId":"2356","severity":1,"message":"2412","line":2,"column":135,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":143},{"ruleId":"2356","severity":1,"message":"2705","line":9,"column":13,"nodeType":"2358","messageId":"2359","endLine":9,"endColumn":20},{"ruleId":"2384","severity":1,"message":"2385","line":10,"column":59,"nodeType":"2386","messageId":"2387","endLine":10,"endColumn":61},{"ruleId":"2384","severity":1,"message":"2385","line":11,"column":59,"nodeType":"2386","messageId":"2387","endLine":11,"endColumn":61},{"ruleId":"2384","severity":1,"message":"2385","line":13,"column":70,"nodeType":"2386","messageId":"2387","endLine":13,"endColumn":72},{"ruleId":"2384","severity":1,"message":"2385","line":14,"column":60,"nodeType":"2386","messageId":"2387","endLine":14,"endColumn":62},{"ruleId":"2356","severity":1,"message":"2706","line":16,"column":21,"nodeType":"2358","messageId":"2359","endLine":16,"endColumn":32},{"ruleId":"2384","severity":1,"message":"2385","line":16,"column":64,"nodeType":"2386","messageId":"2387","endLine":16,"endColumn":66},{"ruleId":"2384","severity":1,"message":"2385","line":17,"column":74,"nodeType":"2386","messageId":"2387","endLine":17,"endColumn":76},{"ruleId":"2384","severity":1,"message":"2385","line":20,"column":27,"nodeType":"2386","messageId":"2387","endLine":20,"endColumn":29},{"ruleId":"2384","severity":1,"message":"2441","line":25,"column":19,"nodeType":"2386","messageId":"2387","endLine":25,"endColumn":21},{"ruleId":"2384","severity":1,"message":"2441","line":25,"column":35,"nodeType":"2386","messageId":"2387","endLine":25,"endColumn":37},{"ruleId":"2384","severity":1,"message":"2385","line":92,"column":41,"nodeType":"2386","messageId":"2387","endLine":92,"endColumn":43},{"ruleId":"2356","severity":1,"message":"2593","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2655","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2391","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2406","line":1,"column":36,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2407","line":1,"column":42,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":53},{"ruleId":"2356","severity":1,"message":"2631","line":1,"column":55,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":68},{"ruleId":"2356","severity":1,"message":"2630","line":1,"column":70,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":83},{"ruleId":"2356","severity":1,"message":"2629","line":1,"column":85,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":96},{"ruleId":"2356","severity":1,"message":"2417","line":1,"column":98,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":102},{"ruleId":"2356","severity":1,"message":"2541","line":1,"column":122,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":136},{"ruleId":"2356","severity":1,"message":"2656","line":1,"column":137,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":141},{"ruleId":"2356","severity":1,"message":"2409","line":1,"column":143,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":147},{"ruleId":"2356","severity":1,"message":"2577","line":1,"column":149,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":157},{"ruleId":"2356","severity":1,"message":"2657","line":1,"column":159,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":171},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":173,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":178},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":180,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":189},{"ruleId":"2356","severity":1,"message":"2523","line":1,"column":200,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":210},{"ruleId":"2356","severity":1,"message":"2360","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":34,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2439","line":3,"column":21,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":43},{"ruleId":"2356","severity":1,"message":"2440","line":3,"column":44,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":52},{"ruleId":"2356","severity":1,"message":"2415","line":5,"column":17,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2487","line":7,"column":9,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2707","line":10,"column":12,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2708","line":10,"column":22,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":34},{"ruleId":"2661","severity":1,"message":"2662","line":119,"column":41,"nodeType":"2386","messageId":"2663","endLine":119,"endColumn":45},{"ruleId":"2356","severity":1,"message":"2523","line":2,"column":51,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":61},{"ruleId":"2356","severity":1,"message":"2408","line":2,"column":63,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":73},{"ruleId":"2356","severity":1,"message":"2700","line":2,"column":74,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":82},{"ruleId":"2356","severity":1,"message":"2656","line":2,"column":108,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":112},{"ruleId":"2356","severity":1,"message":"2593","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":11},{"ruleId":"2356","severity":1,"message":"2528","line":14,"column":8,"nodeType":"2358","messageId":"2359","endLine":14,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2401","line":18,"column":17,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2578","line":18,"column":23,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2709","line":20,"column":10,"nodeType":"2358","messageId":"2359","endLine":20,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2710","line":21,"column":10,"nodeType":"2358","messageId":"2359","endLine":21,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2711","line":22,"column":10,"nodeType":"2358","messageId":"2359","endLine":22,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2557","line":55,"column":11,"nodeType":"2358","messageId":"2359","endLine":55,"endColumn":18},{"ruleId":"2384","severity":1,"message":"2385","line":62,"column":67,"nodeType":"2386","messageId":"2387","endLine":62,"endColumn":69},{"ruleId":"2384","severity":1,"message":"2385","line":62,"column":107,"nodeType":"2386","messageId":"2387","endLine":62,"endColumn":109},{"ruleId":"2384","severity":1,"message":"2385","line":63,"column":57,"nodeType":"2386","messageId":"2387","endLine":63,"endColumn":59},{"ruleId":"2384","severity":1,"message":"2385","line":63,"column":97,"nodeType":"2386","messageId":"2387","endLine":63,"endColumn":99},{"ruleId":"2384","severity":1,"message":"2385","line":75,"column":117,"nodeType":"2386","messageId":"2387","endLine":75,"endColumn":119},{"ruleId":"2384","severity":1,"message":"2385","line":75,"column":171,"nodeType":"2386","messageId":"2387","endLine":75,"endColumn":173},{"ruleId":"2356","severity":1,"message":"2712","line":76,"column":27,"nodeType":"2358","messageId":"2359","endLine":76,"endColumn":44},{"ruleId":"2384","severity":1,"message":"2385","line":76,"column":134,"nodeType":"2386","messageId":"2387","endLine":76,"endColumn":136},{"ruleId":"2356","severity":1,"message":"2713","line":78,"column":12,"nodeType":"2358","messageId":"2359","endLine":78,"endColumn":27},{"ruleId":"2363","severity":1,"message":"2714","line":149,"column":7,"nodeType":"2365","endLine":149,"endColumn":36,"suggestions":"2715"},{"ruleId":"2363","severity":1,"message":"2716","line":154,"column":7,"nodeType":"2365","endLine":154,"endColumn":48,"suggestions":"2717"},{"ruleId":"2384","severity":1,"message":"2385","line":172,"column":21,"nodeType":"2386","messageId":"2387","endLine":172,"endColumn":23},{"ruleId":"2363","severity":1,"message":"2718","line":181,"column":9,"nodeType":"2365","endLine":181,"endColumn":32,"suggestions":"2719"},{"ruleId":"2384","severity":1,"message":"2385","line":212,"column":17,"nodeType":"2386","messageId":"2387","endLine":212,"endColumn":19},{"ruleId":"2384","severity":1,"message":"2385","line":216,"column":17,"nodeType":"2386","messageId":"2387","endLine":216,"endColumn":19},{"ruleId":"2384","severity":1,"message":"2385","line":221,"column":17,"nodeType":"2386","messageId":"2387","endLine":221,"endColumn":19},{"ruleId":"2384","severity":1,"message":"2385","line":226,"column":17,"nodeType":"2386","messageId":"2387","endLine":226,"endColumn":19},{"ruleId":"2363","severity":1,"message":"2525","line":298,"column":8,"nodeType":"2365","endLine":298,"endColumn":18,"suggestions":"2720"},{"ruleId":"2384","severity":1,"message":"2385","line":302,"column":45,"nodeType":"2386","messageId":"2387","endLine":302,"endColumn":47},{"ruleId":"2384","severity":1,"message":"2385","line":312,"column":46,"nodeType":"2386","messageId":"2387","endLine":312,"endColumn":48},{"ruleId":"2384","severity":1,"message":"2441","line":314,"column":56,"nodeType":"2386","messageId":"2387","endLine":314,"endColumn":58},{"ruleId":"2384","severity":1,"message":"2441","line":342,"column":39,"nodeType":"2386","messageId":"2387","endLine":342,"endColumn":41},{"ruleId":"2384","severity":1,"message":"2441","line":343,"column":27,"nodeType":"2386","messageId":"2387","endLine":343,"endColumn":29},{"ruleId":"2384","severity":1,"message":"2385","line":351,"column":37,"nodeType":"2386","messageId":"2387","endLine":351,"endColumn":39},{"ruleId":"2384","severity":1,"message":"2385","line":379,"column":78,"nodeType":"2386","messageId":"2387","endLine":379,"endColumn":80},{"ruleId":"2384","severity":1,"message":"2385","line":384,"column":77,"nodeType":"2386","messageId":"2387","endLine":384,"endColumn":79},{"ruleId":"2384","severity":1,"message":"2385","line":389,"column":78,"nodeType":"2386","messageId":"2387","endLine":389,"endColumn":80},{"ruleId":"2384","severity":1,"message":"2385","line":398,"column":42,"nodeType":"2386","messageId":"2387","endLine":398,"endColumn":44},{"ruleId":"2384","severity":1,"message":"2385","line":400,"column":82,"nodeType":"2386","messageId":"2387","endLine":400,"endColumn":84},{"ruleId":"2384","severity":1,"message":"2441","line":406,"column":31,"nodeType":"2386","messageId":"2387","endLine":406,"endColumn":33},{"ruleId":"2384","severity":1,"message":"2441","line":467,"column":45,"nodeType":"2386","messageId":"2387","endLine":467,"endColumn":47},{"ruleId":"2661","severity":1,"message":"2662","line":468,"column":22,"nodeType":"2386","messageId":"2663","endLine":468,"endColumn":26},{"ruleId":"2384","severity":1,"message":"2385","line":479,"column":46,"nodeType":"2386","messageId":"2387","endLine":479,"endColumn":48},{"ruleId":"2384","severity":1,"message":"2385","line":487,"column":46,"nodeType":"2386","messageId":"2387","endLine":487,"endColumn":48},{"ruleId":"2384","severity":1,"message":"2385","line":493,"column":46,"nodeType":"2386","messageId":"2387","endLine":493,"endColumn":48},{"ruleId":"2384","severity":1,"message":"2385","line":506,"column":46,"nodeType":"2386","messageId":"2387","endLine":506,"endColumn":48},{"ruleId":"2367","severity":1,"message":"2368","line":519,"column":41,"nodeType":"2369","endLine":519,"endColumn":70},{"ruleId":"2384","severity":1,"message":"2385","line":552,"column":58,"nodeType":"2386","messageId":"2387","endLine":552,"endColumn":60},{"ruleId":"2384","severity":1,"message":"2441","line":586,"column":39,"nodeType":"2386","messageId":"2387","endLine":586,"endColumn":41},{"ruleId":"2384","severity":1,"message":"2441","line":615,"column":35,"nodeType":"2386","messageId":"2387","endLine":615,"endColumn":37},{"ruleId":"2356","severity":1,"message":"2721","line":635,"column":55,"nodeType":"2358","messageId":"2359","endLine":635,"endColumn":62},{"ruleId":"2356","severity":1,"message":"2722","line":5,"column":11,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2723","line":43,"column":8,"nodeType":"2365","endLine":43,"endColumn":10,"suggestions":"2724"},{"ruleId":"2384","severity":1,"message":"2385","line":12,"column":27,"nodeType":"2386","messageId":"2387","endLine":12,"endColumn":29},{"ruleId":"2384","severity":1,"message":"2385","line":13,"column":27,"nodeType":"2386","messageId":"2387","endLine":13,"endColumn":29},{"ruleId":"2384","severity":1,"message":"2385","line":14,"column":27,"nodeType":"2386","messageId":"2387","endLine":14,"endColumn":29},{"ruleId":"2384","severity":1,"message":"2385","line":15,"column":27,"nodeType":"2386","messageId":"2387","endLine":15,"endColumn":29},{"ruleId":"2367","severity":1,"message":"2368","line":19,"column":13,"nodeType":"2369","endLine":19,"endColumn":50},{"ruleId":"2356","severity":1,"message":"2431","line":2,"column":22,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2391","line":2,"column":28,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2439","line":3,"column":21,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":43},{"ruleId":"2356","severity":1,"message":"2440","line":3,"column":44,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":52},{"ruleId":"2356","severity":1,"message":"2565","line":8,"column":8,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2725","line":9,"column":8,"nodeType":"2358","messageId":"2359","endLine":9,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2554","line":10,"column":10,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2591","line":11,"column":8,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2420","line":22,"column":17,"nodeType":"2358","messageId":"2359","endLine":22,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2726","line":26,"column":11,"nodeType":"2358","messageId":"2359","endLine":26,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2727","line":53,"column":11,"nodeType":"2358","messageId":"2359","endLine":53,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2728","line":63,"column":11,"nodeType":"2358","messageId":"2359","endLine":63,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2729","line":67,"column":11,"nodeType":"2358","messageId":"2359","endLine":67,"endColumn":35},{"ruleId":"2356","severity":1,"message":"2431","line":2,"column":22,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2391","line":2,"column":28,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2439","line":3,"column":21,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":43},{"ruleId":"2356","severity":1,"message":"2440","line":3,"column":44,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":52},{"ruleId":"2356","severity":1,"message":"2565","line":8,"column":8,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2725","line":9,"column":8,"nodeType":"2358","messageId":"2359","endLine":9,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2554","line":10,"column":10,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2591","line":11,"column":8,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2420","line":22,"column":17,"nodeType":"2358","messageId":"2359","endLine":22,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2726","line":26,"column":11,"nodeType":"2358","messageId":"2359","endLine":26,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2727","line":53,"column":11,"nodeType":"2358","messageId":"2359","endLine":53,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2728","line":63,"column":11,"nodeType":"2358","messageId":"2359","endLine":63,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2729","line":67,"column":11,"nodeType":"2358","messageId":"2359","endLine":67,"endColumn":35},{"ruleId":"2378","severity":1,"message":"2379","line":17,"column":1,"nodeType":"2380","endLine":21,"endColumn":2},{"ruleId":"2356","severity":1,"message":"2413","line":1,"column":18,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":43,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":53},{"ruleId":"2356","severity":1,"message":"2412","line":1,"column":55,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":63},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":65,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":70},{"ruleId":"2356","severity":1,"message":"2411","line":1,"column":72,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":78},{"ruleId":"2356","severity":1,"message":"2415","line":3,"column":17,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2413","line":1,"column":18,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2414","line":1,"column":43,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":53},{"ruleId":"2356","severity":1,"message":"2412","line":1,"column":55,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":63},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":65,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":70},{"ruleId":"2356","severity":1,"message":"2411","line":1,"column":72,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":78},{"ruleId":"2356","severity":1,"message":"2415","line":3,"column":17,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2573","line":1,"column":24,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":35},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":16,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2628","line":2,"column":42,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":48},{"ruleId":"2356","severity":1,"message":"2629","line":2,"column":50,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":61},{"ruleId":"2356","severity":1,"message":"2630","line":2,"column":63,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":76},{"ruleId":"2356","severity":1,"message":"2631","line":2,"column":78,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":91},{"ruleId":"2356","severity":1,"message":"2541","line":2,"column":102,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":116},{"ruleId":"2356","severity":1,"message":"2730","line":3,"column":23,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2523","line":3,"column":47,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":57},{"ruleId":"2356","severity":1,"message":"2731","line":3,"column":70,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":84},{"ruleId":"2356","severity":1,"message":"2590","line":7,"column":8,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2600","line":8,"column":8,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2381","line":13,"column":9,"nodeType":"2358","messageId":"2359","endLine":13,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2732","line":14,"column":8,"nodeType":"2358","messageId":"2359","endLine":14,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2733","line":19,"column":7,"nodeType":"2358","messageId":"2359","endLine":19,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2734","line":28,"column":17,"nodeType":"2358","messageId":"2359","endLine":28,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2616","line":45,"column":12,"nodeType":"2358","messageId":"2359","endLine":45,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2420","line":45,"column":17,"nodeType":"2358","messageId":"2359","endLine":45,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2735","line":50,"column":12,"nodeType":"2358","messageId":"2359","endLine":50,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2736","line":50,"column":21,"nodeType":"2358","messageId":"2359","endLine":50,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2737","line":51,"column":12,"nodeType":"2358","messageId":"2359","endLine":51,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2738","line":51,"column":17,"nodeType":"2358","messageId":"2359","endLine":51,"endColumn":24},{"ruleId":"2661","severity":1,"message":"2662","line":87,"column":14,"nodeType":"2386","messageId":"2663","endLine":87,"endColumn":18},{"ruleId":"2384","severity":1,"message":"2385","line":208,"column":50,"nodeType":"2386","messageId":"2387","endLine":208,"endColumn":52},{"ruleId":"2384","severity":1,"message":"2385","line":237,"column":25,"nodeType":"2386","messageId":"2387","endLine":237,"endColumn":27},{"ruleId":"2384","severity":1,"message":"2385","line":310,"column":25,"nodeType":"2386","messageId":"2387","endLine":310,"endColumn":27},{"ruleId":"2384","severity":1,"message":"2385","line":318,"column":25,"nodeType":"2386","messageId":"2387","endLine":318,"endColumn":27},{"ruleId":"2384","severity":1,"message":"2385","line":332,"column":25,"nodeType":"2386","messageId":"2387","endLine":332,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":16,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2431","line":2,"column":22,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2628","line":2,"column":42,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":48},{"ruleId":"2356","severity":1,"message":"2629","line":2,"column":50,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":61},{"ruleId":"2356","severity":1,"message":"2630","line":2,"column":63,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":76},{"ruleId":"2356","severity":1,"message":"2631","line":2,"column":78,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":91},{"ruleId":"2356","severity":1,"message":"2730","line":3,"column":23,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":32},{"ruleId":"2356","severity":1,"message":"2413","line":3,"column":34,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":45},{"ruleId":"2356","severity":1,"message":"2523","line":3,"column":47,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":57},{"ruleId":"2356","severity":1,"message":"2381","line":12,"column":9,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2734","line":25,"column":17,"nodeType":"2358","messageId":"2359","endLine":25,"endColumn":32},{"ruleId":"2384","severity":1,"message":"2385","line":104,"column":47,"nodeType":"2386","messageId":"2387","endLine":104,"endColumn":49},{"ruleId":"2384","severity":1,"message":"2385","line":149,"column":31,"nodeType":"2386","messageId":"2387","endLine":149,"endColumn":33},{"ruleId":"2384","severity":1,"message":"2385","line":170,"column":43,"nodeType":"2386","messageId":"2387","endLine":170,"endColumn":45},{"ruleId":"2378","severity":1,"message":"2379","line":48,"column":1,"nodeType":"2380","endLine":50,"endColumn":2},{"ruleId":"2356","severity":1,"message":"2415","line":3,"column":17,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2664","line":10,"column":7,"nodeType":"2365","endLine":10,"endColumn":9,"suggestions":"2739"},{"ruleId":"2356","severity":1,"message":"2740","line":12,"column":8,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":12},{"ruleId":"2352","replacedBy":"2741"},{"ruleId":"2354","replacedBy":"2742"},{"ruleId":"2356","severity":1,"message":"2421","line":2,"column":39,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":48},{"ruleId":"2356","severity":1,"message":"2362","line":2,"column":50,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":54},{"ruleId":"2356","severity":1,"message":"2523","line":2,"column":56,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":66},{"ruleId":"2384","severity":1,"message":"2385","line":54,"column":25,"nodeType":"2386","messageId":"2387","endLine":54,"endColumn":27},{"ruleId":"2363","severity":1,"message":"2442","line":65,"column":8,"nodeType":"2365","endLine":65,"endColumn":29,"suggestions":"2743"},{"ruleId":"2363","severity":1,"message":"2525","line":71,"column":8,"nodeType":"2365","endLine":71,"endColumn":18,"suggestions":"2744"},{"ruleId":"2384","severity":1,"message":"2441","line":91,"column":39,"nodeType":"2386","messageId":"2387","endLine":91,"endColumn":41},{"ruleId":"2384","severity":1,"message":"2385","line":126,"column":74,"nodeType":"2386","messageId":"2387","endLine":126,"endColumn":76},{"ruleId":"2384","severity":1,"message":"2385","line":133,"column":112,"nodeType":"2386","messageId":"2387","endLine":133,"endColumn":114},{"ruleId":"2384","severity":1,"message":"2385","line":135,"column":75,"nodeType":"2386","messageId":"2387","endLine":135,"endColumn":77},{"ruleId":"2363","severity":1,"message":"2442","line":178,"column":8,"nodeType":"2365","endLine":178,"endColumn":23,"suggestions":"2745"},{"ruleId":"2356","severity":1,"message":"2573","line":1,"column":38,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":49},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":29,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2362","line":2,"column":51,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":55},{"ruleId":"2356","severity":1,"message":"2628","line":2,"column":57,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":63},{"ruleId":"2356","severity":1,"message":"2629","line":2,"column":65,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":76},{"ruleId":"2356","severity":1,"message":"2630","line":2,"column":78,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":91},{"ruleId":"2356","severity":1,"message":"2631","line":2,"column":93,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":106},{"ruleId":"2356","severity":1,"message":"2551","line":2,"column":108,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":115},{"ruleId":"2356","severity":1,"message":"2746","line":3,"column":8,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":12},{"ruleId":"2356","severity":1,"message":"2481","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2415","line":6,"column":18,"nodeType":"2358","messageId":"2359","endLine":6,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2498","line":7,"column":10,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2747","line":7,"column":24,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2421","line":7,"column":42,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":51},{"ruleId":"2356","severity":1,"message":"2436","line":11,"column":10,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2437","line":11,"column":25,"nodeType":"2358","messageId":"2359","endLine":11,"endColumn":38},{"ruleId":"2356","severity":1,"message":"2557","line":16,"column":11,"nodeType":"2358","messageId":"2359","endLine":16,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2748","line":18,"column":12,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2749","line":18,"column":21,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2750","line":19,"column":12,"nodeType":"2358","messageId":"2359","endLine":19,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2751","line":20,"column":12,"nodeType":"2358","messageId":"2359","endLine":20,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2752","line":20,"column":25,"nodeType":"2358","messageId":"2359","endLine":20,"endColumn":39},{"ruleId":"2356","severity":1,"message":"2753","line":21,"column":12,"nodeType":"2358","messageId":"2359","endLine":21,"endColumn":21},{"ruleId":"2356","severity":1,"message":"2754","line":21,"column":23,"nodeType":"2358","messageId":"2359","endLine":21,"endColumn":35},{"ruleId":"2356","severity":1,"message":"2755","line":22,"column":12,"nodeType":"2358","messageId":"2359","endLine":22,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2756","line":22,"column":21,"nodeType":"2358","messageId":"2359","endLine":22,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2757","line":26,"column":11,"nodeType":"2358","messageId":"2359","endLine":26,"endColumn":36},{"ruleId":"2356","severity":1,"message":"2615","line":30,"column":12,"nodeType":"2358","messageId":"2359","endLine":30,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2420","line":30,"column":18,"nodeType":"2358","messageId":"2359","endLine":30,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2758","line":31,"column":12,"nodeType":"2358","messageId":"2359","endLine":31,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2759","line":31,"column":25,"nodeType":"2358","messageId":"2359","endLine":31,"endColumn":39},{"ruleId":"2363","severity":1,"message":"2760","line":39,"column":8,"nodeType":"2365","endLine":39,"endColumn":10,"suggestions":"2761"},{"ruleId":"2356","severity":1,"message":"2762","line":152,"column":11,"nodeType":"2358","messageId":"2359","endLine":152,"endColumn":23},{"ruleId":"2378","severity":1,"message":"2379","line":24,"column":1,"nodeType":"2380","endLine":26,"endColumn":2},{"ruleId":"2356","severity":1,"message":"2391","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":40,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":45},{"ruleId":"2384","severity":1,"message":"2385","line":79,"column":15,"nodeType":"2386","messageId":"2387","endLine":79,"endColumn":17},{"ruleId":"2384","severity":1,"message":"2385","line":88,"column":15,"nodeType":"2386","messageId":"2387","endLine":88,"endColumn":17},{"ruleId":"2384","severity":1,"message":"2385","line":97,"column":15,"nodeType":"2386","messageId":"2387","endLine":97,"endColumn":17},{"ruleId":"2363","severity":1,"message":"2763","line":110,"column":6,"nodeType":"2365","endLine":110,"endColumn":31,"suggestions":"2764"},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":17,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2357","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":36},{"ruleId":"2356","severity":1,"message":"2541","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2394","line":3,"column":8,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":14},{"ruleId":"2356","severity":1,"message":"2528","line":4,"column":8,"nodeType":"2358","messageId":"2359","endLine":4,"endColumn":9},{"ruleId":"2356","severity":1,"message":"2415","line":5,"column":17,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":22},{"ruleId":"2363","severity":1,"message":"2529","line":65,"column":7,"nodeType":"2365","endLine":65,"endColumn":16,"suggestions":"2765"},{"ruleId":"2356","severity":1,"message":"2357","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":23},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":24,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2391","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":18,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2362","line":2,"column":37,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2414","line":2,"column":42,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":52},{"ruleId":"2356","severity":1,"message":"2412","line":2,"column":53,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":61},{"ruleId":"2356","severity":1,"message":"2411","line":2,"column":62,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":68},{"ruleId":"2356","severity":1,"message":"2421","line":2,"column":69,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":78},{"ruleId":"2356","severity":1,"message":"2415","line":3,"column":17,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2593","line":1,"column":10,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":13},{"ruleId":"2356","severity":1,"message":"2655","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2391","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":34},{"ruleId":"2356","severity":1,"message":"2406","line":1,"column":36,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":40},{"ruleId":"2356","severity":1,"message":"2407","line":1,"column":42,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":53},{"ruleId":"2356","severity":1,"message":"2631","line":1,"column":55,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":68},{"ruleId":"2356","severity":1,"message":"2630","line":1,"column":70,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":83},{"ruleId":"2356","severity":1,"message":"2629","line":1,"column":85,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":96},{"ruleId":"2356","severity":1,"message":"2417","line":1,"column":98,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":102},{"ruleId":"2356","severity":1,"message":"2362","line":1,"column":104,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":108},{"ruleId":"2356","severity":1,"message":"2408","line":1,"column":110,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":120},{"ruleId":"2356","severity":1,"message":"2541","line":1,"column":122,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":136},{"ruleId":"2356","severity":1,"message":"2656","line":1,"column":137,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":141},{"ruleId":"2356","severity":1,"message":"2409","line":1,"column":143,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":147},{"ruleId":"2356","severity":1,"message":"2577","line":1,"column":149,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":157},{"ruleId":"2356","severity":1,"message":"2657","line":1,"column":159,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":171},{"ruleId":"2356","severity":1,"message":"2531","line":1,"column":173,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":178},{"ruleId":"2356","severity":1,"message":"2421","line":1,"column":180,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":189},{"ruleId":"2356","severity":1,"message":"2410","line":1,"column":191,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":198},{"ruleId":"2356","severity":1,"message":"2523","line":1,"column":200,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":210},{"ruleId":"2356","severity":1,"message":"2360","line":2,"column":24,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2400","line":2,"column":34,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":41},{"ruleId":"2356","severity":1,"message":"2415","line":5,"column":17,"nodeType":"2358","messageId":"2359","endLine":5,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2487","line":7,"column":9,"nodeType":"2358","messageId":"2359","endLine":7,"endColumn":18},{"ruleId":"2356","severity":1,"message":"2658","line":12,"column":11,"nodeType":"2358","messageId":"2359","endLine":12,"endColumn":31},{"ruleId":"2661","severity":1,"message":"2662","line":80,"column":41,"nodeType":"2386","messageId":"2663","endLine":80,"endColumn":45},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":17,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2357","line":1,"column":28,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":36},{"ruleId":"2356","severity":1,"message":"2541","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2766","line":8,"column":19,"nodeType":"2358","messageId":"2359","endLine":8,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2638","line":9,"column":7,"nodeType":"2358","messageId":"2359","endLine":9,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":17,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2541","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2620","line":42,"column":10,"nodeType":"2358","messageId":"2359","endLine":42,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2621","line":42,"column":18,"nodeType":"2358","messageId":"2359","endLine":42,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2755","line":43,"column":10,"nodeType":"2358","messageId":"2359","endLine":43,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2767","line":43,"column":19,"nodeType":"2358","messageId":"2359","endLine":43,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2622","line":44,"column":10,"nodeType":"2358","messageId":"2359","endLine":44,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2623","line":44,"column":17,"nodeType":"2358","messageId":"2359","endLine":44,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2624","line":45,"column":10,"nodeType":"2358","messageId":"2359","endLine":45,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2625","line":45,"column":18,"nodeType":"2358","messageId":"2359","endLine":45,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2626","line":46,"column":10,"nodeType":"2358","messageId":"2359","endLine":46,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2627","line":46,"column":18,"nodeType":"2358","messageId":"2359","endLine":46,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2768","line":47,"column":10,"nodeType":"2358","messageId":"2359","endLine":47,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2769","line":47,"column":21,"nodeType":"2358","messageId":"2359","endLine":47,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":17,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2541","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2632","line":3,"column":10,"nodeType":"2358","messageId":"2359","endLine":3,"endColumn":22},{"ruleId":"2356","severity":1,"message":"2620","line":64,"column":10,"nodeType":"2358","messageId":"2359","endLine":64,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2621","line":64,"column":18,"nodeType":"2358","messageId":"2359","endLine":64,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2755","line":65,"column":10,"nodeType":"2358","messageId":"2359","endLine":65,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2767","line":65,"column":19,"nodeType":"2358","messageId":"2359","endLine":65,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2622","line":66,"column":10,"nodeType":"2358","messageId":"2359","endLine":66,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2623","line":66,"column":17,"nodeType":"2358","messageId":"2359","endLine":66,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2624","line":67,"column":10,"nodeType":"2358","messageId":"2359","endLine":67,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2625","line":67,"column":18,"nodeType":"2358","messageId":"2359","endLine":67,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2626","line":68,"column":10,"nodeType":"2358","messageId":"2359","endLine":68,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2627","line":68,"column":18,"nodeType":"2358","messageId":"2359","endLine":68,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2768","line":69,"column":10,"nodeType":"2358","messageId":"2359","endLine":69,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2769","line":69,"column":21,"nodeType":"2358","messageId":"2359","endLine":69,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2541","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":26,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":31},{"ruleId":"2356","severity":1,"message":"2620","line":51,"column":10,"nodeType":"2358","messageId":"2359","endLine":51,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2621","line":51,"column":18,"nodeType":"2358","messageId":"2359","endLine":51,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2755","line":52,"column":10,"nodeType":"2358","messageId":"2359","endLine":52,"endColumn":17},{"ruleId":"2356","severity":1,"message":"2767","line":52,"column":19,"nodeType":"2358","messageId":"2359","endLine":52,"endColumn":29},{"ruleId":"2356","severity":1,"message":"2622","line":53,"column":10,"nodeType":"2358","messageId":"2359","endLine":53,"endColumn":15},{"ruleId":"2356","severity":1,"message":"2623","line":53,"column":17,"nodeType":"2358","messageId":"2359","endLine":53,"endColumn":25},{"ruleId":"2356","severity":1,"message":"2624","line":54,"column":10,"nodeType":"2358","messageId":"2359","endLine":54,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2625","line":54,"column":18,"nodeType":"2358","messageId":"2359","endLine":54,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2626","line":55,"column":10,"nodeType":"2358","messageId":"2359","endLine":55,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2627","line":55,"column":18,"nodeType":"2358","messageId":"2359","endLine":55,"endColumn":26},{"ruleId":"2356","severity":1,"message":"2768","line":56,"column":10,"nodeType":"2358","messageId":"2359","endLine":56,"endColumn":19},{"ruleId":"2356","severity":1,"message":"2769","line":56,"column":21,"nodeType":"2358","messageId":"2359","endLine":56,"endColumn":33},{"ruleId":"2356","severity":1,"message":"2391","line":2,"column":10,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":16},{"ruleId":"2356","severity":1,"message":"2531","line":2,"column":40,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":45},{"ruleId":"2384","severity":1,"message":"2385","line":90,"column":15,"nodeType":"2386","messageId":"2387","endLine":90,"endColumn":17},{"ruleId":"2384","severity":1,"message":"2385","line":102,"column":15,"nodeType":"2386","messageId":"2387","endLine":102,"endColumn":17},{"ruleId":"2363","severity":1,"message":"2770","line":118,"column":6,"nodeType":"2365","endLine":118,"endColumn":89,"suggestions":"2771"},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":15,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":24},{"ruleId":"2356","severity":1,"message":"2431","line":2,"column":22,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":27},{"ruleId":"2356","severity":1,"message":"2628","line":2,"column":42,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":48},{"ruleId":"2356","severity":1,"message":"2629","line":2,"column":50,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":61},{"ruleId":"2356","severity":1,"message":"2630","line":2,"column":63,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":76},{"ruleId":"2356","severity":1,"message":"2631","line":2,"column":78,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":91},{"ruleId":"2356","severity":1,"message":"2414","line":2,"column":102,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":112},{"ruleId":"2356","severity":1,"message":"2413","line":2,"column":114,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":125},{"ruleId":"2356","severity":1,"message":"2411","line":2,"column":127,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":133},{"ruleId":"2356","severity":1,"message":"2412","line":2,"column":135,"nodeType":"2358","messageId":"2359","endLine":2,"endColumn":143},{"ruleId":"2356","severity":1,"message":"2705","line":10,"column":13,"nodeType":"2358","messageId":"2359","endLine":10,"endColumn":20},{"ruleId":"2356","severity":1,"message":"2706","line":18,"column":21,"nodeType":"2358","messageId":"2359","endLine":18,"endColumn":32},{"ruleId":"2384","severity":1,"message":"2385","line":24,"column":27,"nodeType":"2386","messageId":"2387","endLine":24,"endColumn":29},{"ruleId":"2384","severity":1,"message":"2441","line":29,"column":24,"nodeType":"2386","messageId":"2387","endLine":29,"endColumn":26},{"ruleId":"2384","severity":1,"message":"2441","line":29,"column":45,"nodeType":"2386","messageId":"2387","endLine":29,"endColumn":47},{"ruleId":"2384","severity":1,"message":"2385","line":44,"column":27,"nodeType":"2386","messageId":"2387","endLine":44,"endColumn":29},{"ruleId":"2384","severity":1,"message":"2441","line":49,"column":24,"nodeType":"2386","messageId":"2387","endLine":49,"endColumn":26},{"ruleId":"2384","severity":1,"message":"2441","line":49,"column":45,"nodeType":"2386","messageId":"2387","endLine":49,"endColumn":47},{"ruleId":"2384","severity":1,"message":"2385","line":63,"column":51,"nodeType":"2386","messageId":"2387","endLine":63,"endColumn":53},{"ruleId":"2384","severity":1,"message":"2385","line":73,"column":46,"nodeType":"2386","messageId":"2387","endLine":73,"endColumn":48},{"ruleId":"2384","severity":1,"message":"2441","line":75,"column":56,"nodeType":"2386","messageId":"2387","endLine":75,"endColumn":58},{"ruleId":"2384","severity":1,"message":"2385","line":162,"column":84,"nodeType":"2386","messageId":"2387","endLine":162,"endColumn":86},{"ruleId":"2384","severity":1,"message":"2385","line":217,"column":84,"nodeType":"2386","messageId":"2387","endLine":217,"endColumn":86},{"ruleId":"2378","severity":1,"message":"2379","line":5,"column":1,"nodeType":"2380","endLine":7,"endColumn":2},{"ruleId":"2378","severity":1,"message":"2379","line":12,"column":1,"nodeType":"2380","endLine":14,"endColumn":2},{"ruleId":"2352","replacedBy":"2772"},{"ruleId":"2354","replacedBy":"2773"},{"ruleId":"2363","severity":1,"message":"2364","line":41,"column":7,"nodeType":"2365","endLine":41,"endColumn":16,"suggestions":"2774"},{"ruleId":"2352","replacedBy":"2772"},{"ruleId":"2354","replacedBy":"2773"},{"ruleId":"2378","severity":1,"message":"2379","line":27,"column":1,"nodeType":"2380","endLine":29,"endColumn":2},{"ruleId":"2356","severity":1,"message":"2572","line":1,"column":34,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":38},{"ruleId":"2363","severity":1,"message":"2681","line":18,"column":8,"nodeType":"2365","endLine":18,"endColumn":17,"suggestions":"2775"},{"ruleId":"2352","replacedBy":"2776"},{"ruleId":"2354","replacedBy":"2777"},{"ruleId":"2356","severity":1,"message":"2360","line":1,"column":24,"nodeType":"2358","messageId":"2359","endLine":1,"endColumn":33},"no-native-reassign",["2778"],"no-negated-in-lhs",["2779"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Theme' is defined but never used.","'Icon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'verifyToken'. Either include it or remove the dependency array.","ArrayExpression",["2780"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'isLatestBuildDate' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'lazy' is defined but never used.","'user' is assigned a value but never used.","no-unreachable","Unreachable code.","SwitchStatement","unreachableCode","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useHistory' is defined but never used.","'withRouter' is defined but never used.","'useDispatch' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'menuList'. Either include it or remove the dependency array.",["2781"],"'currentApp' is assigned a value but never used.","'Button' is defined but never used.","'KeyboardArrowDownIcon' is defined but never used.","'switchApp' is defined but never used.","'client' is defined but never used.","'React' is defined but never used.","'Suspense' is defined but never used.","'ProductGridListing' is assigned a value but never used.","'ProductForm' is assigned a value but never used.","'Container' is defined but never used.","'useMemo' is defined but never used.","'Rlink' is defined but never used.","'Role' is assigned a value but never used.","'handleSAML' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'qParams.p'. Either include them or remove the dependency array.",["2782"],"'Card' is defined but never used.","'CardContent' is defined but never used.","'IconButton' is defined but never used.","'List' is defined but never used.","'Tooltip' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'RLink' is defined but never used.","'processing' is assigned a value but never used.","'Grid' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'setData' is assigned a value but never used.","'TextField' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'isLogin'. Either include them or remove the dependency array.",["2783"],"'Alert' is defined but never used.","'AlertTitle' is defined but never used.","React Hook useEffect has missing dependencies: 'isLogin' and 'validateUUID'. Either include them or remove the dependency array.",["2784"],"React Hook useEffect has missing dependencies: 'getRecord' and 'mode'. Either include them or remove the dependency array.",["2785"],"'CardMedia' is defined but never used.","'Stack' is defined but never used.","'opportunities' is assigned a value but never used.","'setOpportunities' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSummary'. Either include it or remove the dependency array.",["2786"],"'ValidatorForm' is defined but never used.","'TextValidator' is defined but never used.","'LabelFieldsListing' is defined but never used.","'ExpanderComponentProps' is defined but never used.","'TableRow' is defined but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.",["2787"],"'streamgraph' is defined but never used.","'moment' is defined but never used.","'Badge' is defined but never used.","'isLogin' is assigned a value but never used.","'setProcessing' is assigned a value but never used.","'CustomerName' is assigned a value but never used.","'setCustomerName' is assigned a value but never used.","'GraphData' is assigned a value but never used.","'setGraphData' is assigned a value but never used.","'setPeriod' is assigned a value but never used.","'setCustomer' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useMemo call and refer to those specific props inside useMemo.",["2788"],"React Hook useEffect has missing dependencies: 'Customer', 'Period', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["2789"],"'Graph4' is assigned a value but never used.","'title' is assigned a value but never used.","'Graph6' is assigned a value but never used.","'series' is assigned a value but never used.","'Graph5' is assigned a value but never used.","'Graph1' is assigned a value but never used.","'Graph2' is assigned a value but never used.","'Graph3' is assigned a value but never used.","'Document' is defined but never used.","'Page' is defined but never used.","'numPages' is assigned a value but never used.","'pageNumber' is assigned a value but never used.","'setPageNumber' is assigned a value but never used.","'pdfFile' is assigned a value but never used.","'onDocumentLoadSuccess' is defined but never used.","React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.",["2790"],"'handleFileObjectClick' is assigned a value but never used.","'newData' is assigned a value but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'SearchableDropdown' is defined but never used.","'setPassword' is assigned a value but never used.","'IsCustomer' is assigned a value but never used.","'handleChangeRole' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCurrentUserVendor', 'getRecord', and 'mode'. Either include them or remove the dependency array.",["2791"],"'USER_TYPE' is defined but never used.","'ConstructionOutlined' is defined but never used.","'VENDORLIST' is assigned a value but never used.","'filters' is assigned a value but never used.","'setFilters' is assigned a value but never used.","'VendorData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'UserRole', 'getCurrentVendor', 'getRecord', 'getVendor', 'getVendorUser', and 'mode'. Either include them or remove the dependency array.",["2792"],"'getVendorsUser' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'Skeleton' is defined but never used.","'Autocomplete' is defined but never used.","'AddIcon' is defined but never used.","'DeleteOutlineIcon' is defined but never used.","'DoneIcon' is defined but never used.","'ClearIcon' is defined but never used.","'productService' is defined but never used.","'defaultAppliances' is assigned a value but never used.","'setDefaultAppliances' is assigned a value but never used.","'ApplianceInfoIndex' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAccountDetails', 'getContactDetails', and 'getOpportunityDetails'. Either include them or remove the dependency array.",["2793"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'fields' is assigned a value but never used.","'lists' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ind'. Either include it or remove the dependency array.",["2794"],"'UserRole' is assigned a value but never used.","'productList' is assigned a value but never used.","'setProductList' is assigned a value but never used.","'handleOptionSelect' is assigned a value but never used.",["2795"],["2796"],"'Typography' is defined but never used.",["2797"],"React Hook useEffect has a missing dependency: 'accid'. Either include it or remove the dependency array.",["2798"],["2799"],"'u' is defined but never used.","React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.",["2800"],"'Paper' is defined but never used.","'Filter' is defined but never used.",["2801"],"'adminService' is defined but never used.","'order_shipping' is defined but never used.","'handlerActivate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data' and 'search'. Either include them or remove the dependency array.",["2802"],["2803"],["2804"],"'LinearProgress' is defined but never used.","'Tabs' is defined but never used.","'AlertMessage' is defined but never used.","React Hook useEffect has missing dependencies: 'accid' and 'org'. Either include them or remove the dependency array.",["2805"],"'DateRange' is defined but never used.","'TimelineIcon' is defined but never used.","'DesktopDatePicker' is defined but never used.","'handleTimeSeriesChange' is assigned a value but never used.",["2806"],"'Divider' is defined but never used.","'CardActionArea' is defined but never used.","'PlanApproval' is defined but never used.","'BILLING_PLAN_STATUS' is defined but never used.","'DialogJsonFeed' is defined but never used.",["2807"],"'history' is assigned a value but never used.","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","React Hook useEffect has missing dependencies: 'bModel', 'byModel', 'getMergePlanUsageParams', and 'recalculate'. Either include them or remove the dependency array.",["2808"],"React Hook useEffect has a missing dependency: 'loadInfoData'. Either include it or remove the dependency array.",["2809"],"'ModalDialog' is defined but never used.","'getParamUnit' is assigned a value but never used.",["2810"],"React Hook useEffect has a missing dependency: 'Parameters'. Either include it or remove the dependency array.",["2811"],"React Hook useEffect has missing dependencies: 'initialCustomDefineRange', 'initialDateRange', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["2812"],"'memo' is defined but never used.","'useCallback' is defined but never used.","'active' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'open'. Either include it or remove the dependency array.",["2813"],"'ListItem' is defined but never used.","'useParams' is defined but never used.","'CSP_TYPE' is defined but never used.",["2778"],["2779"],"'GraphSkeleton' is defined but never used.","React Hook useEffect has a missing dependency: 'planParams'. Either include it or remove the dependency array.",["2814"],"React Hook useEffect has missing dependencies: 'SearchTerm' and 'filterParameter'. Either include them or remove the dependency array.",["2815"],"React Hook useEffect has a missing dependency: 'parameters'. Either include it or remove the dependency array.",["2816"],["2817"],"'Switch' is defined but never used.","'helper' is defined but never used.",["2818"],"'Box' is defined but never used.","'Comparison' is defined but never used.","'MonthlyComparison' is defined but never used.","'MatrixOthers' is defined but never used.","'DonutSmallIcon' is defined but never used.","'obj' is assigned a value but never used.",["2819"],"'Slider' is defined but never used.","'NetworkWifiIcon' is defined but never used.","'DataUsageIcon' is defined but never used.",["2820"],"'ACCOUNT_DESCRIPTION' is defined but never used.","'AreaGraphSingleSeries' is assigned a value but never used.",["2821"],"'len' is assigned a value but never used.",["2822"],"'tags' is assigned a value but never used.","'setTag' is assigned a value but never used.",["2823"],"'CheckIcon' is defined but never used.","'img1' is defined but never used.","'img2' is defined but never used.","'data' is assigned a value but never used.","'Data' is assigned a value but never used.",["2824"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["2825"],"'option' is assigned a value but never used.","'setOption' is assigned a value but never used.","'total' is assigned a value but never used.","'setTotal' is assigned a value but never used.","'total1' is assigned a value but never used.","'setTotal1' is assigned a value but never used.","'total2' is assigned a value but never used.","'seTotal2' is assigned a value but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'DialogActions' is defined but never used.","'COLOR_SERIES' is defined but never used.","'brightness' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'subTitle' is assigned a value but never used.",["2826"],["2827"],["2828"],"'ContactPreview' is defined but never used.","'EventPreview' is defined but never used.","'OpportunityPreview' is defined but never used.",["2829"],"'useRef' is defined but never used.","'LinearProgressProps' is defined but never used.",["2830"],"'Loader' is assigned a value but never used.",["2831"],"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",["2832"],["2833"],"'HighchartsHeatmap' is defined but never used.","'Breadcrumbs' is defined but never used.","'Link' is defined but never used.","'ListItemText' is defined but never used.","'handlerShowTagDialog' is assigned a value but never used.","'rows' is assigned a value but never used.","'setRows' is assigned a value but never used.","no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf","React Hook useEffect has a missing dependency: 'handlerSearch'. Either include it or remove the dependency array.",["2834"],"'ShowAccountSelector' is assigned a value but never used.","'handlerChangeStatus' is assigned a value but never used.","'handlerChangeTerm' is assigned a value but never used.","'handlerClickSearch' is assigned a value but never used.","'handlerClickClear' is assigned a value but never used.","'handlerShowAccountSelector' is assigned a value but never used.","'handlerOnCloseAccountSelector' is assigned a value but never used.",["2835"],["2836"],"'useSelector' is defined but never used.",["2837"],["2838"],"'TableContainer' is defined but never used.","'refresh' is assigned a value but never used.",["2839"],"React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array. If 'setState' needs the current value of 'type', you can also switch to useReducer instead of useState and read 'type' in the reducer.",["2840"],"'category1' is assigned a value but never used.","'category2' is assigned a value but never used.",["2841"],"React Hook useEffect has a missing dependency: 'load2'. Either include it or remove the dependency array.",["2842"],["2843"],["2844"],["2845"],"'login' is defined but never used.","'appTheme' is defined but never used.","'qParams' is assigned a value but never used.","'FullName' is assigned a value but never used.","'setFullName' is assigned a value but never used.","'nextButton' is assigned a value but never used.",["2846"],"'required' is assigned a value but never used.",["2847"],"'Collapse' is defined but never used.","'LineChart' is defined but never used.","'AnimatedNumber' is defined but never used.","'accid' is assigned a value but never used.",["2848"],"'onClose' is assigned a value but never used.","'setCategory' is assigned a value but never used.","'tagDialog' is assigned a value but never used.","'setTagDialog' is assigned a value but never used.","'PdfDocument' is defined but never used.","'pdf' is defined but never used.","'saveAs' is defined but never used.","'setFutrueCategory' is assigned a value but never used.","'VersionCategory' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'updateDashboard' and 'valueFormula'. Either include them or remove the dependency array.",["2849"],"React Hook useEffect has a missing dependency: 'updateFutureDashboard'. Either include it or remove the dependency array.",["2850"],"React Hook useEffect has missing dependencies: 'futureSpend', 'load', 'props.mode', and 'spend'. Either include them or remove the dependency array. You can also do a functional update 'setSpend(s => ...)' if you only need 'spend' in the 'setSpend' call.",["2851"],["2852"],"'b64Jpeg' is assigned a value but never used.","'ContactForm' is defined but never used.","React Hook useEffect has a missing dependency: 'getSupportContact'. Either include it or remove the dependency array.",["2853"],"'billingConfigurator' is defined but never used.","'InfoDialog' is assigned a value but never used.","'handlerCloseInfoDialog' is assigned a value but never used.","'handlerShowFeedDialog' is assigned a value but never used.","'handlerOnCloseFeedDialog' is assigned a value but never used.","'FormLabel' is defined but never used.","'InputAdornment' is defined but never used.","'CSPImage' is defined but never used.","'SPLIT_BILLING_TYPE' is assigned a value but never used.","'selectedCSP' is defined but never used.","'Discount' is assigned a value but never used.","'setDiscount' is assigned a value but never used.","'Term' is assigned a value but never used.","'setTerm' is assigned a value but never used.",["2854"],"'coin' is defined but never used.",["2778"],["2779"],["2855"],["2856"],["2857"],"'sfdc' is defined but never used.","'CircularProgress' is defined but never used.","'Account' is assigned a value but never used.","'setAccount' is assigned a value but never used.","'searchContact' is assigned a value but never used.","'ContactName' is assigned a value but never used.","'setContactName' is assigned a value but never used.","'ContactID' is assigned a value but never used.","'setContactID' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'handleChangeSearchContact' is assigned a value but never used.","'ContactData' is assigned a value but never used.","'setContactData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getOrderTracking'. Either include it or remove the dependency array.",["2858"],"'handleEmails' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'Value', 'option', 'spend', and 'updateTiles'. Either include them or remove the dependency array. You can also do a functional update 'setOption(o => ...)' if you only need 'option' in the 'setOption' call.",["2859"],["2860"],"'category' is assigned a value but never used.","'setloading' is assigned a value but never used.","'ShowGraph' is assigned a value but never used.","'setShowGraph' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'futureValue', 'option', and 'updateTiles'. Either include them or remove the dependency array. You can also do a functional update 'setOption(o => ...)' if you only need 'option' in the 'setOption' call.",["2861"],["2778"],["2779"],["2862"],["2863"],["2778"],["2779"],"no-global-assign","no-unsafe-negation",{"desc":"2864","fix":"2865"},{"desc":"2866","fix":"2867"},{"desc":"2868","fix":"2869"},{"desc":"2870","fix":"2871"},{"desc":"2872","fix":"2873"},{"desc":"2874","fix":"2875"},{"desc":"2876","fix":"2877"},{"desc":"2878","fix":"2879"},{"desc":"2880","fix":"2881"},{"desc":"2882","fix":"2883"},{"desc":"2884","fix":"2885"},{"desc":"2886","fix":"2887"},{"desc":"2888","fix":"2889"},{"desc":"2890","fix":"2891"},{"desc":"2892","fix":"2893"},{"desc":"2892","fix":"2894"},{"desc":"2892","fix":"2895"},{"desc":"2896","fix":"2897"},{"desc":"2898","fix":"2899"},{"desc":"2900","fix":"2901"},{"desc":"2902","fix":"2903"},{"desc":"2902","fix":"2904"},{"desc":"2905","fix":"2906"},{"desc":"2902","fix":"2907"},{"desc":"2902","fix":"2908"},{"desc":"2909","fix":"2910"},{"desc":"2898","fix":"2911"},{"desc":"2912","fix":"2913"},{"desc":"2914","fix":"2915"},{"desc":"2916","fix":"2917"},{"desc":"2918","fix":"2919"},{"desc":"2920","fix":"2921"},{"desc":"2922","fix":"2923"},{"desc":"2924","fix":"2925"},{"desc":"2926","fix":"2927"},{"desc":"2928","fix":"2929"},{"desc":"2930","fix":"2931"},{"desc":"2932","fix":"2933"},{"desc":"2932","fix":"2934"},{"desc":"2935","fix":"2936"},{"desc":"2935","fix":"2937"},{"desc":"2935","fix":"2938"},{"desc":"2935","fix":"2939"},{"desc":"2935","fix":"2940"},{"desc":"2935","fix":"2941"},{"desc":"2942","fix":"2943"},{"desc":"2935","fix":"2944"},{"desc":"2935","fix":"2945"},{"desc":"2946","fix":"2947"},{"desc":"2932","fix":"2948"},{"desc":"2932","fix":"2949"},{"desc":"2932","fix":"2950"},{"desc":"2951","fix":"2952"},{"desc":"2953","fix":"2954"},{"desc":"2955","fix":"2956"},{"desc":"2955","fix":"2957"},{"desc":"2955","fix":"2958"},{"desc":"2955","fix":"2959"},{"desc":"2955","fix":"2960"},{"desc":"2932","fix":"2961"},{"desc":"2962","fix":"2963"},{"desc":"2964","fix":"2965"},{"desc":"2966","fix":"2967"},{"desc":"2932","fix":"2968"},{"desc":"2932","fix":"2969"},{"desc":"2932","fix":"2970"},{"desc":"2870","fix":"2971"},{"desc":"2870","fix":"2972"},{"desc":"2902","fix":"2973"},{"desc":"2974","fix":"2975"},{"desc":"2976","fix":"2977"},{"desc":"2978","fix":"2979"},{"desc":"2898","fix":"2980"},{"desc":"2981","fix":"2982"},{"desc":"2955","fix":"2983"},{"desc":"2896","fix":"2984"},{"desc":"2898","fix":"2985"},{"desc":"2900","fix":"2986"},{"desc":"2987","fix":"2988"},{"desc":"2989","fix":"2990"},{"desc":"2902","fix":"2991"},{"desc":"2992","fix":"2993"},{"desc":"2864","fix":"2994"},{"desc":"2962","fix":"2995"},"Update the dependencies array to be: [isLogin, verifyToken]",{"range":"2996","text":"2997"},"Update the dependencies array to be: [currentAppId, menuList]",{"range":"2998","text":"2999"},"Update the dependencies array to be: [dispatch, qParams.p]",{"range":"3000","text":"3001"},"Update the dependencies array to be: [history, isLogin]",{"range":"3002","text":"3003"},"Update the dependencies array to be: [isLogin, validateUUID]",{"range":"3004","text":"3005"},"Update the dependencies array to be: [getRecord, mode]",{"range":"3006","text":"3007"},"Update the dependencies array to be: [getSummary]",{"range":"3008","text":"3009"},"Update the dependencies array to be: [domainID, load]",{"range":"3010","text":"3011"},"Update the dependencies array to be: [props, Period, Customer]",{"range":"3012","text":"3013"},"Update the dependencies array to be: [Customer, Period, props]",{"range":"3014","text":"3015"},"Update the dependencies array to be: [init]",{"range":"3016","text":"3017"},"Update the dependencies array to be: [getCurrentUserVendor, getRecord, mode]",{"range":"3018","text":"3019"},"Update the dependencies array to be: [UserRole, getCurrentVendor, getRecord, getVendor, getVendorUser, mode]",{"range":"3020","text":"3021"},"Update the dependencies array to be: [getAccountDetails, getContactDetails, getOpportunityDetails]",{"range":"3022","text":"3023"},"Update the dependencies array to be: [data, ind]",{"range":"3024","text":"3025"},{"range":"3026","text":"3025"},{"range":"3027","text":"3025"},"Update the dependencies array to be: [Account, RDateRange, load]",{"range":"3028","text":"3029"},"Update the dependencies array to be: [UserType, accid]",{"range":"3030","text":"3031"},"Update the dependencies array to be: [account, date, load]",{"range":"3032","text":"3033"},"Update the dependencies array to be: [filters, search]",{"range":"3034","text":"3035"},{"range":"3036","text":"3035"},"Update the dependencies array to be: [data, filters, search]",{"range":"3037","text":"3038"},{"range":"3039","text":"3035"},{"range":"3040","text":"3035"},"Update the dependencies array to be: [UserType, accid, org]",{"range":"3041","text":"3042"},{"range":"3043","text":"3031"},"Update the dependencies array to be: [Filter, load]",{"range":"3044","text":"3045"},"Update the dependencies array to be: [InfoData, bModel, byModel, getMergePlanUsageParams, recalculate]",{"range":"3046","text":"3047"},"Update the dependencies array to be: [loadInfoData]",{"range":"3048","text":"3049"},"Update the dependencies array to be: [load]",{"range":"3050","text":"3051"},"Update the dependencies array to be: [Parameters, StandardPlan]",{"range":"3052","text":"3053"},"Update the dependencies array to be: [initialCustomDefineRange, initialDateRange, props]",{"range":"3054","text":"3055"},"Update the dependencies array to be: [loading, open]",{"range":"3056","text":"3057"},"Update the dependencies array to be: [planParams]",{"range":"3058","text":"3059"},"Update the dependencies array to be: [Groups, PreferredOnly, AvailableUsageOnly, filterParameter, SearchTerm]",{"range":"3060","text":"3061"},"Update the dependencies array to be: [parameters, planParams]",{"range":"3062","text":"3063"},"Update the dependencies array to be: [id, load]",{"range":"3064","text":"3065"},{"range":"3066","text":"3065"},"Update the dependencies array to be: [AccountID, Period, startDate, endDate, load]",{"range":"3067","text":"3068"},{"range":"3069","text":"3068"},{"range":"3070","text":"3068"},{"range":"3071","text":"3068"},{"range":"3072","text":"3068"},{"range":"3073","text":"3068"},"Update the dependencies array to be: [Value, props]",{"range":"3074","text":"3075"},{"range":"3076","text":"3068"},{"range":"3077","text":"3068"},"Update the dependencies array to be: [Account, load]",{"range":"3078","text":"3079"},{"range":"3080","text":"3065"},{"range":"3081","text":"3065"},{"range":"3082","text":"3065"},"Update the dependencies array to be: [id, loadData]",{"range":"3083","text":"3084"},"Update the dependencies array to be: [AccountID, Period, load]",{"range":"3085","text":"3086"},"Update the dependencies array to be: [handlerSearch]",{"range":"3087","text":"3088"},{"range":"3089","text":"3088"},{"range":"3090","text":"3088"},{"range":"3091","text":"3088"},{"range":"3092","text":"3088"},{"range":"3093","text":"3065"},"Update the dependencies array to be: [message, type]",{"range":"3094","text":"3095"},"Update the dependencies array to be: [data, load]",{"range":"3096","text":"3097"},"Update the dependencies array to be: [Account, load2]",{"range":"3098","text":"3099"},{"range":"3100","text":"3065"},{"range":"3101","text":"3065"},{"range":"3102","text":"3065"},{"range":"3103","text":"3003"},{"range":"3104","text":"3003"},{"range":"3105","text":"3035"},"Update the dependencies array to be: [Variables, spend, actualUsage, updateDashboard, valueFormula]",{"range":"3106","text":"3107"},"Update the dependencies array to be: [FutureVariables, futureSpend, futureValue, updateFutureDashboard]",{"range":"3108","text":"3109"},"Update the dependencies array to be: [props.rowData, Account, props.mode, load, spend, futureSpend]",{"range":"3110","text":"3111"},{"range":"3112","text":"3031"},"Update the dependencies array to be: [getSupportContact]",{"range":"3113","text":"3114"},{"range":"3115","text":"3088"},{"range":"3116","text":"3029"},{"range":"3117","text":"3031"},{"range":"3118","text":"3033"},"Update the dependencies array to be: [getOrderTracking]",{"range":"3119","text":"3120"},"Update the dependencies array to be: [series, category, value, option, updateTiles, Value, spend]",{"range":"3121","text":"3122"},{"range":"3123","text":"3035"},"Update the dependencies array to be: [futureSeries, futureSpend, pastSeries, pastSpend, pastCategory, futureCategory, value, option, updateTiles, futureValue]",{"range":"3124","text":"3125"},{"range":"3126","text":"2997"},{"range":"3127","text":"3095"},[1373,1382],"[isLogin, verifyToken]",[771,785],"[currentAppId, menuList]",[2328,2330],"[dispatch, qParams.p]",[1226,1228],"[history, isLogin]",[1901,1903],"[isLogin, validateUUID]",[3800,3802],"[getRecord, mode]",[1500,1502],"[getSummary]",[5078,5088],"[domainID, load]",[28049,28066],"[props, Period, Customer]",[28135,28137],"[Customer, Period, props]",[3736,3738],"[init]",[5220,5222],"[getCurrentUserVendor, getRecord, mode]",[7452,7454],"[UserRole, getCurrentVendor, getRecord, getVendor, getVendorUser, mode]",[19636,19638],"[getAccountDetails, getContactDetails, getOpportunityDetails]",[48987,48993],"[data, ind]",[54244,54250],[61996,62002],[2251,2271],"[Account, RDateRange, load]",[2401,2411],"[UserType, accid]",[7881,7895],"[account, date, load]",[2290,2299],"[filters, search]",[1526,1535],[5339,5348],"[data, filters, search]",[2465,2474],[2460,2469],[981,991],"[UserType, accid, org]",[6906,6916],[1572,1580],"[Filter, load]",[12862,12872],"[InfoData, bModel, byModel, getMergePlanUsageParams, recalculate]",[12962,12964],"[loadInfoData]",[3355,3357],"[load]",[4349,4363],"[Parameters, StandardPlan]",[2715,2717],"[initialCustomDefineRange, initialDateRange, props]",[1588,1597],"[loading, open]",[1405,1407],"[planParams]",[5703,5744],"[Groups, PreferredOnly, AvailableUsageOnly, filterParameter, SearchTerm]",[6730,6742],"[parameters, planParams]",[759,763],"[id, load]",[1188,1192],[3719,3758],"[AccountID, Period, startDate, endDate, load]",[3980,4019],[1791,1830],[3100,3139],[3724,3763],[4465,4504],[503,510],"[Value, props]",[3027,3066],[2022,2061],[6098,6107],"[Account, load]",[787,791],[1018,1022],[720,724],[981,985],"[id, loadData]",[1543,1562],"[AccountID, Period, load]",[448,450],"[handlerSearch]",[448,450],[510,512],[422,424],[384,386],[698,702],[489,498],"[message, type]",[2445,2451],"[data, load]",[3382,3391],"[Account, load2]",[718,722],[698,702],[688,692],[2477,2479],[1847,1849],[6472,6481],[8676,8705],"[Variables, spend, actualUsage, updateDashboard, valueFormula]",[8827,8868],"[FutureVariables, futureSpend, futureValue, updateFutureDashboard]",[9733,9756],"[props.rowData, Account, props.mode, load, spend, futureSpend]",[14792,14802],[1211,1213],"[getSupportContact]",[384,386],[2311,2332],[2458,2468],[8097,8112],[1835,1837],"[getOrderTracking]",[3490,3515],"[series, category, value, option, updateTiles, Value, spend]",[2395,2404],[3924,4007],"[futureSeries, futureSpend, pastSeries, pastSpend, pastCategory, futureCategory, value, option, updateTiles, futureValue]",[1218,1227],[489,498]]