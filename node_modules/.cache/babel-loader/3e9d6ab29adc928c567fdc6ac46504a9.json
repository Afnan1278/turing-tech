{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\react\\\\test\\\\src\\\\components\\\\SnakAlert.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, memo } from 'react';\nimport { Alert } from '@mui/material/';\nimport Snackbar from '@mui/material/Snackbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar snakAlertType;\n\n(function (snakAlertType) {\n  snakAlertType[\"success\"] = \"success\";\n  snakAlertType[\"error\"] = \"error\";\n  snakAlertType[\"warning\"] = \"warning\";\n  snakAlertType[\"info\"] = \"info\";\n})(snakAlertType || (snakAlertType = {}));\n\nwindow.snakAlert = {\n  success: Function,\n  warning: Function,\n  error: Function,\n  info: Function,\n  show: Function\n};\n\nconst SnakAlert = () => {\n  _s();\n\n  const [state, setState] = useState({\n    type: snakAlertType.success,\n    open: false,\n    message: ''\n  });\n\n  const handleClose = (e, reason) => {\n    if (reason !== 'clickaway') setState({ ...state,\n      open: false\n    });\n  };\n\n  window.snakAlert.success = message => {\n    setState({ ...state,\n      open: true,\n      message: message,\n      type: snakAlertType.success\n    });\n  };\n\n  window.snakAlert.warning = message => {\n    setState({ ...state,\n      open: true,\n      message: message,\n      type: snakAlertType.warning\n    });\n  };\n\n  window.snakAlert.error = message => {\n    setState({ ...state,\n      open: true,\n      message: message,\n      type: snakAlertType.error\n    });\n  };\n\n  window.snakAlert.info = message => {\n    setState({ ...state,\n      open: true,\n      message: message,\n      type: snakAlertType.info\n    });\n  };\n\n  window.snakAlert.show = res => {\n    if (res.success) {\n      window.snakAlert.success(res.message);\n    } else {\n      window.snakAlert.error(res.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Snackbar, {\n      className: \"snak-alert\",\n      open: state.open,\n      autoHideDuration: 5000,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      style: {\n        top: '80px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => {\n          handleClose(null, null);\n        },\n        severity: state.type,\n        children: state.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SnakAlert, \"e9YQlj9X5VUNneLvnCmwndsGXVo=\");\n\n_c = SnakAlert;\nexport default _c2 = /*#__PURE__*/memo(SnakAlert);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SnakAlert\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","memo","Alert","Snackbar","snakAlertType","window","snakAlert","success","Function","warning","error","info","show","SnakAlert","state","setState","type","open","message","handleClose","e","reason","res","vertical","horizontal","top"],"sources":["D:/Workspace/react/test/src/components/SnakAlert.tsx"],"sourcesContent":["import React,{useState,useEffect,memo} from 'react';\r\nimport {Alert} from '@mui/material/';\r\nimport Snackbar from '@mui/material/Snackbar';\r\n\r\nenum snakAlertType{\r\n    success='success',\r\n    error='error',\r\n    warning='warning',\r\n    info='info'\r\n}\r\n \r\ndeclare global {\r\n    interface Window {\r\n        snakAlert:any\r\n    }\r\n}\r\n\r\nwindow.snakAlert = {\r\n    success:Function,\r\n    warning:Function,\r\n    error:Function,\r\n    info:Function,\r\n    show:Function\r\n}\r\n\r\nconst SnakAlert:React.FC = ()=>{\r\n    \r\n    const [state,setState]:any = useState({type:snakAlertType.success,open:false,message:''});\r\n    \r\n    const handleClose = (e:any,reason:any)=>{\r\n        if(reason !== 'clickaway')\r\n            setState({...state,open:false});\r\n    }\r\n\r\n    window.snakAlert.success = (message:string)=>{\r\n        setState({...state,open:true,message:message,type:snakAlertType.success})\r\n    }\r\n    window.snakAlert.warning = (message:string)=>{\r\n        setState({...state,open:true,message:message,type:snakAlertType.warning})\r\n    }\r\n    window.snakAlert.error = (message:string)=>{\r\n        setState({...state,open:true,message:message,type:snakAlertType.error})\r\n    }\r\n    window.snakAlert.info = (message:string)=>{\r\n        setState({...state,open:true,message:message,type:snakAlertType.info})\r\n    }\r\n    window.snakAlert.show = (res:any)=>{\r\n        if(res.success){\r\n            window.snakAlert.success(res.message);\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <Snackbar className=\"snak-alert\"\r\n            open={state.open} \r\n            autoHideDuration={5000} \r\n            onClose={handleClose} \r\n            anchorOrigin={{ vertical:'top', horizontal:'center' }}\r\n            style={{top:'80px'}}\r\n            >\r\n            <Alert onClose={()=>{handleClose(null,null)}} severity={state.type}>\r\n                {state.message}\r\n            </Alert>\r\n        </Snackbar>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default memo(SnakAlert);"],"mappings":"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"},"metadata":{},"sourceType":"module"}